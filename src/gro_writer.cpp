//
// Created by xiamr on 3/19/19.
//

#include <string>
#include <memory>
#include <fstream>
#include <map>
#include <boost/format.hpp>

namespace gmx {

#include "gromacs/fileio/xtcio.h"
#include "gromacs/fileio/trnio.h"
#include "gromacs/utility/smalloc.h"

}
#include "gmxtrr.h"

#include "atom.hpp"
#include "frame.hpp"
#include "gro_writer.hpp"


void GROWriter::open(const std::string &filename) {
    f.open(filename, std::ios::out);
}

void GROWriter::close() {
    f.close();
}

void GROWriter::write(const std::shared_ptr<Frame> &frame) {

    f << frame->title << ", Generated by Analysis (Miaoren) , t = 0.0\n";
    f << frame->atom_list.size() << '\n';
    int mol_index = 1;
    std::map<std::shared_ptr<Molecule>, int> mol_index_map;
    for (auto &atom : frame->atom_list) {
        int local_mol_index;
        if (mol_index_map.count(atom->molecule.lock())) {
            local_mol_index = mol_index_map[atom->molecule.lock()];
        } else {
            local_mol_index = mol_index;
            mol_index_map[atom->molecule.lock()] = local_mol_index;
            mol_index++;
        }

        f << boost::format("%5d%-5s%5s%5d%8.3f%8.3f%8.3f\n")  % mol_index % std::to_string(mol_index) %
                          atom->atom_name % atom->seq % (atom->x / 10.0) % (atom->y / 10.0 ) % (atom->z / 10.0);
    }
    if (frame->enable_bound) {
        if (frame->alpha == 90.00 and frame->beta == 90.00 and frame->gamma == 90.00) {
            f << boost::format("%f   %f   %f \n") % (frame->a_axis / 10.0) % (frame->b_axis / 10.0) % (frame->c_axis / 10.0);
        } else {
            gmx::rvec box[3];
            translate(frame->a_axis / 10.0, frame->b_axis / 10.0, frame->c_axis / 10.0,
                      frame->alpha, frame->beta, frame->gamma, box);
            f << boost::format("%f   %f   %f   %f   %f   %f    %f   %f   %f\n") %
                              box[0][0] % box[1][1] % box[2][2]% box[0][1]% box[0][2]% box[1][2]% box[2][0]%
                              box[2][1];
        }
    }

}
