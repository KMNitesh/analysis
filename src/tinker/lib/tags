!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
10	active.os	/^   10       continue$/;"	l	subroutine:active	file:
10	analysis.os	/^   10    format (\/,' ANALYSIS  --  Illegal Value for the Total',$/;"	l	subroutine:analysis	file:
10	angles.os	/^   10             format (\/,' ANGLES  --  Too many Bond Angles;',$/;"	l	subroutine:angles	file:
10	attach.os	/^   10          continue$/;"	l	subroutine:attach	file:
10	basefile.os	/^   10 continue$/;"	l	subroutine:basefile	file:
10	bitors.os	/^   10                   format (\/,' BITORS  --  Too many Adjacent',$/;"	l	subroutine:bitors	file:
10	bonds.os	/^   10             format (\/,' BONDS  --  Too many Bonds; Increase',$/;"	l	subroutine:bonds	file:
10	born.os	/^   10    format (\/,' Born Radii for Individual Atoms :',\/)$/;"	l	subroutine:born	file:
10	chkring.os	/^   10    continue$/;"	l	subroutine:chkring	file:
10	chkxyz.os	/^   10             format ()$/;"	l	subroutine:chkxyz	file:
10	cluster.os	/^   10          format (\/,' CLUSTER  --  Too many Atom Groups;',$/;"	l	subroutine:cluster	file:
10	connect.os	/^   10    continue$/;"	l	subroutine:connect	file:
10	connolly.os	/^   10          continue$/;"	l	subroutine:vam	file:
10	connolly.os	/^   10       continue$/;"	l	subroutine:nearby	file:
10	connolly.os	/^   10    continue$/;"	l	subroutine:contact	file:
10	connolly.os	/^   10    continue$/;"	l	subroutine:place	file:
10	connolly.os	/^   10    continue$/;"	l	subroutine:saddles	file:
10	connolly.os	/^   10 continue$/;"	l	subroutine:gendot	file:
10	connolly.os	/^   10 format (\/,' CONNOLLY  --  ',a)$/;"	l	subroutine:cerror	file:
10	control.os	/^   10    continue$/;"	l	subroutine:control	file:
10	cspline.os	/^   10    format (' CSPLINE  --  Warning, Non-Periodic Input',$/;"	l	subroutine:cspline	file:
10	cutoffs.os	/^   10    continue$/;"	l	subroutine:cutoffs	file:
10	deflate.os	/^   10    format (\/,' DEFLATE  --  Eigenvalue',i3,' not Fully Converged')$/;"	l	subroutine:deflate	file:
10	delete.os	/^   10    format (' DELETE  --  Deleting Atom Number :',i8)$/;"	l	subroutine:delete	file:
10	diagq.os	/^   10       continue$/;"	l	subroutine:diagq	file:
10	diffeq.os	/^   10       format (\/,' DIFFEQ  --  Normal Termination',$/;"	l	subroutine:diffeq	file:
10	diffeq.os	/^   10    continue$/;"	l	subroutine:bsstep	file:
10	diffeq.os	/^   10 format (i6,2x,4f13.4,6x,a7)$/;"	l	subroutine:gdastat	file:
10	eangang3.os	/^   10                format (\/,' Individual Angle-Angle Interactions :',$/;"	l	subroutine:eangang3	file:
10	eangle2.os	/^   10             continue$/;"	l	subroutine:eangle2a	file:
10	eangle3.os	/^   10                   format (\/,' Individual Angle Bending',$/;"	l	subroutine:eangle3	file:
10	eangtor3.os	/^   10                format (\/,' Individual Angle-Torsion',$/;"	l	subroutine:eangtor3	file:
10	ebond3.os	/^   10             format (\/,' Individual Bond Stretching',$/;"	l	subroutine:ebond3	file:
10	ebuck.os	/^   10    continue$/;"	l	subroutine:ebuck0b	file:
10	ebuck.os	/^   10    format (\/,' EBUCK  --  Stophat Smoothing not Available',$/;"	l	subroutine:ebuck	file:
10	ebuck1.os	/^   10    continue$/;"	l	subroutine:ebuck1b	file:
10	ebuck1.os	/^   10    format (\/,' EBUCK1  --  Stophat Smoothing not Available',$/;"	l	subroutine:ebuck1	file:
10	ebuck2.os	/^   10    format (\/,' EBUCK2  --  Stophat Smoothing not Available',$/;"	l	subroutine:ebuck2	file:
10	ebuck2.os	/^   10 continue$/;"	l	subroutine:ebuck2a	file:
10	ebuck3.os	/^   10                   format (\/,' Individual van der Waals',$/;"	l	subroutine:ebuck3a	file:
10	ebuck3.os	/^   10                   format (\/,' Individual van der Waals',$/;"	l	subroutine:ebuck3c	file:
10	ebuck3.os	/^   10    continue$/;"	l	subroutine:ebuck3b	file:
10	ebuck3.os	/^   10    format (\/,' EBUCK3  --  Stophat Smoothing not Available',$/;"	l	subroutine:ebuck3	file:
10	echarge.os	/^   10    continue$/;"	l	subroutine:echarge0b	file:
10	echarge.os	/^   10    continue$/;"	l	subroutine:echarge0e	file:
10	echarge1.os	/^   10    continue$/;"	l	subroutine:echarge1b	file:
10	echarge1.os	/^   10    continue$/;"	l	subroutine:echarge1e	file:
10	echarge2.os	/^   10 continue$/;"	l	subroutine:echarge2a	file:
10	echarge2.os	/^   10 continue$/;"	l	subroutine:echarge2b	file:
10	echarge2.os	/^   10 continue$/;"	l	subroutine:echarge2c	file:
10	echarge3.os	/^   10                   format (\/,' Individual Charge-Charge',$/;"	l	subroutine:echarge3a	file:
10	echarge3.os	/^   10                   format (\/,' Individual Charge-Charge',$/;"	l	subroutine:echarge3c	file:
10	echarge3.os	/^   10                   format (\/,' Individual Real Space Ewald',$/;"	l	subroutine:echarge3d	file:
10	echarge3.os	/^   10                   format (\/,' Individual Real Space Ewald',$/;"	l	subroutine:echarge3f	file:
10	echarge3.os	/^   10                format (\/,' Individual Charge-Charge',$/;"	l	subroutine:echarge3g	file:
10	echarge3.os	/^   10    continue$/;"	l	subroutine:echarge3b	file:
10	echarge3.os	/^   10    continue$/;"	l	subroutine:echarge3e	file:
10	echgdpl2.os	/^   10    continue$/;"	l	subroutine:echgdpl2	file:
10	echgdpl3.os	/^   10                   format (\/,' Individual Charge-Dipole',$/;"	l	subroutine:echgdpl3	file:
10	edipole2.os	/^   10    continue$/;"	l	subroutine:edipole2	file:
10	edipole3.os	/^   10                   format (\/,' Individual Dipole-Dipole',$/;"	l	subroutine:edipole3	file:
10	egauss.os	/^   10    continue$/;"	l	subroutine:egauss0b	file:
10	egauss1.os	/^   10    continue$/;"	l	subroutine:egauss1b	file:
10	egauss2.os	/^   10 continue$/;"	l	subroutine:egauss2a	file:
10	egauss2.os	/^   10 continue$/;"	l	subroutine:egauss2b	file:
10	egauss3.os	/^   10                   format (\/,' Individual van der Waals',$/;"	l	subroutine:egauss3a	file:
10	egauss3.os	/^   10                   format (\/,' Individual van der Waals',$/;"	l	subroutine:egauss3c	file:
10	egauss3.os	/^   10                format (\/,' Individual van der Waals',$/;"	l	subroutine:egauss3d	file:
10	egauss3.os	/^   10    continue$/;"	l	subroutine:egauss3b	file:
10	egeom2.os	/^   10          continue$/;"	l	subroutine:egeom2	file:
10	egeom3.os	/^   10             format (\/,' Individual Atomic Position Restraint',$/;"	l	subroutine:egeom3	file:
10	ehal.os	/^   10    continue$/;"	l	subroutine:ehal0b	file:
10	ehal1.os	/^   10    continue$/;"	l	subroutine:ehal1b	file:
10	ehal2.os	/^   10 continue$/;"	l	subroutine:ehal2	file:
10	ehal3.os	/^   10                   format (\/,' Individual van der Waals',$/;"	l	subroutine:ehal3a	file:
10	ehal3.os	/^   10                   format (\/,' Individual van der Waals',$/;"	l	subroutine:ehal3c	file:
10	ehal3.os	/^   10       format (\/,' Long Range vdw Correction :',9x,f12.4)$/;"	l	subroutine:ehal3	file:
10	ehal3.os	/^   10    continue$/;"	l	subroutine:ehal3b	file:
10	eimprop3.os	/^   10                format (\/,' Individual Improper Dihedral',$/;"	l	subroutine:eimprop3	file:
10	eimptor3.os	/^   10                format (\/,' Individual Improper Torsion',$/;"	l	subroutine:eimptor3	file:
10	elj.os	/^   10    continue$/;"	l	subroutine:elj0b	file:
10	elj1.os	/^   10    continue$/;"	l	subroutine:elj1b	file:
10	elj2.os	/^   10 continue$/;"	l	subroutine:elj2a	file:
10	elj2.os	/^   10 continue$/;"	l	subroutine:elj2c	file:
10	elj3.os	/^   10                   format (\/,' Individual van der Waals',$/;"	l	subroutine:elj3a	file:
10	elj3.os	/^   10                   format (\/,' Individual van der Waals',$/;"	l	subroutine:elj3c	file:
10	elj3.os	/^   10                format (\/,' Individual van der Waals',$/;"	l	subroutine:elj3e	file:
10	elj3.os	/^   10       format (\/,' Long Range vdw Correction :',9x,f12.4)$/;"	l	subroutine:elj3	file:
10	elj3.os	/^   10    continue$/;"	l	subroutine:elj3b	file:
10	embed.os	/^   10             continue$/;"	l	subroutine:dstmat	file:
10	embed.os	/^   10             format (\/,' TRIANGLE  --  Inconsistent Bounds;',$/;"	l	subroutine:triangle	file:
10	embed.os	/^   10       continue$/;"	l	function:vdwerr	file:
10	embed.os	/^   10       format (\/,' Chirality and Planarity Constraints :')$/;"	l	subroutine:kchiral	file:
10	embed.os	/^   10       format (\/,' EMBED  --  Warning, Using Metric Matrix',$/;"	l	subroutine:embed	file:
10	embed.os	/^   10    format (\/,' Eigenvalues from Metric Matrix :',\/)$/;"	l	subroutine:eigen	file:
10	embed.os	/^   10    format (\/,' Index of Structure Expansion\/Compaction :',$/;"	l	subroutine:chksize	file:
10	embed.os	/^   10    format (\/,' Majorization to Trial Distances using',$/;"	l	subroutine:majorize	file:
10	embed.os	/^   10    format (\/,' Radius of Gyration after Embedding :',8x,f16.4)$/;"	l	subroutine:coords	file:
10	embed.os	/^   10    format (\/,' Radius of Gyration before Embedding :',7x,f16.4)$/;"	l	subroutine:metric	file:
10	embed.os	/^   10 format (\/,' Fit to Bounds ',a)$/;"	l	subroutine:rmserror	file:
10	embed.os	/^   10 format (\/,' Fractional Distance Distribution ',a,\/)$/;"	l	subroutine:fracdist	file:
10	embed.os	/^   10 format (\/,' Molecular Dynamics Simulated Annealing Refinement :')$/;"	l	subroutine:explore	file:
10	embed.os	/^   10 format (\/,1x,130a1)$/;"	l	subroutine:grafic	file:
10	emetal.os	/^   10       continue$/;"	l	subroutine:emetal	file:
10	emetal1.os	/^   10       continue$/;"	l	subroutine:emetal1	file:
10	emm3hb.os	/^   10    continue$/;"	l	subroutine:emm3hb0b	file:
10	emm3hb1.os	/^   10    continue$/;"	l	subroutine:emm3hb1b	file:
10	emm3hb2.os	/^   10 continue$/;"	l	subroutine:emm3hb2	file:
10	emm3hb3.os	/^   10                   format (\/,' Individual van der Waals',$/;"	l	subroutine:emm3hb3a	file:
10	emm3hb3.os	/^   10                   format (\/,' Individual van der Waals',$/;"	l	subroutine:emm3hb3c	file:
10	emm3hb3.os	/^   10       format (\/,' Long Range vdw Correction :',9x,f12.4)$/;"	l	subroutine:emm3hb3	file:
10	emm3hb3.os	/^   10    continue$/;"	l	subroutine:emm3hb3b	file:
10	empole1.os	/^   10       continue$/;"	l	subroutine:empole1a	file:
10	empole1.os	/^   10       continue$/;"	l	subroutine:empole1b	file:
10	empole2.os	/^   10       continue$/;"	l	subroutine:empole2a	file:
10	empole3.os	/^   10                      format (\/,' Individual Multipole and',$/;"	l	subroutine:empole3a	file:
10	empole3.os	/^   10                      format (\/,' Individual Multipole and',$/;"	l	subroutine:empole3b	file:
10	empole3.os	/^   10                   format (\/,' Real Space Multipole and',$/;"	l	subroutine:ereal3c	file:
10	empole3.os	/^   10                   format (\/,' Real Space Multipole and',$/;"	l	subroutine:ereal3d	file:
10	energy.os	/^   10    format (\/,' ENERGY  --  Illegal Value for the Total',$/;"	l	function:energy	file:
10	eopbend3.os	/^   10                format (\/,' Individual Out-of-Plane Bend',$/;"	l	subroutine:eopbend3	file:
10	eopdist3.os	/^   10             format (\/,' Individual Out-of-Plane Distance',$/;"	l	subroutine:eopdist3	file:
10	epitors3.os	/^   10                format (\/,' Individual Pi-Orbital Torsion',$/;"	l	subroutine:epitors3	file:
10	erf.os	/^   10    format (\/,' ERFINV  --  Illegal Argument to Inverse',$/;"	l	function:erfinv	file:
10	erxnfld3.os	/^   10                   format (\/,' Individual Reaction Field',$/;"	l	subroutine:erxnfld3	file:
10	esolv1.os	/^   10       continue$/;"	l	subroutine:ediff1a	file:
10	esolv1.os	/^   10       continue$/;"	l	subroutine:ediff1b	file:
10	esolv2.os	/^   10 continue$/;"	l	subroutine:egb2a	file:
10	esolv2.os	/^   10 continue$/;"	l	subroutine:egb2b	file:
10	esolv3.os	/^   10          format (\/,' Individual Atomic Solvation Energy',$/;"	l	subroutine:esolv3	file:
10	esolv3.os	/^   10    format (\/,' Generalized Kirkwood Self-Energies and',$/;"	l	subroutine:egk3a	file:
10	esolv3.os	/^   10    format (\/,' HCT Implicit Solvation Dispersion :',\/)$/;"	l	subroutine:ewca3	file:
10	esolv3.os	/^   10    format (\/,' Onion Shell Implicit Solvation Dispersion :',\/)$/;"	l	subroutine:ewca3x	file:
10	estrbnd3.os	/^   10                format (\/,' Individual Stretch-Bend',$/;"	l	subroutine:estrbnd3	file:
10	estrtor3.os	/^   10                format (\/,' Individual Stretch-Torsion',$/;"	l	subroutine:estrtor3	file:
10	etors3.os	/^   10                format (\/,' Individual Torsional Angle',$/;"	l	subroutine:etors3a	file:
10	etors3.os	/^   10                format (\/,' Individual Torsional Angle',$/;"	l	subroutine:etors3b	file:
10	etortor3.os	/^   10                format (\/,' Individual Torsion-Torsion',$/;"	l	subroutine:etortor3	file:
10	eurey3.os	/^   10             format (\/,' Individual Urey-Bradley Interactions :',$/;"	l	subroutine:eurey3	file:
10	evcorr.os	/^   10    continue$/;"	l	subroutine:evcorr	file:
10	evcorr.os	/^   10    continue$/;"	l	subroutine:evcorr1	file:
10	fatal.os	/^   10 format (\/,' TINKER is Unable to Continue; Terminating',$/;"	l	subroutine:fatal	file:
10	final.os	/^   10    format (\/,' TINKER is Exiting following Normal Termination',$/;"	l	subroutine:final	file:
10	flatten.os	/^   10    continue$/;"	l	subroutine:flatten	file:
10	freeunit.os	/^   10          format (\/,' FREEUNIT  --  No Available Fortran',$/;"	l	function:freeunit	file:
10	getint.os	/^   10    format (\/,' Enter Internal Coordinate File Name :  ',$)$/;"	l	subroutine:getint	file:
10	getkey.os	/^   10          format (\/,' GETKEY  --  Keyfile Specified',$/;"	l	subroutine:getkey	file:
10	getmol.os	/^   10    format (\/,' Enter a MDL MOL File Name :  ',$)$/;"	l	subroutine:getmol	file:
10	getmol2.os	/^   10    format (\/,' Enter a Sybyl MOL2 File Name :  ',$)$/;"	l	subroutine:getmol2	file:
10	getnumb.os	/^   10 continue$/;"	l	subroutine:getnumb	file:
10	getpdb.os	/^   10    format (\/,' Enter Protein Data Bank File Name :  ',$)$/;"	l	subroutine:getpdb	file:
10	getprm.os	/^   10    format (\/,' Enter Potential Parameter File Name :  ',$)$/;"	l	subroutine:getprm	file:
10	getstring.os	/^   10 continue$/;"	l	subroutine:getstring	file:
10	gettext.os	/^   10 continue$/;"	l	subroutine:gettext	file:
10	getword.os	/^   10 continue$/;"	l	subroutine:getword	file:
10	getxyz.os	/^   10    format (\/,' Enter Cartesian Coordinate File Name :  ',$)$/;"	l	subroutine:getxyz	file:
10	ghmcstep.os	/^   10    format (' GHMC Step Rejected',6x,'Acceptance Ratio',f8.3)$/;"	l	subroutine:ghmcstep	file:
10	gradient.os	/^   10    format (\/,' GRADIENT  --  Illegal Value for the Total',$/;"	l	subroutine:gradient	file:
10	hessian.os	/^   10    format (' HESSIAN  --',i11,' Elements',f9.2,$/;"	l	subroutine:hessian	file:
10	hybrid.os	/^   10          continue$/;"	l	subroutine:himptor	file:
10	hybrid.os	/^   10          format (\/,' Hybrid van der Waals Parameters :',$/;"	l	subroutine:hvdw	file:
10	hybrid.os	/^   10       continue$/;"	l	subroutine:hangle	file:
10	hybrid.os	/^   10       continue$/;"	l	subroutine:hbond	file:
10	hybrid.os	/^   10       continue$/;"	l	subroutine:hdipole	file:
10	hybrid.os	/^   10       continue$/;"	l	subroutine:hstrbnd	file:
10	hybrid.os	/^   10       continue$/;"	l	subroutine:hstrtor	file:
10	hybrid.os	/^   10       continue$/;"	l	subroutine:htors	file:
10	hybrid.os	/^   10    continue$/;"	l	subroutine:hcharge	file:
10	hybrid.os	/^   10    format (\/,' Lambda Coupling Parameter for FEP :',f12.3)$/;"	l	subroutine:hybrid	file:
10	hybrid.os	/^   10 continue$/;"	l	subroutine:hatom	file:
10	impose.os	/^   10 continue$/;"	l	subroutine:impose	file:
10	induce.os	/^   10                format (\/,' Vacuum Induced Dipole Moments',$/;"	l	subroutine:induce	file:
10	induce.os	/^   10             format (\/,' Determination of Induced Dipole',$/;"	l	subroutine:induce0a	file:
10	induce.os	/^   10             format (\/,' Determination of Induced Dipole',$/;"	l	subroutine:induce0d	file:
10	induce.os	/^   10             format (\/,' Determination of Induced Dipole',$/;"	l	subroutine:induce0e	file:
10	inertia.os	/^   10    continue$/;"	l	subroutine:inertia	file:
10	initrot.os	/^   10 continue$/;"	l	function:rotcheck	file:
10	initrot.os	/^   10 continue$/;"	l	subroutine:initrot	file:
10	insert.os	/^   10    format (' INSERT  --  Inserting Atom Number :',i8)$/;"	l	subroutine:insert	file:
10	invbeta.os	/^   10 continue$/;"	l	function:betacf	file:
10	invert.os	/^   10                format (\/,' INVERT  --  Cannot Invert',$/;"	l	subroutine:invert	file:
10	jacobi.os	/^   10 continue$/;"	l	subroutine:jacobi	file:
10	kangang.os	/^   10       continue$/;"	l	subroutine:kangang	file:
10	kangle.os	/^   10       continue$/;"	l	subroutine:kangle	file:
10	kangle.os	/^   10    continue$/;"	l	subroutine:kanglem	file:
10	kangtor.os	/^   10       continue$/;"	l	subroutine:kangtor	file:
10	katom.os	/^   10             format (\/,' Additional Atom Type Parameters :',$/;"	l	subroutine:katom	file:
10	kbond.os	/^   10       continue$/;"	l	subroutine:kbond	file:
10	kbond.os	/^   10       continue$/;"	l	subroutine:kbondm	file:
10	kbond.os	/^   10       continue$/;"	l	subroutine:keneg	file:
10	kcharge.os	/^   10             format (\/,' Additional Atomic Partial Charge',$/;"	l	subroutine:kcharge	file:
10	kcharge.os	/^   10    continue$/;"	l	subroutine:kchargem	file:
10	kdipole.os	/^   10       continue$/;"	l	subroutine:kdipole	file:
10	kewald.os	/^   10       continue$/;"	l	subroutine:kewald	file:
10	kgeom.os	/^   10          continue$/;"	l	subroutine:kgeom	file:
10	kimprop.os	/^   10       continue$/;"	l	subroutine:kimprop	file:
10	kimptor.os	/^   10       continue$/;"	l	subroutine:kimptor	file:
10	kmpole.os	/^   10       continue$/;"	l	subroutine:kmpole	file:
10	kopbend.os	/^   10          continue$/;"	l	subroutine:kopbendm	file:
10	kopbend.os	/^   10       continue$/;"	l	subroutine:kopbend	file:
10	kopdist.os	/^   10       continue$/;"	l	subroutine:kopdist	file:
10	korbit.os	/^   10       continue$/;"	l	subroutine:korbit	file:
10	kpitors.os	/^   10       continue$/;"	l	subroutine:kpitors	file:
10	kpolar.os	/^   10                format (\/,' POLARGRP  --  Too many Atoms',$/;"	l	subroutine:polargrp	file:
10	kpolar.os	/^   10       continue$/;"	l	subroutine:kpolar	file:
10	ksolv.os	/^   10       continue$/;"	l	subroutine:kpb	file:
10	ksolv.os	/^   10       continue$/;"	l	subroutine:ksolv	file:
10	ksolv.os	/^   10    continue$/;"	l	subroutine:kgk	file:
10	ksolv.os	/^   10    continue$/;"	l	subroutine:knp	file:
10	kstrbnd.os	/^   10       continue$/;"	l	subroutine:kstrbnd	file:
10	kstrtor.os	/^   10       continue$/;"	l	subroutine:kstrtor	file:
10	ktors.os	/^   10       continue$/;"	l	subroutine:ktors	file:
10	ktors.os	/^   10    continue$/;"	l	subroutine:ktorsm	file:
10	ktortor.os	/^   10       continue$/;"	l	subroutine:ktortor	file:
10	kumbrella.os	/^   10       continue$/;"	l	subroutine:kumbrella	file:
10	kurey.os	/^   10       continue$/;"	l	subroutine:kurey	file:
10	kvdw.os	/^   10          continue$/;"	l	subroutine:kvdw	file:
10	lbfgs.os	/^   10    continue$/;"	l	subroutine:lbfgs	file:
10	lights.os	/^   10       format (\/,' LIGHTS  --  Number of Replicas is Too',$/;"	l	subroutine:lights	file:
10	makeint.os	/^   10       continue$/;"	l	subroutine:makeint	file:
10	makeint.os	/^   10       format (\/,' ADJACENT  --  Atom',i6,' not Attached',$/;"	l	function:adjacent	file:
10	mdinit.os	/^   10    continue$/;"	l	subroutine:mdinit	file:
10	mdrest.os	/^   10    format (' System Linear Velocity :  ',3d12.2,$/;"	l	subroutine:mdrest	file:
10	mdsave.os	/^   10 format (\/,' Instantaneous Values for Frame Saved at',$/;"	l	subroutine:mdsave	file:
10	mdstat.os	/^   10          format (\/,4x,'MD Step',6x,'E Total',3x,'E Potential',$/;"	l	subroutine:mdstat	file:
10	mechanic.os	/^   10    format (\/,' MECHANIC  --  Some Required Potential Energy',$/;"	l	subroutine:mechanic	file:
10	merge.os	/^   10    format (\/,' MERGE  --  The Maximum of',i8,' Atoms',$/;"	l	subroutine:merge	file:
10	molecule.os	/^   10 continue$/;"	l	subroutine:molecule	file:
10	mutate.os	/^   10       continue$/;"	l	subroutine:mutate	file:
10	nblist.os	/^   10       format (\/,' CBUILD  --  Too many Neighbors;',$/;"	l	subroutine:cbuild	file:
10	nblist.os	/^   10       format (\/,' LIGHTS  --  Truncated Octahedron not',$/;"	l	subroutine:lightn	file:
10	nblist.os	/^   10       format (\/,' MBUILD  --  Too many Neighbors;',$/;"	l	subroutine:mbuild	file:
10	nblist.os	/^   10       format (\/,' UBUILD  --  Too many Neighbors;',$/;"	l	subroutine:ubuild	file:
10	nblist.os	/^   10       format (\/,' VBUILD  --  Too many Neighbors;',$/;"	l	subroutine:vbuild	file:
10	nblist.os	/^   10    continue$/;"	l	subroutine:clight	file:
10	nblist.os	/^   10    continue$/;"	l	subroutine:mlight	file:
10	nblist.os	/^   10    continue$/;"	l	subroutine:ulight	file:
10	nblist.os	/^   10    continue$/;"	l	subroutine:vlight	file:
10	nblist.os	/^   10    format (\/,' CLIST  --  Pairwise Neighbor List cannot',$/;"	l	subroutine:clist	file:
10	nblist.os	/^   10    format (\/,' MLIST  --  Pairwise Neighbor List cannot',$/;"	l	subroutine:mlist	file:
10	nblist.os	/^   10    format (\/,' ULIST  --  Pairwise Neighbor List cannot',$/;"	l	subroutine:ulist	file:
10	nblist.os	/^   10    format (\/,' VLIST  --  Pairwise Neighbor List cannot',$/;"	l	subroutine:vlist	file:
10	nextarg.os	/^   10    continue$/;"	l	subroutine:nextarg	file:
10	nexttext.os	/^   10 continue$/;"	l	function:nexttext	file:
10	number.os	/^   10    format (' NUMBER  --  Input Text String is Too Long')$/;"	l	function:number	file:
10	ocvm.os	/^   10    continue$/;"	l	subroutine:ocvm	file:
10	optsave.os	/^   10    format (\/,' OPTSAVE  --  Optimization Calculation Ending',$/;"	l	subroutine:optsave	file:
10	orbital.os	/^   10       continue$/;"	l	subroutine:orbital	file:
10	orbital.os	/^   10       format(\/,' PIPLANE  --  Failure to Define',$/;"	l	subroutine:piplane	file:
10	orient.os	/^   10       continue$/;"	l	subroutine:xyzrigid	file:
10	picalc.os	/^   10                continue$/;"	l	subroutine:picalc	file:
10	picalc.os	/^   10       format (' PISCF  --  The SCF Molecular Orbitals have',$/;"	l	subroutine:piscf	file:
10	picalc.os	/^   10    format (\/,' Altered Bond Stretching Parameters',$/;"	l	subroutine:pialter	file:
10	pmestuff.os	/^   10    continue$/;"	l	subroutine:table_fill	file:
10	pmpb.os	/^   10 format (\/,' APBSINITIAL  --  APBS Not Supported by This',$/;"	l	subroutine:apbsinitial	file:
10	polymer.os	/^   10       continue$/;"	l	subroutine:polymer	file:
10	pressure.os	/^   10 format (\/,' dE\/dV (Virial-based) :',11x,f15.6,' Kcal\/mole\/A**3')$/;"	l	subroutine:ptest	file:
10	prmkey.os	/^   10 continue$/;"	l	subroutine:prmkey	file:
10	promo.os	/^   10 format (\/,5x,70('#'),$/;"	l	subroutine:promo	file:
10	prtmol2.os	/^   10 format ('@<TRIPOS>MOLECULE')$/;"	l	subroutine:prtmol2	file:
10	prtprm.os	/^   10    format (\/\/,15x,'TINKER Force Field Parameters for ',a20)$/;"	l	subroutine:prtprm	file:
10	random.os	/^   10       continue$/;"	l	function:random	file:
10	random.os	/^   10    continue$/;"	l	function:normal	file:
10	rattle.os	/^   10    format (\/,' RATTLE  --  Warning, Distance Constraints',$/;"	l	subroutine:rattle	file:
10	rattle.os	/^   10    format (\/,' RATTLE2  --  Warning, Velocity Constraints',$/;"	l	subroutine:rattle2	file:
10	readdyn.os	/^   10       format (\/,' READDYN  --  Unable to Find the Dynamics',$/;"	l	subroutine:readdyn	file:
10	readgau.os	/^   10    format (\/,' Enter the Name of the Gaussian Output File :  ',$)$/;"	l	subroutine:readgau	file:
10	readgau.os	/^   10 continue$/;"	l	subroutine:readgarc	file:
10	readint.os	/^   10       format (\/,' READINT  --  Unable to Find the Internal',$/;"	l	subroutine:readint	file:
10	readmol.os	/^   10       format (\/,' READMOL  --  Unable to Find the Specified',$/;"	l	subroutine:readmol	file:
10	readmol2.os	/^   10       format (\/,' READMOL2  --  Unable to Find the TRIPOS',$/;"	l	subroutine:readmol2	file:
10	readnc.f90	/^            10     format (\/, ' Enter NetCDF Coordinate File Name :  ', $)$/;"	l	subroutine:getnetcdf	file:
10	readpdb.os	/^   10       format (\/,' READPDB  --  Unable to Find the Protein',$/;"	l	subroutine:readpdb	file:
10	readpdb.os	/^   10    format (a120)$/;"	l	subroutine:scanpdb	file:
10	readprm.os	/^   10          format ()$/;"	l	subroutine:readprm	file:
10	readseq.os	/^   10       format (\/,' READSEQ  --  Unable to Find the Biopolymer',$/;"	l	subroutine:readseq	file:
10	readtrr.f90	/^            10     format (\/, ' Enter Trr Coordinate File Name :  ', $)$/;"	l	subroutine:gettrr	file:
10	readxyz.os	/^   10       format (\/,' READXYZ  --  Unable to Find the Cartesian',$/;"	l	subroutine:readxyz	file:
10	replica.os	/^   10    format (\/,' REPLICA  --  Truncated Octahedron',$/;"	l	subroutine:replica	file:
10	rgdstep.os	/^   10          format (\/,' RGDSTEP  --  Angular Momentum Convergence',$/;"	l	subroutine:rgdstep	file:
10	rings.os	/^   10                format (\/,' RINGS  --  Too many 3-Membered Rings;',$/;"	l	subroutine:rings	file:
10	rotlist.os	/^   10          format (\/,' ROTLIST  --  Maximum Valence Exceeded;',$/;"	l	subroutine:rotlist	file:
10	search.os	/^   10 continue$/;"	l	subroutine:search	file:
10	shakeup.os	/^   10    continue$/;"	l	subroutine:shakeup	file:
10	sktstuff.os	/^   10       format (\/,' SKTINIT  --  Unable to Start Server for',$/;"	l	subroutine:sktinit	file:
10	square.os	/^   10    continue$/;"	l	subroutine:square	file:
10	surface.os	/^   10    continue$/;"	l	subroutine:surface	file:
10	surface.os	/^   10    continue$/;"	l	subroutine:surface1	file:
10	surfatom.os	/^   10 continue$/;"	l	subroutine:surfatom	file:
10	surfatom.os	/^   10 continue$/;"	l	subroutine:surfatom1	file:
10	tncg.os	/^   10    continue$/;"	l	subroutine:precond	file:
10	tncg.os	/^   10    continue$/;"	l	subroutine:tncg	file:
10	tncg.os	/^   10 continue$/;"	l	subroutine:tnsolve	file:
10	torphase.os	/^   10 continue$/;"	l	subroutine:torphase	file:
10	torque.os	/^   10    continue$/;"	l	subroutine:torque2	file:
10	torsions.os	/^   10                   format (\/,' TORSIONS  --  Too many Torsional',$/;"	l	subroutine:torsions	file:
10	trimtext.os	/^   10 continue$/;"	l	function:trimtext	file:
10	trimtext.os	/^   10 continue$/;"	l	subroutine:justify	file:
10	unitcell.os	/^   10    continue$/;"	l	subroutine:unitcell	file:
10	version.os	/^   10          format (\/,' Enter File Name for Coordinate Output :  ',$)$/;"	l	subroutine:version	file:
10	volume.os	/^   10             format (\/,' VOLUME2  --  Increase',$/;"	l	subroutine:volume2	file:
10	volume.os	/^   10    format (\/,' VOLUME1  --  Increase the Value of MAXCUBE')$/;"	l	subroutine:volume1	file:
10	xyzatm.os	/^   10       format (\/,' XYZATM  --  Warning, Undefined Dihedral',$/;"	l	subroutine:xyzatm	file:
10	zatom.os	/^   10       continue$/;"	l	subroutine:zatom	file:
100	connolly.os	/^  100          continue$/;"	l	subroutine:contact	file:
100	connolly.os	/^  100          continue$/;"	l	subroutine:place	file:
100	connolly.os	/^  100       continue$/;"	l	subroutine:vam	file:
100	egeom3.os	/^  100                format (\/,' Individual Torsional Angle Restraint$/;"	l	subroutine:egeom3	file:
100	embed.os	/^  100       format (\/,' Distance Matrix Generated via Randomized',$/;"	l	subroutine:dstmat	file:
100	induce.os	/^  100                   format (\/,4x,'Atom',14x,'X',15x,'Y',15x,'Z',$/;"	l	subroutine:induce	file:
100	initrot.os	/^  100       format (a120)$/;"	l	subroutine:initrot	file:
100	kangle.os	/^  100                format (4x,3i4,2x,2f12.3,3x,a6,3x,'2-H''s')$/;"	l	subroutine:kangle	file:
100	katom.os	/^  100          format (\/,' Atoms with an Unusual Number of Attached',$/;"	l	subroutine:katom	file:
100	kbond.os	/^  100          continue$/;"	l	subroutine:kbond	file:
100	kdipole.os	/^  100    continue$/;"	l	subroutine:kdipole	file:
100	kgeom.os	/^  100       continue$/;"	l	subroutine:kgeom	file:
100	kmpole.os	/^  100       continue$/;"	l	subroutine:kmpole	file:
100	korbit.os	/^  100          continue$/;"	l	subroutine:korbit	file:
100	kpolar.os	/^  100       format (\/,' POLARGRP  --  Too many Atoms',$/;"	l	subroutine:polargrp	file:
100	ksolv.os	/^  100       continue$/;"	l	subroutine:kpb	file:
100	kstrtor.os	/^  100       continue$/;"	l	subroutine:kstrtor	file:
100	ktors.os	/^  100          continue$/;"	l	subroutine:ktors	file:
100	kvdw.os	/^  100          format (\/,' KVDW  --  Only Atom Classes through',i4,$/;"	l	subroutine:kvdw	file:
100	lbfgs.os	/^  100       format (\/,' LBFGS  --  Normal Termination due to ',a9)$/;"	l	subroutine:lbfgs	file:
100	makeint.os	/^  100                format (\/,' MAKEINT  --  Connectivity Error',$/;"	l	subroutine:makeint	file:
100	makeint.os	/^  100       format (' Choose a Connected Atom (',6i6,') :  ',$)$/;"	l	function:adjacent	file:
100	mdsave.os	/^  100    format (' Current Kinetic',5x,f15.4,' Kcal\/mole')$/;"	l	subroutine:mdsave	file:
100	mdstat.os	/^  100       format (' Total Energy',8x,f17.6,' Kcal\/mole',3x,$/;"	l	subroutine:mdstat	file:
100	ocvm.os	/^  100             format (\/,' OCVM  --  Incomplete Convergence',$/;"	l	subroutine:ocvm	file:
100	picalc.os	/^  100       format (\/,' Fock Matrix')$/;"	l	subroutine:piscf	file:
100	prtmol2.os	/^  100    format (4i8)$/;"	l	subroutine:prtmol2	file:
100	prtprm.os	/^  100       format (\/\/,15x,'Van der Waals Parameters for 1-4',$/;"	l	subroutine:prtprm	file:
100	readdyn.os	/^  100    format ()$/;"	l	subroutine:readdyn	file:
100	readgau.os	/^  100          format (a120)$/;"	l	subroutine:readgau	file:
100	readint.os	/^  100    format (a120)$/;"	l	subroutine:readint	file:
100	readmol2.os	/^  100 continue$/;"	l	subroutine:readmol2	file:
100	readnc.f90	/^        100       do while (.not. exist)$/;"	l	subroutine:getnetcdf	file:
100	readpdb.os	/^  100       continue$/;"	l	subroutine:readpdb	file:
100	readpdb.os	/^  100       format (a120)$/;"	l	subroutine:scanpdb	file:
100	readprm.os	/^  100       continue$/;"	l	subroutine:readprm	file:
100	readtrr.f90	/^        100       do while (.not. exist)$/;"	l	subroutine:gettrr	file:
100	readxyz.os	/^  100    continue$/;"	l	subroutine:readxyz	file:
100	rings.os	/^  100          format (9x,i5,10x,3i6)$/;"	l	subroutine:rings	file:
100	square.os	/^  100    format (\/,' SQUARE  --  Maximum Number of Allowed Iterations')$/;"	l	subroutine:square	file:
100	surface.os	/^  100       continue$/;"	l	subroutine:surface	file:
100	surface.os	/^  100       continue$/;"	l	subroutine:surface1	file:
100	surfatom.os	/^  100    continue$/;"	l	subroutine:surfatom	file:
100	surfatom.os	/^  100    continue$/;"	l	subroutine:surfatom1	file:
100	tncg.os	/^  100       format (\/,' TNCG  --  Normal Termination due to SmallGrad')$/;"	l	subroutine:tncg	file:
1000	prtprm.os	/^ 1000    format (a1,\/\/,15x,'TINKER Force Field Parameters for ',a20)$/;"	l	subroutine:prtprm	file:
1010	prtprm.os	/^ 1010    format (\/\/,15x,'Stretch-Torsion Parameters',$/;"	l	subroutine:prtprm	file:
1020	prtprm.os	/^ 1020       format (2x,i5,2x,i4,'-',i4,'-',i4,'-',i4,9x,'1st',3f12.3,$/;"	l	subroutine:prtprm	file:
1030	prtprm.os	/^ 1030    continue$/;"	l	subroutine:prtprm	file:
1040	prtprm.os	/^ 1040    format (a1,\/\/,15x,'TINKER Force Field Parameters for ',a20)$/;"	l	subroutine:prtprm	file:
1050	prtprm.os	/^ 1050    format (\/\/,15x,'Angle-Torsion Parameters',$/;"	l	subroutine:prtprm	file:
1060	prtprm.os	/^ 1060       format (2x,i5,2x,i4,'-',i4,'-',i4,'-',i4,9x,'1st',3f12.3$/;"	l	subroutine:prtprm	file:
1070	prtprm.os	/^ 1070    continue$/;"	l	subroutine:prtprm	file:
1080	prtprm.os	/^ 1080    format (a1,\/\/,15x,'TINKER Force Field Parameters for ',a20)$/;"	l	subroutine:prtprm	file:
1090	prtprm.os	/^ 1090    format (\/\/,15x,'Torsion-Torsion Parameters',$/;"	l	subroutine:prtprm	file:
110	connolly.os	/^  110                continue$/;"	l	subroutine:vam	file:
110	connolly.os	/^  110          continue$/;"	l	subroutine:place	file:
110	connolly.os	/^  110       continue$/;"	l	subroutine:contact	file:
110	egeom3.os	/^  110             format (' Torsion',4x,4i6,4x,2f8.2,f10.4,f12.4)$/;"	l	subroutine:egeom3	file:
110	embed.os	/^  110    format (\/,' Trial Distances Selected at Random from',$/;"	l	subroutine:dstmat	file:
110	induce.os	/^  110                   format (\/,4x,'Atom',14x,'X',13x,'Y',13x,'Z',$/;"	l	subroutine:induce	file:
110	initrot.os	/^  110    continue$/;"	l	subroutine:initrot	file:
110	kangle.os	/^  110          format (\/,' KANGLE  --  Too many Bond Angle',$/;"	l	subroutine:kangle	file:
110	katom.os	/^  110       format (' Valence',7x,i5,'-',a3,8x,i5,10x,i5,5x,i5)$/;"	l	subroutine:katom	file:
110	kbond.os	/^  110          format (\/,' KBOND  --  Too many 3-Ring Stretching',$/;"	l	subroutine:kbond	file:
110	kdipole.os	/^  110       continue$/;"	l	subroutine:kdipole	file:
110	kgeom.os	/^  110       continue$/;"	l	subroutine:kgeom	file:
110	kmpole.os	/^  110             format (\/,' Additional Atomic Multipole Parameters :',$/;"	l	subroutine:kmpole	file:
110	korbit.os	/^  110          format (\/,' KORBIT  --  Too many 5-Ring Pisystem Bond',$/;"	l	subroutine:korbit	file:
110	kpolar.os	/^  110 continue$/;"	l	subroutine:polargrp	file:
110	ksolv.os	/^  110       continue$/;"	l	subroutine:kpb	file:
110	ktors.os	/^  110    continue$/;"	l	subroutine:ktors	file:
110	kvdw.os	/^  110             format (\/,' Additional van der Waals Parameters',$/;"	l	subroutine:kvdw	file:
110	lbfgs.os	/^  110       format (\/,' LBFGS  --  Incomplete Convergence due to ',a9)$/;"	l	subroutine:lbfgs	file:
110	makeint.os	/^  110       format (' Choose a Connected Atom (',7i6,') :  ',$)$/;"	l	function:adjacent	file:
110	mdsave.os	/^  110       format (' Lattice Lengths',6x,3f14.6)$/;"	l	subroutine:mdsave	file:
110	mdstat.os	/^  110       format (' Total Energy',8x,f15.4,' Kcal\/mole',3x,$/;"	l	subroutine:mdstat	file:
110	ocvm.os	/^  110             format (\/,' OCVM  --  Normal Termination',$/;"	l	subroutine:ocvm	file:
110	picalc.os	/^  110          format (8f9.4)$/;"	l	subroutine:piscf	file:
110	prtmol2.os	/^  110 format (\/,'@<TRIPOS>SUBSTRUCTURE')$/;"	l	subroutine:prtmol2	file:
110	prtprm.os	/^  110          format (10x,i5,5x,i4,2x,2f12.3)$/;"	l	subroutine:prtprm	file:
110	readdyn.os	/^  110       format (a120)$/;"	l	subroutine:readdyn	file:
110	readgau.os	/^  110       continue$/;"	l	subroutine:readgau	file:
110	readint.os	/^  110 continue$/;"	l	subroutine:readint	file:
110	readmol2.os	/^  110    format (a120)$/;"	l	subroutine:readmol2	file:
110	readpdb.os	/^  110             format (\/,' READPDB  --  The Maximum of',i6,$/;"	l	subroutine:readpdb	file:
110	readpdb.os	/^  110       format (\/,' Enter the Insert Records to Include',$/;"	l	subroutine:scanpdb	file:
110	readprm.os	/^  110       continue$/;"	l	subroutine:readprm	file:
110	readxyz.os	/^  110    format (\/,' READXYZ  --  Atom Labels not Sequential,',$/;"	l	subroutine:readxyz	file:
110	rings.os	/^  110       format (\/,' Four-Membered Rings in the Structure :',$/;"	l	subroutine:rings	file:
110	square.os	/^  110    format (\/,' SQUARE  --  Relative Function Convergence',$/;"	l	subroutine:square	file:
110	surface.os	/^  110       continue$/;"	l	subroutine:surface	file:
110	surface.os	/^  110       continue$/;"	l	subroutine:surface1	file:
110	surfatom.os	/^  110    continue$/;"	l	subroutine:surfatom	file:
110	surfatom.os	/^  110    continue$/;"	l	subroutine:surfatom1	file:
110	tncg.os	/^  110       format (\/,' TNCG  --  Normal Termination due to SmallFct')$/;"	l	subroutine:tncg	file:
1100	prtprm.os	/^ 1100       format (\/,2x,i5,2x,i4,'-',i4,'-',i4,'-',i4,'-',i4,2x,2i12,\/)$/;"	l	subroutine:prtprm	file:
111	readprm.os	/^  111       continue$/;"	l	subroutine:readprm	file:
1110	prtprm.os	/^ 1110       format (3x,6f12.4)$/;"	l	subroutine:prtprm	file:
1120	prtprm.os	/^ 1120    continue$/;"	l	subroutine:prtprm	file:
1130	prtprm.os	/^ 1130    format (a1,\/\/,15x,'TINKER Force Field Parameters for ',a20)$/;"	l	subroutine:prtprm	file:
1140	prtprm.os	/^ 1140    format (\/\/,15x,'Atomic Partial Charge Parameters',$/;"	l	subroutine:prtprm	file:
1150	prtprm.os	/^ 1150          format (12x,i5,7x,i3,6x,f12.3)$/;"	l	subroutine:prtprm	file:
1160	prtprm.os	/^ 1160    format (\/\/,15x,'Atomic Partial Charge Scaling Factors',$/;"	l	subroutine:prtprm	file:
1170	prtprm.os	/^ 1170    format (a1,\/\/,15x,'TINKER Force Field Parameters for ',a20)$/;"	l	subroutine:prtprm	file:
1180	prtprm.os	/^ 1180    format (\/\/,15x,'Bond Dipole Moment Parameters',$/;"	l	subroutine:prtprm	file:
1190	prtprm.os	/^ 1190       format (12x,i5,5x,i4,'-',i4,6x,2f12.3)$/;"	l	subroutine:prtprm	file:
120	connolly.os	/^  120       continue$/;"	l	subroutine:place	file:
120	connolly.os	/^  120       continue$/;"	l	subroutine:vam	file:
120	connolly.os	/^  120    continue$/;"	l	subroutine:contact	file:
120	egeom3.os	/^  120          format (\/,' Individual Intergroup Distance',$/;"	l	subroutine:egeom3	file:
120	embed.os	/^  120    format (\/,' Trial Distance Beta Distribution :',$/;"	l	subroutine:dstmat	file:
120	induce.os	/^  120                   format (\/,4x,'Atom',14x,'X',11x,'Y',11x,'Z',$/;"	l	subroutine:induce	file:
120	initrot.os	/^  120          continue$/;"	l	subroutine:initrot	file:
120	kangle.os	/^  120          format (\/,' KANGLE  --  Too many 5-Ring Angle',$/;"	l	subroutine:kangle	file:
120	kbond.os	/^  120          continue$/;"	l	subroutine:kbond	file:
120	kdipole.os	/^  120             format (\/,' Additional Bond Dipoles for',$/;"	l	subroutine:kdipole	file:
120	kgeom.os	/^  120          format (\/,' KGEOM  --  Too many Torsion Restraints;',$/;"	l	subroutine:kgeom	file:
120	kmpole.os	/^  120             format (\/,4x,i6,5x,i6,1x,i6,1x,i6,3x,a8,2x,f9.5,$/;"	l	subroutine:kmpole	file:
120	korbit.os	/^  120          continue$/;"	l	subroutine:korbit	file:
120	ksolv.os	/^  120       continue$/;"	l	subroutine:kpb	file:
120	ktors.os	/^  120          format (\/,' Undefined Torsional Parameters :',$/;"	l	subroutine:ktors	file:
120	kvdw.os	/^  120             format (\/,' Additional van der Waals Parameters',$/;"	l	subroutine:kvdw	file:
120	makeint.os	/^  120       format (' Choose a Connected Atom (',8i6,') :  ',$)$/;"	l	function:adjacent	file:
120	mdsave.os	/^  120       format (' Lattice Angles',7x,3f14.6)$/;"	l	subroutine:mdsave	file:
120	mdstat.os	/^  120       format (' Potential Energy',4x,f19.8,' Kcal\/mole',3x,$/;"	l	subroutine:mdstat	file:
120	ocvm.os	/^  120    continue$/;"	l	subroutine:ocvm	file:
120	picalc.os	/^  120       format (\/,' Density Matrix')$/;"	l	subroutine:piscf	file:
120	prtmol2.os	/^  120 format (i8,12x,a4,i8)$/;"	l	subroutine:prtmol2	file:
120	prtprm.os	/^  120       format (\/\/,15x,'Van der Waals Parameters for Atom Pairs',$/;"	l	subroutine:prtprm	file:
120	readdyn.os	/^  120    format ()$/;"	l	subroutine:readdyn	file:
120	readgau.os	/^  120       format (a120)$/;"	l	subroutine:readgau	file:
120	readint.os	/^  120    format (a120)$/;"	l	subroutine:readint	file:
120	readmol2.os	/^  120          format (a120)$/;"	l	subroutine:readmol2	file:
120	readpdb.os	/^  120       continue$/;"	l	subroutine:readpdb	file:
120	readpdb.os	/^  120       format (a20)$/;"	l	subroutine:scanpdb	file:
120	readprm.os	/^  120       continue$/;"	l	subroutine:readprm	file:
120	readxyz.os	/^  120       format (\/,' READXYZ  --  Check Connection of Atom',$/;"	l	subroutine:readxyz	file:
120	rings.os	/^  120          format (9x,i5,10x,4i6)$/;"	l	subroutine:rings	file:
120	square.os	/^  120    format (\/,' SQUARE  --  Possible False Convergence',$/;"	l	subroutine:square	file:
120	surface.os	/^  120          continue$/;"	l	subroutine:surface	file:
120	surface.os	/^  120          continue$/;"	l	subroutine:surface1	file:
120	surfatom.os	/^  120       continue$/;"	l	subroutine:surfatom	file:
120	surfatom.os	/^  120       continue$/;"	l	subroutine:surfatom1	file:
120	tncg.os	/^  120       format (\/,' TNCG  --  Incomplete Convergence',$/;"	l	subroutine:tncg	file:
1200	prtprm.os	/^ 1200    continue$/;"	l	subroutine:prtprm	file:
1210	prtprm.os	/^ 1210    format (\/\/,15x,'5-Membered Ring Bond Dipole Parameters',$/;"	l	subroutine:prtprm	file:
1220	prtprm.os	/^ 1220       format (12x,i5,5x,i4,'-',i4,6x,2f12.3)$/;"	l	subroutine:prtprm	file:
1230	prtprm.os	/^ 1230    continue$/;"	l	subroutine:prtprm	file:
1240	prtprm.os	/^ 1240    format (\/\/,15x,'4-Membered Ring Bond Dipole Parameters',$/;"	l	subroutine:prtprm	file:
1250	prtprm.os	/^ 1250       format (12x,i5,5x,i4,'-',i4,6x,2f12.3)$/;"	l	subroutine:prtprm	file:
1260	prtprm.os	/^ 1260    continue$/;"	l	subroutine:prtprm	file:
1270	prtprm.os	/^ 1270    format (\/\/,15x,'3-Membered Ring Bond Dipole Parameters',$/;"	l	subroutine:prtprm	file:
1280	prtprm.os	/^ 1280       format (12x,i5,5x,i4,'-',i4,6x,2f12.3)$/;"	l	subroutine:prtprm	file:
1290	prtprm.os	/^ 1290    continue$/;"	l	subroutine:prtprm	file:
130	connolly.os	/^  130    continue$/;"	l	subroutine:contact	file:
130	connolly.os	/^  130    continue$/;"	l	subroutine:place	file:
130	connolly.os	/^  130    continue$/;"	l	subroutine:vam	file:
130	egeom3.os	/^  130       format (' Distance',7x,2i7,10x,2f8.2,f10.4,f12.4)$/;"	l	subroutine:egeom3	file:
130	embed.os	/^  130       format (\/,' Average Bound Gap after Partial Metrization :',$/;"	l	subroutine:dstmat	file:
130	induce.os	/^  130                format (i8,3x,4f16.8)$/;"	l	subroutine:induce	file:
130	initrot.os	/^  130                   format (\/,' INITROT  --  Rotation about',2i6,$/;"	l	subroutine:initrot	file:
130	kangle.os	/^  130          format (\/,' KANGLE  --  Too many 4-Ring Angle',$/;"	l	subroutine:kangle	file:
130	kbond.os	/^  130    continue$/;"	l	subroutine:kbond	file:
130	kdipole.os	/^  130                   format (4x,i5,' -',i5,2x,2f12.3)$/;"	l	subroutine:kdipole	file:
130	kgeom.os	/^  130       continue$/;"	l	subroutine:kgeom	file:
130	kmpole.os	/^  130       continue$/;"	l	subroutine:kmpole	file:
130	korbit.os	/^  130          format (\/,' KORBIT  --  Too many 4-Ring Pisystem Bond',$/;"	l	subroutine:korbit	file:
130	ksolv.os	/^  130       continue$/;"	l	subroutine:kpb	file:
130	ktors.os	/^  130       format (1x,a7,4x,4(i6,'-',a3),5x,4i5)$/;"	l	subroutine:ktors	file:
130	kvdw.os	/^  130          format (6x,2i4,4x,2f12.4)$/;"	l	subroutine:kvdw	file:
130	makeint.os	/^  130    format (i10)$/;"	l	function:adjacent	file:
130	mdsave.os	/^  130       format (' Lattice Lengths',6x,3f16.8)$/;"	l	subroutine:mdsave	file:
130	mdstat.os	/^  130       format (' Potential Energy',4x,f17.6,' Kcal\/mole',3x,$/;"	l	subroutine:mdstat	file:
130	ocvm.os	/^  130                format (i6,f14.4,f12.4,f11.4,f10.4,f11.4,i9)$/;"	l	subroutine:ocvm	file:
130	picalc.os	/^  130          format (8f9.4)$/;"	l	subroutine:piscf	file:
130	prtprm.os	/^  130       format (\/\/,15x,'Van der Waals Parameters for Atom Pairs',$/;"	l	subroutine:prtprm	file:
130	readdyn.os	/^  130       format (a120)$/;"	l	subroutine:readdyn	file:
130	readgau.os	/^  130       format (a120)$/;"	l	subroutine:readgau	file:
130	readint.os	/^  130 continue$/;"	l	subroutine:readint	file:
130	readmol2.os	/^  130 continue$/;"	l	subroutine:readmol2	file:
130	readpdb.os	/^  130       format (a4)$/;"	l	subroutine:readpdb	file:
130	readprm.os	/^  130       continue$/;"	l	subroutine:readprm	file:
130	readxyz.os	/^  130       continue$/;"	l	subroutine:readxyz	file:
130	rings.os	/^  130       format (\/,' Five-Membered Rings in the Structure :',$/;"	l	subroutine:rings	file:
130	square.os	/^  130       format (\/,' SQUARE  --  Five Consecutive Maximum',$/;"	l	subroutine:square	file:
130	surface.os	/^  130          continue$/;"	l	subroutine:surface	file:
130	surface.os	/^  130          continue$/;"	l	subroutine:surface1	file:
130	surfatom.os	/^  130       continue$/;"	l	subroutine:surfatom	file:
130	surfatom.os	/^  130       continue$/;"	l	subroutine:surfatom1	file:
130	tncg.os	/^  130             format (i6,f13.4,f12.4,f11.4,f10.4,i8,3x,a9,i7)$/;"	l	subroutine:tncg	file:
1300	prtprm.os	/^ 1300    format (a1,\/\/,15x,'TINKER Force Field Parameters for ',a20)$/;"	l	subroutine:prtprm	file:
1310	prtprm.os	/^ 1310    format (\/\/,17x,'Atomic Multipole Parameters',$/;"	l	subroutine:prtprm	file:
1320	prtprm.os	/^ 1320       format (2x,i5,3x,i4,3x,i4,2x,i4,2x,i4,5x,a8,2x,f10.5,$/;"	l	subroutine:prtprm	file:
1330	prtprm.os	/^ 1330    continue$/;"	l	subroutine:prtprm	file:
1340	prtprm.os	/^ 1340    format (\/\/,15x,'Atomic Multipole Scaling Factors',$/;"	l	subroutine:prtprm	file:
1350	prtprm.os	/^ 1350    format (a1,\/\/,15x,'TINKER Force Field Parameters for ',a20)$/;"	l	subroutine:prtprm	file:
1360	prtprm.os	/^ 1360    format (\/\/,15x,'Dipole Polarizability Parameters',$/;"	l	subroutine:prtprm	file:
1370	prtprm.os	/^ 1370             format (10x,i5,7x,i4,3x,2f10.3)$/;"	l	subroutine:prtprm	file:
1380	prtprm.os	/^ 1380             format (10x,i5,7x,i4,3x,2f10.3,4x,6i5)$/;"	l	subroutine:prtprm	file:
1390	prtprm.os	/^ 1390    format (\/\/,15x,'Direct Induction Scaling Factors',$/;"	l	subroutine:prtprm	file:
140	connolly.os	/^  140 continue$/;"	l	subroutine:vam	file:
140	egeom3.os	/^  140             format (\/,' Individual Chirality Restraint Terms :'$/;"	l	subroutine:egeom3	file:
140	embed.os	/^  140       continue$/;"	l	subroutine:dstmat	file:
140	induce.os	/^  140                format (i8,4x,4f14.6)$/;"	l	subroutine:induce	file:
140	initrot.os	/^  140       format (\/,' List of Active Atoms for Torsional',$/;"	l	subroutine:initrot	file:
140	kangle.os	/^  140          format (\/,' KANGLE  --  Too many 3-Ring Angle',$/;"	l	subroutine:kangle	file:
140	kbond.os	/^  140          format (\/,' Undefined Bond Stretching Parameters :',$/;"	l	subroutine:kbond	file:
140	kdipole.os	/^  140       continue$/;"	l	subroutine:kdipole	file:
140	kgeom.os	/^  140       continue$/;"	l	subroutine:kgeom	file:
140	kmpole.os	/^  140    continue$/;"	l	subroutine:kmpole	file:
140	korbit.os	/^  140          continue$/;"	l	subroutine:korbit	file:
140	ksolv.os	/^  140       continue$/;"	l	subroutine:kpb	file:
140	kvdw.os	/^  140       format (\/,' KVDW  --  Too many Special VDW Pair',$/;"	l	subroutine:kvdw	file:
140	makeint.os	/^  140       continue$/;"	l	function:adjacent	file:
140	mdsave.os	/^  140       format (' Lattice Angles',7x,3f16.8)$/;"	l	subroutine:mdsave	file:
140	mdstat.os	/^  140       format (' Potential Energy',4x,f15.4,' Kcal\/mole',3x,$/;"	l	subroutine:mdstat	file:
140	ocvm.os	/^  140                format (i6,d14.4,d12.4,f11.4,f10.4,f11.4,i9)$/;"	l	subroutine:ocvm	file:
140	picalc.os	/^  140       format (\/,' H-Core Matrix')$/;"	l	subroutine:piscf	file:
140	prtprm.os	/^  140       format (10x,i5,5x,i4,'-',i4,2x,2f12.3)$/;"	l	subroutine:prtprm	file:
140	readdyn.os	/^  140    format ()$/;"	l	subroutine:readdyn	file:
140	readgau.os	/^  140          format (a120)$/;"	l	subroutine:readgau	file:
140	readpdb.os	/^  140       format (a1)$/;"	l	subroutine:readpdb	file:
140	readprm.os	/^  140       continue$/;"	l	subroutine:readprm	file:
140	rings.os	/^  140          format (9x,i5,10x,5i6)$/;"	l	subroutine:rings	file:
140	surface.os	/^  140       format (\/,' SURFACE  --  Connectivity Error at Atom',i6)$/;"	l	subroutine:surface	file:
140	surface.os	/^  140       format (\/,' SURFACE1  --  Connectivity Error at Atom',i6)$/;"	l	subroutine:surface1	file:
140	surfatom.os	/^  140    format (\/,' SURFATOM  --  Connectivity Error at Atom',i6)$/;"	l	subroutine:surfatom	file:
140	surfatom.os	/^  140    format (\/,' SURFATOM  --  Connectivity Error at Atom',i6)$/;"	l	subroutine:surfatom1	file:
140	tncg.os	/^  140             format (i6,d13.4,d12.4,d11.4,f10.4,i8,3x,a9,i7)$/;"	l	subroutine:tncg	file:
1400	prtprm.os	/^ 1400    format (\/\/,15x,'Mutual Induction Scaling Factors',$/;"	l	subroutine:prtprm	file:
1410	prtprm.os	/^ 1410    format (\/\/,15x,'Polarizability Energy Scaling Factors',$/;"	l	subroutine:prtprm	file:
1420	prtprm.os	/^ 1420    format (a1,\/\/,15x,'TINKER Force Field Parameters for ',a20)$/;"	l	subroutine:prtprm	file:
1430	prtprm.os	/^ 1430    format (\/\/,15x,'Conjugated Pisystem Atom Parameters',$/;"	l	subroutine:prtprm	file:
1440	prtprm.os	/^ 1440          format (8x,i5,7x,i4,f10.1,2x,2f12.3)$/;"	l	subroutine:prtprm	file:
1450	prtprm.os	/^ 1450    format (\/\/,15x,'Conjugated Pisystem Bond Parameters',$/;"	l	subroutine:prtprm	file:
1460	prtprm.os	/^ 1460       format (8x,i5,5x,i4,'-',i4,3x,f12.3,f12.3)$/;"	l	subroutine:prtprm	file:
1470	prtprm.os	/^ 1470    continue$/;"	l	subroutine:prtprm	file:
1480	prtprm.os	/^ 1480    format (\/\/,15x,'5-Membered Ring Pisystem Bond Parameters',$/;"	l	subroutine:prtprm	file:
1490	prtprm.os	/^ 1490       format (8x,i5,5x,i4,'-',i4,3x,f12.3,f12.3)$/;"	l	subroutine:prtprm	file:
150	connolly.os	/^  150    format (\/,' Convex Surface Area for Individual Atoms :',\/)$/;"	l	subroutine:vam	file:
150	egeom3.os	/^  150          format (' Chiral',5x,4i6,4x,2f8.2,f10.4,f12.4)$/;"	l	subroutine:egeom3	file:
150	embed.os	/^  150       format (\/,' Average Bound Gap after Partial Metrization :',$/;"	l	subroutine:dstmat	file:
150	induce.os	/^  150                format (i8,5x,4f12.4)$/;"	l	subroutine:induce	file:
150	initrot.os	/^  150       format (3x,10i7)$/;"	l	subroutine:initrot	file:
150	kangle.os	/^  150       continue$/;"	l	subroutine:kangle	file:
150	kbond.os	/^  150       format (1x,a6,5x,i6,'-',a3,i6,'-',a3,7x,2i5)$/;"	l	subroutine:kbond	file:
150	kgeom.os	/^  150          format (\/,' KGEOM  --  Too many Group Restraints;',$/;"	l	subroutine:kgeom	file:
150	kmpole.os	/^  150       continue$/;"	l	subroutine:kmpole	file:
150	korbit.os	/^  150       format (\/,' Undefined Conjugated Pibond Parameters :',$/;"	l	subroutine:korbit	file:
150	ksolv.os	/^  150       continue$/;"	l	subroutine:kpb	file:
150	kvdw.os	/^  150       continue$/;"	l	subroutine:kvdw	file:
150	mdsave.os	/^  150       format (' Lattice Lengths',6x,3f18.10)$/;"	l	subroutine:mdsave	file:
150	mdstat.os	/^  150       format (' Kinetic Energy',6x,f19.8,' Kcal\/mole',3x,$/;"	l	subroutine:mdstat	file:
150	ocvm.os	/^  150          format (\/,' OCVM  --  Incomplete Convergence',$/;"	l	subroutine:ocvm	file:
150	picalc.os	/^  150          format (8f9.4)$/;"	l	subroutine:piscf	file:
150	prtprm.os	/^  150    continue$/;"	l	subroutine:prtprm	file:
150	readdyn.os	/^  150       format (a120)$/;"	l	subroutine:readdyn	file:
150	readgau.os	/^  150          continue$/;"	l	subroutine:readgau	file:
150	readpdb.os	/^  150       format (a3)$/;"	l	subroutine:readpdb	file:
150	readprm.os	/^  150       continue$/;"	l	subroutine:readprm	file:
150	rings.os	/^  150       format (\/,' Six-Membered Rings in the Structure :',$/;"	l	subroutine:rings	file:
150	surface.os	/^  150    continue$/;"	l	subroutine:surface	file:
150	surface.os	/^  150    continue$/;"	l	subroutine:surface1	file:
150	surfatom.os	/^  150 continue$/;"	l	subroutine:surfatom	file:
150	surfatom.os	/^  150 continue$/;"	l	subroutine:surfatom1	file:
150	tncg.os	/^  150             format (\/,' TNCG  --  Normal Termination due to ',a9)$/;"	l	subroutine:tncg	file:
1500	prtprm.os	/^ 1500    continue$/;"	l	subroutine:prtprm	file:
1510	prtprm.os	/^ 1510    format (\/\/,15x,'4-Membered Ring Pisystem Bond Parameters',$/;"	l	subroutine:prtprm	file:
1520	prtprm.os	/^ 1520       format (8x,i5,5x,i4,'-',i4,3x,f12.3,f12.3)$/;"	l	subroutine:prtprm	file:
1530	prtprm.os	/^ 1530    continue$/;"	l	subroutine:prtprm	file:
160	connolly.os	/^  160       format (1x,5(i7,f8.3))$/;"	l	subroutine:vam	file:
160	egeom3.os	/^  160                   format (\/,' Individual Gaussian Basin',$/;"	l	subroutine:egeom3	file:
160	embed.os	/^  160       format (\/,' Average Bound Gap after Partial Metrization :',$/;"	l	subroutine:dstmat	file:
160	initrot.os	/^  160    format (\/,' INITROT  --  No Torsions for Subsequent',$/;"	l	subroutine:initrot	file:
160	kangle.os	/^  160       continue$/;"	l	subroutine:kangle	file:
160	kgeom.os	/^  160       continue$/;"	l	subroutine:kgeom	file:
160	kmpole.os	/^  160       continue$/;"	l	subroutine:kmpole	file:
160	korbit.os	/^  160    format (1x,a6,5x,i6,'-',a3,i6,'-',a3,7x,2i5)$/;"	l	subroutine:korbit	file:
160	ksolv.os	/^  160    format (\/,' APBS Grid Dimensions and Spacing :',$/;"	l	subroutine:kpb	file:
160	kvdw.os	/^  160             format (\/,' Additional van der Waals Hydrogen',$/;"	l	subroutine:kvdw	file:
160	mdsave.os	/^  160       format (' Lattice Angles',7x,3f18.10)$/;"	l	subroutine:mdsave	file:
160	mdstat.os	/^  160       format (' Kinetic Energy',6x,f17.6,' Kcal\/mole',3x,$/;"	l	subroutine:mdstat	file:
160	ocvm.os	/^  160    continue$/;"	l	subroutine:ocvm	file:
160	picalc.os	/^  160       format (\/,' Gamma Matrix')$/;"	l	subroutine:piscf	file:
160	prtprm.os	/^  160       format (\/\/,15x,'Hydrogen Bonding Parameters for Atom Pairs',$/;"	l	subroutine:prtprm	file:
160	readdyn.os	/^  160       format (a120)$/;"	l	subroutine:readdyn	file:
160	readgau.os	/^  160       continue$/;"	l	subroutine:readgau	file:
160	readpdb.os	/^  160       format (a1)$/;"	l	subroutine:readpdb	file:
160	readprm.os	/^  160       continue$/;"	l	subroutine:readprm	file:
160	rings.os	/^  160          format (9x,i5,10x,6i6)$/;"	l	subroutine:rings	file:
160	surface.os	/^  160    continue$/;"	l	subroutine:surface	file:
160	surface.os	/^  160    continue$/;"	l	subroutine:surface1	file:
160	surfatom.os	/^  160       format (\/,' SURFATOM  --  Negative Area at Atom',i6)$/;"	l	subroutine:surfatom	file:
160	surfatom.os	/^  160       format (\/,' SURFATOM  --  Negative Area at Atom',i6)$/;"	l	subroutine:surfatom1	file:
160	tncg.os	/^  160             format (\/,' TNCG  --  Incomplete Convergence',$/;"	l	subroutine:tncg	file:
170	connolly.os	/^  170    format (\/,' Surface Area and Volume by Geometry Type :')$/;"	l	subroutine:vam	file:
170	egeom3.os	/^  170                format (' Distance',2x,2(i7,'-',a3),$/;"	l	subroutine:egeom3	file:
170	embed.os	/^  170    format (\/,' Time Required for Distance Matrix :',5x,f12.2,$/;"	l	subroutine:dstmat	file:
170	initrot.os	/^  170 format (\/,' Number of Torsions Used in Derivative',$/;"	l	subroutine:initrot	file:
170	kangle.os	/^  170             format (\/,' Additional Fourier Angle Bending',$/;"	l	subroutine:kangle	file:
170	kgeom.os	/^  170       continue$/;"	l	subroutine:kgeom	file:
170	kmpole.os	/^  170       continue$/;"	l	subroutine:kmpole	file:
170	korbit.os	/^  170    continue$/;"	l	subroutine:korbit	file:
170	kvdw.os	/^  170             format (\/,' Additional van der Waals Hydrogen',$/;"	l	subroutine:kvdw	file:
170	mdsave.os	/^  170 format (' Frame Number',13x,i10)$/;"	l	subroutine:mdsave	file:
170	mdstat.os	/^  170       format (' Kinetic Energy',6x,f15.4,' Kcal\/mole',3x,$/;"	l	subroutine:mdstat	file:
170	picalc.os	/^  170          format (8f9.4)$/;"	l	subroutine:piscf	file:
170	prtprm.os	/^  170       format (\/\/,15x,'Hydrogen Bonding Parameters for Atom Pairs',$/;"	l	subroutine:prtprm	file:
170	readdyn.os	/^  170    format ()$/;"	l	subroutine:readdyn	file:
170	readgau.os	/^  170             format (a120)$/;"	l	subroutine:readgau	file:
170	readpdb.os	/^  170          format (i4)$/;"	l	subroutine:readpdb	file:
170	readprm.os	/^  170       continue$/;"	l	subroutine:readprm	file:
170	surface.os	/^  170          format (\/,' SURFACE  --  Negative Area at Atom',i6)$/;"	l	subroutine:surface	file:
170	surface.os	/^  170          format (\/,' SURFACE1  --  Negative Area at Atom',i6)$/;"	l	subroutine:surface1	file:
170	surfatom.os	/^  170 continue$/;"	l	subroutine:surfatom	file:
170	surfatom.os	/^  170 continue$/;"	l	subroutine:surfatom1	file:
180	connolly.os	/^  180    format (\/,' Convex Faces :',i12,5x,'Area :',f13.3,$/;"	l	subroutine:vam	file:
180	egeom3.os	/^  180                format (\/,' Individual Spherical Boundary',$/;"	l	subroutine:egeom3	file:
180	kangle.os	/^  180          format (4x,3i4,2x,3f12.3)$/;"	l	subroutine:kangle	file:
180	kmpole.os	/^  180       continue$/;"	l	subroutine:kmpole	file:
180	kvdw.os	/^  180          format (6x,2i4,4x,2f12.4)$/;"	l	subroutine:kvdw	file:
180	mdsave.os	/^  180 format (' Coordinate File',12x,a)$/;"	l	subroutine:mdsave	file:
180	mdstat.os	/^  180          format (' Intermolecular',6x,f19.8,' Kcal\/mole',3x,$/;"	l	subroutine:mdstat	file:
180	picalc.os	/^  180       format (\/,' Pisystem Bond Orders')$/;"	l	subroutine:piscf	file:
180	prtprm.os	/^  180       format (10x,i5,5x,i4,'-',i4,2x,2f12.3)$/;"	l	subroutine:prtprm	file:
180	readdyn.os	/^  180       format (a120)$/;"	l	subroutine:readdyn	file:
180	readgau.os	/^  180                      format (a120)$/;"	l	subroutine:readgau	file:
180	readpdb.os	/^  180       format (a1)$/;"	l	subroutine:readpdb	file:
180	readprm.os	/^  180       continue$/;"	l	subroutine:readprm	file:
180	surface.os	/^  180    continue$/;"	l	subroutine:surface	file:
180	surface.os	/^  180    continue$/;"	l	subroutine:surface1	file:
190	connolly.os	/^  190    format (' Saddle Faces :',i12,5x,'Area :',f13.3,$/;"	l	subroutine:vam	file:
190	egeom3.os	/^  190             format (' Wall',11x,i7,'-',a3,29x,f10.4,f12.4)$/;"	l	subroutine:egeom3	file:
190	kangle.os	/^  190       format (\/,' KANGLE  --  Too many Fourier Angle',$/;"	l	subroutine:kangle	file:
190	kmpole.os	/^  190             format (\/,' Additional Atomic Multipoles',$/;"	l	subroutine:kmpole	file:
190	kvdw.os	/^  190       format (\/,' KVDW  --  Too many Hydrogen Bonding Pair',$/;"	l	subroutine:kvdw	file:
190	mdsave.os	/^  190       format (i6,2x,a)$/;"	l	subroutine:mdsave	file:
190	mdstat.os	/^  190          format (' Intermolecular',6x,f17.6,' Kcal\/mole',3x,$/;"	l	subroutine:mdstat	file:
190	picalc.os	/^  190          format (3x,2i6,2x,f10.4)$/;"	l	subroutine:piscf	file:
190	prtprm.os	/^  190    continue$/;"	l	subroutine:prtprm	file:
190	readdyn.os	/^  190    format ()$/;"	l	subroutine:readdyn	file:
190	readgau.os	/^  190                   format (a120)$/;"	l	subroutine:readgau	file:
190	readpdb.os	/^  190       continue$/;"	l	subroutine:readpdb	file:
190	readprm.os	/^  190       continue$/;"	l	subroutine:readprm	file:
20	active.os	/^   20       continue$/;"	l	subroutine:active	file:
20	attach.os	/^   20       format (\/,' ATTACH  --  Too many 1-3 Connected Atoms',$/;"	l	subroutine:attach	file:
20	bonds.os	/^   20          continue$/;"	l	subroutine:bonds	file:
20	born.os	/^   20       format (1x,5(i7,f8.3))$/;"	l	subroutine:born	file:
20	chkring.os	/^   20    continue$/;"	l	subroutine:chkring	file:
20	chkxyz.os	/^   20          format (' CHKXYZ  --  Warning, Atoms',i6,' and',i6,$/;"	l	subroutine:chkxyz	file:
20	cluster.os	/^   20       continue$/;"	l	subroutine:cluster	file:
20	connolly.os	/^   20             continue$/;"	l	subroutine:vam	file:
20	connolly.os	/^   20       continue$/;"	l	subroutine:nearby	file:
20	connolly.os	/^   20    continue$/;"	l	subroutine:contact	file:
20	connolly.os	/^   20    continue$/;"	l	subroutine:place	file:
20	connolly.os	/^   20    continue$/;"	l	subroutine:saddles	file:
20	deflate.os	/^   20    continue$/;"	l	subroutine:deflate	file:
20	diagq.os	/^   20    continue$/;"	l	subroutine:diagq	file:
20	diffeq.os	/^   20       format (\/,' DIFFEQ  --  Incomplete Integration',$/;"	l	subroutine:diffeq	file:
20	diffeq.os	/^   20 continue$/;"	l	subroutine:bsstep	file:
20	eangang3.os	/^   20             format (' AngAng',4x,i7,'-',a3,4i6,2f10.4,f12.4)$/;"	l	subroutine:eangang3	file:
20	eangle3.os	/^   20                format (1x,a9,1x,i7,'-',a3,i7,'-',a3,i7,$/;"	l	subroutine:eangle3	file:
20	eangtor3.os	/^   20             format (' AngTors',3x,4(i7,'-',a3),f11.4,f12.4)$/;"	l	subroutine:eangtor3	file:
20	ebond3.os	/^   20          format (' Bond',6x,2(i7,'-',a3),13x,2f10.4,f12.4)$/;"	l	subroutine:ebond3	file:
20	ebuck.os	/^   20       continue$/;"	l	subroutine:ebuck0b	file:
20	ebuck1.os	/^   20       continue$/;"	l	subroutine:ebuck1b	file:
20	ebuck3.os	/^   20                   format (\/,' Individual van der Waals',$/;"	l	subroutine:ebuck3b	file:
20	ebuck3.os	/^   20                format (' VDW-Buck',2x,2(i7,'-',a3),$/;"	l	subroutine:ebuck3a	file:
20	ebuck3.os	/^   20                format (' VDW-Buck',2x,2(i7,'-',a3),$/;"	l	subroutine:ebuck3c	file:
20	ebuck3.os	/^   20       format (\/,' Long Range vdw Correction :',9x,f12.4)$/;"	l	subroutine:ebuck3	file:
20	echarge.os	/^   20       continue$/;"	l	subroutine:echarge0b	file:
20	echarge.os	/^   20       continue$/;"	l	subroutine:echarge0e	file:
20	echarge1.os	/^   20       continue$/;"	l	subroutine:echarge1b	file:
20	echarge1.os	/^   20       continue$/;"	l	subroutine:echarge1e	file:
20	echarge3.os	/^   20                   format (\/,' Individual Charge-Charge',$/;"	l	subroutine:echarge3b	file:
20	echarge3.os	/^   20                   format (\/,' Individual Real Space Ewald',$/;"	l	subroutine:echarge3e	file:
20	echarge3.os	/^   20                format (' Charge',4x,2(i7,'-',a3),8x,$/;"	l	subroutine:echarge3a	file:
20	echarge3.os	/^   20                format (' Charge',4x,2(i7,'-',a3),8x,$/;"	l	subroutine:echarge3c	file:
20	echarge3.os	/^   20                format (' Charge',4x,2(i7,'-',a3),8x,$/;"	l	subroutine:echarge3d	file:
20	echarge3.os	/^   20                format (' Charge',4x,2(i7,'-',a3),8x,$/;"	l	subroutine:echarge3f	file:
20	echarge3.os	/^   20             format (' Charge',4x,2(i7,'-',a3),8x,$/;"	l	subroutine:echarge3g	file:
20	echgdpl2.os	/^   20    continue$/;"	l	subroutine:echgdpl2	file:
20	echgdpl3.os	/^   20                format (' Chg-Dpl',3x,3(i7,'-',a3),$/;"	l	subroutine:echgdpl3	file:
20	edipole2.os	/^   20       continue$/;"	l	subroutine:edipole2	file:
20	edipole3.os	/^   20                format (' Dipole',4x,4(i7,'-',a3),f11.4,f12.4)$/;"	l	subroutine:edipole3	file:
20	egauss.os	/^   20       continue$/;"	l	subroutine:egauss0b	file:
20	egauss1.os	/^   20       continue$/;"	l	subroutine:egauss1b	file:
20	egauss3.os	/^   20                   format (\/,' Individual van der Waals',$/;"	l	subroutine:egauss3b	file:
20	egauss3.os	/^   20                format (' VDW-Gauss',1x,2(i7,'-',a3),$/;"	l	subroutine:egauss3a	file:
20	egauss3.os	/^   20                format (' VDW-Gauss',1x,2(i7,'-',a3),$/;"	l	subroutine:egauss3c	file:
20	egauss3.os	/^   20             format (' VDW-Gauss',1x,2(i7,'-',a3),$/;"	l	subroutine:egauss3d	file:
20	egeom3.os	/^   20             format (' Position',2x,i7,'-',a3,4x,f10.4,$/;"	l	subroutine:egeom3	file:
20	ehal.os	/^   20       continue$/;"	l	subroutine:ehal0b	file:
20	ehal1.os	/^   20       continue$/;"	l	subroutine:ehal1b	file:
20	ehal3.os	/^   20                   format (\/,' Individual van der Waals',$/;"	l	subroutine:ehal3b	file:
20	ehal3.os	/^   20                format (' VDW-Hal',3x,2(i7,'-',a3),$/;"	l	subroutine:ehal3a	file:
20	ehal3.os	/^   20                format (' VDW-Hal',3x,2(i7,'-',a3),$/;"	l	subroutine:ehal3c	file:
20	eimprop3.os	/^   20             format (' Improper',2x,4(i7,'-',a3),f11.4,f12.4)$/;"	l	subroutine:eimprop3	file:
20	eimptor3.os	/^   20             format (' Improper',2x,4(i7,'-',a3),f11.4,f12.4)$/;"	l	subroutine:eimptor3	file:
20	elj.os	/^   20       continue$/;"	l	subroutine:elj0b	file:
20	elj1.os	/^   20       continue$/;"	l	subroutine:elj1b	file:
20	elj3.os	/^   20                   format (\/,' Individual van der Waals',$/;"	l	subroutine:elj3b	file:
20	elj3.os	/^   20                format (' VDW-LJ',4x,2(i7,'-',a3),$/;"	l	subroutine:elj3a	file:
20	elj3.os	/^   20                format (' VDW-LJ',4x,2(i7,'-',a3),$/;"	l	subroutine:elj3c	file:
20	elj3.os	/^   20             format (' VDW-LJ',4x,2(i7,'-',a3),$/;"	l	subroutine:elj3e	file:
20	embed.os	/^   20             format (\/,' Error at :',6x,2i6,3x,2f9.4)$/;"	l	subroutine:triangle	file:
20	embed.os	/^   20          continue$/;"	l	subroutine:dstmat	file:
20	embed.os	/^   20          format (\/,' EMBED  --  Warning, Using Poor Initial',$/;"	l	subroutine:embed	file:
20	embed.os	/^   20       format (\/,18x,'Atom Numbers',12x,'Signed Volume',\/)$/;"	l	subroutine:kchiral	file:
20	embed.os	/^   20    format (5f15.4)$/;"	l	subroutine:eigen	file:
20	embed.os	/^   20    format (5x,i5,2f16.4)$/;"	l	subroutine:majorize	file:
20	embed.os	/^   20    format (8x,f8.4,8x,f8.4,8x,f8.4)$/;"	l	subroutine:fracdist	file:
20	embed.os	/^   20    format (\/,' Atomic Distances to the Center of Mass :',\/)$/;"	l	subroutine:metric	file:
20	embed.os	/^   20 format (\/,' Num Upper Bound Violations :',4x,i11,'  of ',i12,$/;"	l	subroutine:rmserror	file:
20	embed.os	/^   20 format (\/,' Steps:',i6,3x,'Time\/Step:',f6.3,' ps',3x,$/;"	l	subroutine:explore	file:
20	embed.os	/^   20 format (\/,1x,a)$/;"	l	subroutine:grafic	file:
20	emetal.os	/^   20    continue$/;"	l	subroutine:emetal	file:
20	emetal1.os	/^   20    continue$/;"	l	subroutine:emetal1	file:
20	emm3hb.os	/^   20       continue$/;"	l	subroutine:emm3hb0b	file:
20	emm3hb1.os	/^   20       continue$/;"	l	subroutine:emm3hb1b	file:
20	emm3hb3.os	/^   20                   format (\/,' Individual van der Waals',$/;"	l	subroutine:emm3hb3b	file:
20	emm3hb3.os	/^   20                format (' VDW-MM3',3x,2(i7,'-',a3),$/;"	l	subroutine:emm3hb3a	file:
20	emm3hb3.os	/^   20                format (' VDW-MM3',3x,2(i7,'-',a3),$/;"	l	subroutine:emm3hb3c	file:
20	empole1.os	/^   20       continue$/;"	l	subroutine:empole1a	file:
20	empole3.os	/^   20                   format (' M-Pole',4x,2(i7,'-',a3),9x,$/;"	l	subroutine:empole3a	file:
20	empole3.os	/^   20                   format (' M-Pole',4x,2(i7,'-',a3),9x,$/;"	l	subroutine:empole3b	file:
20	empole3.os	/^   20                format (' M-Pole',4x,2(i7,'-',a3),9x,$/;"	l	subroutine:ereal3c	file:
20	empole3.os	/^   20                format (' M-Pole',4x,2(i7,'-',a3),9x,$/;"	l	subroutine:ereal3d	file:
20	eopbend3.os	/^   20             format (' O-P-Bend',2x,4(i7,'-',a3),f11.4,f12.4)$/;"	l	subroutine:eopbend3	file:
20	eopdist3.os	/^   20          format (' O-P-Dist',2x,(i7,'-',a3),f11.4,f12.4)$/;"	l	subroutine:eopdist3	file:
20	epitors3.os	/^   20             format (' PiTors',4x,2(i7,'-',a3),23x,f10.4,f12.4)$/;"	l	subroutine:epitors3	file:
20	erxnfld3.os	/^   20                format (' RxnFld',4x,2(i7,'-',a3),3x,3f10.4,f12.4)$/;"	l	subroutine:erxnfld3	file:
20	esolv3.os	/^   20       format (' Dispersion Energy for Atom',i6,' :',2x,f12.4)$/;"	l	subroutine:ewca3	file:
20	esolv3.os	/^   20       format (' Solvate',6x,i7,'-',a3,17x,3f12.4)$/;"	l	subroutine:esolv3	file:
20	esolv3.os	/^   20       format (i8,1x,2f15.4)$/;"	l	subroutine:egk3a	file:
20	estrbnd3.os	/^   20             format (' StrBend',3x,3(i7,'-',a3),2x,2f10.4,f12.4)$/;"	l	subroutine:estrbnd3	file:
20	estrtor3.os	/^   20             format (' StrTors',3x,4(i7,'-',a3),f11.4,f12.4)$/;"	l	subroutine:estrtor3	file:
20	etors3.os	/^   20             format (' Torsion',3x,4(i7,'-',a3),f11.4,f12.4)$/;"	l	subroutine:etors3a	file:
20	etors3.os	/^   20             format (' Torsion',3x,4(i7,'-',a3),f11.4,f12.4)$/;"	l	subroutine:etors3b	file:
20	etortor3.os	/^   20             format (' TorTor',2x,5i7,2x,2f10.4,f12.4)$/;"	l	subroutine:etortor3	file:
20	eurey3.os	/^   20          format (' UreyBrad',2x,i7,'-',a3,i7,'-',a3,$/;"	l	subroutine:eurey3	file:
20	final.os	/^   20    format ()$/;"	l	subroutine:final	file:
20	flatten.os	/^   20       continue$/;"	l	subroutine:flatten	file:
20	getint.os	/^   20    format (a120)$/;"	l	subroutine:getint	file:
20	getkey.os	/^   20       format (a120)$/;"	l	subroutine:getkey	file:
20	getmol.os	/^   20    format (a120)$/;"	l	subroutine:getmol	file:
20	getmol2.os	/^   20    format (a120)$/;"	l	subroutine:getmol2	file:
20	getpdb.os	/^   20    format (a120)$/;"	l	subroutine:getpdb	file:
20	getprm.os	/^   20    format (a120)$/;"	l	subroutine:getprm	file:
20	getxyz.os	/^   20    format (a120)$/;"	l	subroutine:getxyz	file:
20	hybrid.os	/^   20          continue$/;"	l	subroutine:himptor	file:
20	hybrid.os	/^   20          format (\/,' Hybrid Atomic Partial Charge Parameters :',$/;"	l	subroutine:hcharge	file:
20	hybrid.os	/^   20       continue$/;"	l	subroutine:hangle	file:
20	hybrid.os	/^   20       continue$/;"	l	subroutine:hbond	file:
20	hybrid.os	/^   20       continue$/;"	l	subroutine:hdipole	file:
20	hybrid.os	/^   20       continue$/;"	l	subroutine:hstrbnd	file:
20	hybrid.os	/^   20       continue$/;"	l	subroutine:hstrtor	file:
20	hybrid.os	/^   20       continue$/;"	l	subroutine:htors	file:
20	hybrid.os	/^   20       format (6x,i8,f14.4,f12.4)$/;"	l	subroutine:hvdw	file:
20	hybrid.os	/^   20    format (' HATOM  --  Too many Sites to be Altered;',$/;"	l	subroutine:hatom	file:
20	impose.os	/^   20    format (\/,' IMPOSE  --  Input Coordinates',12x,f12.6)$/;"	l	subroutine:impose	file:
20	induce.os	/^   20                format (\/,' Induced Dipole Moments (Debyes) :')$/;"	l	subroutine:induce	file:
20	induce.os	/^   20          format (i8,7x,f16.10)$/;"	l	subroutine:induce0a	file:
20	induce.os	/^   20          format (i8,7x,f16.10)$/;"	l	subroutine:induce0d	file:
20	induce.os	/^   20          format (i8,7x,f16.10)$/;"	l	subroutine:induce0e	file:
20	inertia.os	/^   20    format (\/,' Center of Mass Coordinates :',8x,3f12.6)$/;"	l	subroutine:inertia	file:
20	initrot.os	/^   20    continue$/;"	l	function:rotcheck	file:
20	initrot.os	/^   20    format (\/,' Selection of Torsional Angles for Rotation :',$/;"	l	subroutine:initrot	file:
20	invert.os	/^   20       format (\/,' INVERT  --  Cannot Invert a Singular Matrix')$/;"	l	subroutine:invert	file:
20	jacobi.os	/^   20    format (\/,' JACOBI  --  Matrix Diagonalization not Converged')$/;"	l	subroutine:jacobi	file:
20	kangang.os	/^   20             format (\/,' Additional Angle-Angle Parameters :',$/;"	l	subroutine:kangang	file:
20	kangle.os	/^   20             format (\/,' Additional Angle Bending Parameters :',$/;"	l	subroutine:kangle	file:
20	kangle.os	/^   20    continue$/;"	l	subroutine:kanglem	file:
20	kangtor.os	/^   20             format (\/,' Additional Angle-Torsion Parameters :',$/;"	l	subroutine:kangtor	file:
20	katom.os	/^   20             format (2x,i6,1x,i6,5x,a3,3x,a24,i6,f11.3,i6)$/;"	l	subroutine:katom	file:
20	kbond.os	/^   20             format (\/,' Additional Bond Stretching Parameters :',$/;"	l	subroutine:kbond	file:
20	kbond.os	/^   20             format (\/,' Additional Electronegativity',$/;"	l	subroutine:keneg	file:
20	kbond.os	/^   20       continue$/;"	l	subroutine:kbondm	file:
20	kcharge.os	/^   20                format (4x,i6,8x,f12.4)$/;"	l	subroutine:kcharge	file:
20	kdipole.os	/^   20                format (\/,' Additional Bond Dipole Moment ',$/;"	l	subroutine:kdipole	file:
20	kewald.os	/^   20    continue$/;"	l	subroutine:kewald	file:
20	kgeom.os	/^   20          continue$/;"	l	subroutine:kgeom	file:
20	kimprop.os	/^   20             format (\/,' Additional Improper Dihedral',$/;"	l	subroutine:kimprop	file:
20	kimptor.os	/^   20             format (\/,' Additional Improper Torsion Parameters :',$/;"	l	subroutine:kimptor	file:
20	kmpole.os	/^   20       continue$/;"	l	subroutine:kmpole	file:
20	kopbend.os	/^   20             continue$/;"	l	subroutine:kopbendm	file:
20	kopbend.os	/^   20             format (\/,' Additional Out-of-Plane Bend',$/;"	l	subroutine:kopbend	file:
20	kopdist.os	/^   20             format (\/,' Additional Out-of-Plane Distance',$/;"	l	subroutine:kopdist	file:
20	korbit.os	/^   20             format (\/,' Additional Pisystem Atom Parameters :',$/;"	l	subroutine:korbit	file:
20	kpitors.os	/^   20             format (\/,' Additional Pi-Orbital Torsion',$/;"	l	subroutine:kpitors	file:
20	kpolar.os	/^   20             format (\/,' Additional Atomic Dipole',$/;"	l	subroutine:kpolar	file:
20	kpolar.os	/^   20       continue$/;"	l	subroutine:polargrp	file:
20	ksolv.os	/^   20             format (\/,' Additional Implicit Solvation',$/;"	l	subroutine:ksolv	file:
20	ksolv.os	/^   20       continue$/;"	l	subroutine:kpb	file:
20	kstrbnd.os	/^   20             format (\/,' Additional Stretch-Bend Parameters :',$/;"	l	subroutine:kstrbnd	file:
20	kstrtor.os	/^   20             format (\/,' Additional Stretch-Torsion Parameters :',$/;"	l	subroutine:kstrtor	file:
20	ktors.os	/^   20             format (\/,' Additional Torsional Parameters :',$/;"	l	subroutine:ktors	file:
20	ktors.os	/^   20    continue$/;"	l	subroutine:ktorsm	file:
20	ktortor.os	/^   20             format (\/,' Additional Torsion-Torsion Parameters :',$/;"	l	subroutine:ktortor	file:
20	kumbrella.os	/^   20    continue$/;"	l	subroutine:kumbrella	file:
20	kurey.os	/^   20             format (\/,' Additional Urey-Bradley Parameters :',$/;"	l	subroutine:kurey	file:
20	kvdw.os	/^   20                format (\/,' Additional van der Waals Parameters :',$/;"	l	subroutine:kvdw	file:
20	lbfgs.os	/^   20       format (\/,' Steepest Descent Gradient Optimization :')$/;"	l	subroutine:lbfgs	file:
20	lights.os	/^   20       format (\/,' LIGHTS  --  Truncated Octahedron not',$/;"	l	subroutine:lights	file:
20	makeint.os	/^   20             format (\/,' ADJACENT  --  Atom',i6,' not Attached',$/;"	l	function:adjacent	file:
20	makeint.os	/^   20       format (\/,' Atom Number to be Defined [',i5,'] :  ',$)$/;"	l	subroutine:makeint	file:
20	mdinit.os	/^   20             format (\/,' MDINIT  --  Warning, Mass of Group',i6,$/;"	l	subroutine:mdinit	file:
20	mdrest.os	/^   20       format (' System Angular Velocity : ',3d12.2,$/;"	l	subroutine:mdrest	file:
20	mdsave.os	/^   20    format (\/,' Current Time',8x,f19.8,' Picosecond')$/;"	l	subroutine:mdsave	file:
20	mdstat.os	/^   20          format (\/,4x,'MD Step',6x,'E Total',3x,'E Potential',$/;"	l	subroutine:mdstat	file:
20	mutate.os	/^   20    continue$/;"	l	subroutine:mutate	file:
20	nblist.os	/^   20                continue$/;"	l	subroutine:clist	file:
20	nblist.os	/^   20                continue$/;"	l	subroutine:mlist	file:
20	nblist.os	/^   20                continue$/;"	l	subroutine:ulist	file:
20	nblist.os	/^   20                continue$/;"	l	subroutine:vlist	file:
20	nblist.os	/^   20       continue$/;"	l	subroutine:clight	file:
20	nblist.os	/^   20       continue$/;"	l	subroutine:mlight	file:
20	nblist.os	/^   20       continue$/;"	l	subroutine:ulight	file:
20	nblist.os	/^   20       continue$/;"	l	subroutine:vlight	file:
20	nblist.os	/^   20    continue$/;"	l	subroutine:lightn	file:
20	number.os	/^   20 continue$/;"	l	function:number	file:
20	ocvm.os	/^   20    format (\/,' Optimally Conditioned Variable Metric',$/;"	l	subroutine:ocvm	file:
20	orbital.os	/^   20                continue$/;"	l	subroutine:orbital	file:
20	picalc.os	/^   20          continue$/;"	l	subroutine:picalc	file:
20	picalc.os	/^   20          format (\/,' SCF-MO Calculation for Planar System :')$/;"	l	subroutine:piscf	file:
20	picalc.os	/^   20       format (' Bond',6x,2(i7,'-',a3),6x,$/;"	l	subroutine:pialter	file:
20	polymer.os	/^   20    continue$/;"	l	subroutine:polymer	file:
20	pressure.os	/^   20 format (' dE\/dV (Finite Diff) :',12x,f15.6,' Kcal\/mole\/A**3')$/;"	l	subroutine:ptest	file:
20	prtmol2.os	/^   20    format ('****')$/;"	l	subroutine:prtmol2	file:
20	prtprm.os	/^   20    format (\/\/,15x,'Force Field Atom Definitions',$/;"	l	subroutine:prtprm	file:
20	random.os	/^   20       format (\/,' Random Number Generator Initialized',$/;"	l	function:random	file:
20	rattle.os	/^   20    format (' RATTLE   --  Distance Constraints met at',i6,$/;"	l	subroutine:rattle	file:
20	rattle.os	/^   20    format (' RATTLE2  --  Velocity Constraints met at',i6,$/;"	l	subroutine:rattle2	file:
20	readdyn.os	/^   20 format ()$/;"	l	subroutine:readdyn	file:
20	readgau.os	/^   20       format (a120)$/;"	l	subroutine:readgarc	file:
20	readgau.os	/^   20    format (a120)$/;"	l	subroutine:readgau	file:
20	readint.os	/^   20    format (a120)$/;"	l	subroutine:readint	file:
20	readmol.os	/^   20 format (a120)$/;"	l	subroutine:readmol	file:
20	readmol2.os	/^   20    format (a120)$/;"	l	subroutine:readmol2	file:
20	readnc.f90	/^            20    format (a120)$/;"	l	subroutine:getnetcdf	file:
20	readpdb.os	/^   20       format (a1)$/;"	l	subroutine:scanpdb	file:
20	readpdb.os	/^   20    format (a120)$/;"	l	subroutine:readpdb	file:
20	readprm.os	/^   20          format ()$/;"	l	subroutine:readprm	file:
20	readseq.os	/^   20    format (a120)$/;"	l	subroutine:readseq	file:
20	readtrr.f90	/^            20    format (a120)$/;"	l	subroutine:gettrr	file:
20	readxyz.os	/^   20    format (a120)$/;"	l	subroutine:readxyz	file:
20	replica.os	/^   20       format (\/,' REPLICA  --  Period Boundary via',i3,' x',$/;"	l	subroutine:replica	file:
20	rings.os	/^   20       continue$/;"	l	subroutine:rings	file:
20	rotlist.os	/^   20    continue$/;"	l	subroutine:rotlist	file:
20	search.os	/^   20 continue$/;"	l	subroutine:search	file:
20	shakeup.os	/^   20       continue$/;"	l	subroutine:shakeup	file:
20	square.os	/^   20    format (\/,' Levenberg-Marquardt Nonlinear Least Squares :')$/;"	l	subroutine:square	file:
20	surface.os	/^   20          format (\/,' SURFACE  --  Increase the Value of MAXARC')$/;"	l	subroutine:surface	file:
20	surface.os	/^   20          format (\/,' SURFACE1  --  Increase the Value of MAXARC')$/;"	l	subroutine:surface1	file:
20	surfatom.os	/^   20       format (\/,' SURFATOM  --  Increase the Value of MAXARC')$/;"	l	subroutine:surfatom	file:
20	surfatom.os	/^   20       format (\/,' SURFATOM  --  Increase the Value of MAXARC')$/;"	l	subroutine:surfatom1	file:
20	tncg.os	/^   20          format (' PRECOND  --  Incomplete Cholesky is',$/;"	l	subroutine:precond	file:
20	tncg.os	/^   20       format (\/,' Full-Newton Conjugate-Gradient',$/;"	l	subroutine:tncg	file:
20	trimtext.os	/^   20 continue$/;"	l	function:trimtext	file:
20	unitcell.os	/^   20       format (\/,' UNITCELL  --  Truncated Octahedron',$/;"	l	subroutine:unitcell	file:
20	version.os	/^   20          format (a120)$/;"	l	subroutine:version	file:
20	volume.os	/^   20                         format (\/,' VOLUME1  --  Increase ',$/;"	l	subroutine:volume1	file:
20	volume.os	/^   20                      format (\/,' VOLUME2  -- Increase',$/;"	l	subroutine:volume2	file:
20	xyzatm.os	/^   20       format (\/,' XYZATM  --  Warning, Collinear Defining',$/;"	l	subroutine:xyzatm	file:
20	zatom.os	/^   20       continue$/;"	l	subroutine:zatom	file:
200	connolly.os	/^  200    format (' Concave Faces :',i11,5x,'Area :',f13.3,$/;"	l	subroutine:vam	file:
200	kangle.os	/^  200       continue$/;"	l	subroutine:kangle	file:
200	kmpole.os	/^  200             format (\/,4x,i6,5x,i6,1x,i6,1x,i6,3x,a8,2x,f9.5,$/;"	l	subroutine:kmpole	file:
200	kvdw.os	/^  200       continue$/;"	l	subroutine:kvdw	file:
200	mdsave.os	/^  200          format (i6,3x,d13.6,3x,d13.6,3x,d13.6)$/;"	l	subroutine:mdsave	file:
200	mdstat.os	/^  200          format (' Intermolecular',6x,f15.4,' Kcal\/mole',3x,$/;"	l	subroutine:mdstat	file:
200	prtprm.os	/^  200    format (a1,\/\/,15x,'TINKER Force Field Parameters for ',a20)$/;"	l	subroutine:prtprm	file:
200	readdyn.os	/^  200       format (a120)$/;"	l	subroutine:readdyn	file:
200	readgau.os	/^  200                   format (a120)$/;"	l	subroutine:readgau	file:
200	readpdb.os	/^  200       continue$/;"	l	subroutine:readpdb	file:
200	readprm.os	/^  200       continue$/;"	l	subroutine:readprm	file:
210	connolly.os	/^  210    format (' Buried Polyhedra :',36x,'Volume :',f13.3)$/;"	l	subroutine:vam	file:
210	kangle.os	/^  210    continue$/;"	l	subroutine:kangle	file:
210	kmpole.os	/^  210       continue$/;"	l	subroutine:kmpole	file:
210	kvdw.os	/^  210    format (\/,' KVDW  --  Unable to Index VDW Parameters;',$/;"	l	subroutine:kvdw	file:
210	mdsave.os	/^  210          format (i6,3x,d13.6,3x,d13.6,3x,d13.6)$/;"	l	subroutine:mdsave	file:
210	mdstat.os	/^  210       format (' Temperature',9x,f19.6,' Kelvin',6x,$/;"	l	subroutine:mdstat	file:
210	prtprm.os	/^  210    format (\/\/,15x,'Bond Stretching Parameters',$/;"	l	subroutine:prtprm	file:
210	readdyn.os	/^  210    format ()$/;"	l	subroutine:readdyn	file:
210	readgau.os	/^  210    continue$/;"	l	subroutine:readgau	file:
210	readpdb.os	/^  210       continue$/;"	l	subroutine:readpdb	file:
210	readprm.os	/^  210       continue$/;"	l	subroutine:readprm	file:
220	connolly.os	/^  220       format (\/,' Spindle Correction :',11x,'Area :',f13.3,$/;"	l	subroutine:vam	file:
220	kangle.os	/^  220          format (\/,' Undefined Angle Bending Parameters :',$/;"	l	subroutine:kangle	file:
220	kvdw.os	/^  220    format (\/,' KVDW  --  Unable to Index VDW Parameters;',$/;"	l	subroutine:kvdw	file:
220	mdsave.os	/^  220       format (i6,2x,a)$/;"	l	subroutine:mdsave	file:
220	mdstat.os	/^  220       format (' Temperature',9x,f17.4,' Kelvin',6x,$/;"	l	subroutine:mdstat	file:
220	prtprm.os	/^  220       format (10x,i5,5x,i4,'-',i4,6x,f12.3,f12.4)$/;"	l	subroutine:prtprm	file:
220	readdyn.os	/^  220       format (a120)$/;"	l	subroutine:readdyn	file:
220	readgau.os	/^  220 continue$/;"	l	subroutine:readgau	file:
220	readpdb.os	/^  220       format (\/,' READPDB  --  The Maximum of',i6,$/;"	l	subroutine:readpdb	file:
220	readprm.os	/^  220       continue$/;"	l	subroutine:readprm	file:
230	connolly.os	/^  230       format (' Lens Analytical Correction :',3x,'Area :',f13.3,$/;"	l	subroutine:vam	file:
230	kangle.os	/^  230       format (1x,a6,5x,3(i6,'-',a3),7x,3i5)$/;"	l	subroutine:kangle	file:
230	kvdw.os	/^  230 continue$/;"	l	subroutine:kvdw	file:
230	mdsave.os	/^  230          format (i6,2x,a3,3x,d13.6,3x,d13.6,3x,d13.6)$/;"	l	subroutine:mdsave	file:
230	mdstat.os	/^  230       format (' Temperature',9x,f15.2,' Kelvin',6x,$/;"	l	subroutine:mdstat	file:
230	prtprm.os	/^  230    continue$/;"	l	subroutine:prtprm	file:
230	readdyn.os	/^  230 continue$/;"	l	subroutine:readdyn	file:
230	readpdb.os	/^  230 continue$/;"	l	subroutine:readpdb	file:
230	readprm.os	/^  230       continue$/;"	l	subroutine:readprm	file:
240	connolly.os	/^  240       format (' Lens Numerical Correction :',4x,'Area :',f13.3,$/;"	l	subroutine:vam	file:
240	kvdw.os	/^  240    continue$/;"	l	subroutine:kvdw	file:
240	mdsave.os	/^  240    format (' Velocity File',15x,a)$/;"	l	subroutine:mdsave	file:
240	mdstat.os	/^  240          format (' Pressure',12x,f19.6,' Atmosphere',2x,$/;"	l	subroutine:mdstat	file:
240	prtprm.os	/^  240    format (\/\/,15x,'5-Membered Ring Stretch Parameters',$/;"	l	subroutine:prtprm	file:
240	readdyn.os	/^  240    format (\/,' READDYN  --  Error in Dynamics Restart',$/;"	l	subroutine:readdyn	file:
240	readpdb.os	/^  240       continue$/;"	l	subroutine:readpdb	file:
240	readprm.os	/^  240       continue$/;"	l	subroutine:readprm	file:
250	mdsave.os	/^  250    format (i6,2x,a)$/;"	l	subroutine:mdsave	file:
250	mdstat.os	/^  250          format (' Pressure',12x,f17.4,' Atmosphere',2x,$/;"	l	subroutine:mdstat	file:
250	prtprm.os	/^  250       format (10x,i5,5x,i4,'-',i4,6x,f12.3,f12.4)$/;"	l	subroutine:prtprm	file:
250	readpdb.os	/^  250    continue$/;"	l	subroutine:readpdb	file:
250	readprm.os	/^  250       continue$/;"	l	subroutine:readprm	file:
260	mdsave.os	/^  260       format (i6,2x,a3,3x,d13.6,3x,d13.6,3x,d13.6)$/;"	l	subroutine:mdsave	file:
260	mdstat.os	/^  260          format (' Pressure',12x,f15.2,' Atmosphere',2x,$/;"	l	subroutine:mdstat	file:
260	prtprm.os	/^  260    continue$/;"	l	subroutine:prtprm	file:
260	readpdb.os	/^  260          continue$/;"	l	subroutine:readpdb	file:
260	readprm.os	/^  260       continue$/;"	l	subroutine:readprm	file:
270	mdsave.os	/^  270    format (' Force Vector File',11x,a)$/;"	l	subroutine:mdsave	file:
270	mdstat.os	/^  270          format (' Density',13x,f19.8,' Grams\/cc',4x,$/;"	l	subroutine:mdstat	file:
270	prtprm.os	/^  270    format (\/\/,15x,'4-Membered Ring Stretch Parameters',$/;"	l	subroutine:prtprm	file:
270	readpdb.os	/^  270       continue$/;"	l	subroutine:readpdb	file:
270	readprm.os	/^  270       continue$/;"	l	subroutine:readprm	file:
280	mdsave.os	/^  280    format (i6,2x,a)$/;"	l	subroutine:mdsave	file:
280	mdstat.os	/^  280          format (' Density',13x,f17.6,' Grams\/cc',4x,$/;"	l	subroutine:mdstat	file:
280	prtprm.os	/^  280       format (10x,i5,5x,i4,'-',i4,6x,f12.3,f12.4)$/;"	l	subroutine:prtprm	file:
280	readpdb.os	/^  280       continue$/;"	l	subroutine:readpdb	file:
280	readprm.os	/^  280       continue$/;"	l	subroutine:readprm	file:
290	mdsave.os	/^  290          format (i6,2x,a3,3f12.6)$/;"	l	subroutine:mdsave	file:
290	mdstat.os	/^  290          format (' Density',13x,f15.4,' Grams\/cc',4x,$/;"	l	subroutine:mdstat	file:
290	prtprm.os	/^  290    continue$/;"	l	subroutine:prtprm	file:
290	readprm.os	/^  290       continue$/;"	l	subroutine:readprm	file:
30	active.os	/^   30       continue$/;"	l	subroutine:active	file:
30	attach.os	/^   30          continue$/;"	l	subroutine:attach	file:
30	chkring.os	/^   30    continue$/;"	l	subroutine:chkring	file:
30	cluster.os	/^   30          format (\/,' CLUSTER  --  Too many Atom Groups;',$/;"	l	subroutine:cluster	file:
30	connolly.os	/^   30             continue$/;"	l	subroutine:vam	file:
30	connolly.os	/^   30       continue$/;"	l	subroutine:saddles	file:
30	connolly.os	/^   30    continue$/;"	l	subroutine:contact	file:
30	connolly.os	/^   30    continue$/;"	l	subroutine:nearby	file:
30	connolly.os	/^   30    continue$/;"	l	subroutine:place	file:
30	diagq.os	/^   30    continue$/;"	l	subroutine:diagq	file:
30	diffeq.os	/^   30       format (' BSSTEP  --  Underflow of Step Size')$/;"	l	subroutine:bsstep	file:
30	diffeq.os	/^   30       format (\/,' DIFFEQ  --  Incomplete Integration',$/;"	l	subroutine:diffeq	file:
30	eangle3.os	/^   30                   format (\/,' Individual Angle Bending',$/;"	l	subroutine:eangle3	file:
30	ebuck3.os	/^   30                      format (\/,' Individual van der Waals',$/;"	l	subroutine:ebuck3a	file:
30	ebuck3.os	/^   30                   format (' VDW-Buck',2x,2(i7,'-',a3),$/;"	l	subroutine:ebuck3b	file:
30	echarge3.os	/^   30                      format (\/,' Individual Charge-Charge',$/;"	l	subroutine:echarge3a	file:
30	echarge3.os	/^   30                      format (\/,' Individual Real Space Ewald',$/;"	l	subroutine:echarge3d	file:
30	echarge3.os	/^   30                   format (' Charge',4x,2(i7,'-',a3),8x,$/;"	l	subroutine:echarge3b	file:
30	echarge3.os	/^   30                   format (' Charge',4x,2(i7,'-',a3),8x,$/;"	l	subroutine:echarge3e	file:
30	echgdpl2.os	/^   30    continue$/;"	l	subroutine:echgdpl2	file:
30	echgdpl3.os	/^   30                      format (\/,' Individual Charge-Dipole',$/;"	l	subroutine:echgdpl3	file:
30	edipole2.os	/^   30    continue$/;"	l	subroutine:edipole2	file:
30	edipole3.os	/^   30                      format (\/,' Individual Dipole-Dipole',$/;"	l	subroutine:edipole3	file:
30	egauss3.os	/^   30                      format (\/,' Individual van der Waals',$/;"	l	subroutine:egauss3a	file:
30	egauss3.os	/^   30                   format (' VDW-Gauss',1x,2(i7,'-',a3),$/;"	l	subroutine:egauss3b	file:
30	egeom3.os	/^   30             format (' Position',2x,i7,'-',a3,9x,'----',1x,$/;"	l	subroutine:egeom3	file:
30	ehal3.os	/^   30                      format (\/,' Individual van der Waals',$/;"	l	subroutine:ehal3a	file:
30	ehal3.os	/^   30                   format (' VDW-Hal',3x,2(i7,'-',a3),$/;"	l	subroutine:ehal3b	file:
30	elj3.os	/^   30                      format (\/,' Individual van der Waals',$/;"	l	subroutine:elj3a	file:
30	elj3.os	/^   30                   format (' VDW-LJ',4x,2(i7,'-',a3),$/;"	l	subroutine:elj3b	file:
30	embed.os	/^   30             format (\/,' Traced to :',5x,2i6,3x,2f9.4,$/;"	l	subroutine:triangle	file:
30	embed.os	/^   30       format (5x,i5,2f16.4)$/;"	l	subroutine:majorize	file:
30	embed.os	/^   30       format (\/,' Distance Matrix via Uniform Random',$/;"	l	subroutine:dstmat	file:
30	embed.os	/^   30       format (i6,5x,4i6,5x,f12.4)$/;"	l	subroutine:kchiral	file:
30	embed.os	/^   30    format (6f13.4)$/;"	l	subroutine:metric	file:
30	embed.os	/^   30    format (\/,' Eigenvectors from Metric Matrix :',\/)$/;"	l	subroutine:eigen	file:
30	embed.os	/^   30    format (\/,' MD Step    E Total   E Potential   E Kinetic',$/;"	l	subroutine:explore	file:
30	embed.os	/^   30    format (\/,' Num Upper Restraint Violations :',i11,'  of ',i12,$/;"	l	subroutine:rmserror	file:
30	embed.os	/^   30    format (\/,' RMS Superposition for Original and',$/;"	l	subroutine:embed	file:
30	embed.os	/^   30 format (\/,' Range of Above Diag Elements : ',f13.4,' to',f13.4,$/;"	l	subroutine:grafic	file:
30	emetal1.os	/^   30    continue$/;"	l	subroutine:emetal1	file:
30	emm3hb3.os	/^   30                      format (\/,' Individual van der Waals',$/;"	l	subroutine:emm3hb3a	file:
30	emm3hb3.os	/^   30                   format (' VDW-MM3',3x,2(i7,'-',a3),$/;"	l	subroutine:emm3hb3b	file:
30	empole3.os	/^   30                      format (\/,' Individual Multipole and',$/;"	l	subroutine:empole3a	file:
30	empole3.os	/^   30                   format (\/,' Real Space Multipole and',$/;"	l	subroutine:ereal3c	file:
30	esolv3.os	/^   30       format (\/,' Implicit Solvation Energy Components :'$/;"	l	subroutine:esolv3	file:
30	esolv3.os	/^   30    format ()$/;"	l	subroutine:ewca3x	file:
30	esolv3.os	/^   30    format (\/,' Total HCT Dispersion Energy :',7x,f12.4)$/;"	l	subroutine:ewca3	file:
30	flatten.os	/^   30          format (\/,' Enter the Initial Mean Squared Gaussian',$/;"	l	subroutine:flatten	file:
30	getint.os	/^   30    format (\/,' GETINT  --  Internal Coordinates File',$/;"	l	subroutine:getint	file:
30	getkey.os	/^   30          format (\/,' GETKEY  --  Keyfile Too Large;',$/;"	l	subroutine:getkey	file:
30	getprm.os	/^   30       format (a120)$/;"	l	subroutine:getprm	file:
30	getxyz.os	/^   30    format (\/,' GETXYZ  --  Cartesian Coordinates File',$/;"	l	subroutine:getxyz	file:
30	hybrid.os	/^   30                format (\/,' Hybrid Stretch-Bend Parameters :',$/;"	l	subroutine:hstrbnd	file:
30	hybrid.os	/^   30             continue$/;"	l	subroutine:himptor	file:
30	hybrid.os	/^   30             continue$/;"	l	subroutine:hstrtor	file:
30	hybrid.os	/^   30             format (\/,' Hybrid Angle Bending Parameters :',$/;"	l	subroutine:hangle	file:
30	hybrid.os	/^   30             format (\/,' Hybrid Bond Stretching Parameters :',$/;"	l	subroutine:hbond	file:
30	hybrid.os	/^   30             format (\/,' Hybrid Torsional Parameters :',$/;"	l	subroutine:htors	file:
30	hybrid.os	/^   30       continue$/;"	l	subroutine:hdipole	file:
30	hybrid.os	/^   30       format (6x,i8,5x,f12.3)$/;"	l	subroutine:hcharge	file:
30	impose.os	/^   30    format (' IMPOSE  --  After Translation',12x,f12.6)$/;"	l	subroutine:impose	file:
30	induce.os	/^   30                format (\/,4x,'Atom',14x,'X',15x,'Y',15x,'Z',$/;"	l	subroutine:induce	file:
30	induce.os	/^   30       format (\/,' Induced Dipoles :',6x,'Iterations',i5,$/;"	l	subroutine:induce0a	file:
30	induce.os	/^   30       format (\/,' Induced Dipoles :',6x,'Iterations',i5,$/;"	l	subroutine:induce0d	file:
30	induce.os	/^   30       format (\/,' Induced Dipoles :',6x,'Iterations',i5,$/;"	l	subroutine:induce0e	file:
30	inertia.os	/^   30    format (' Euler Angles (Phi\/Theta\/Psi) : ',5x,3f12.3)$/;"	l	subroutine:inertia	file:
30	initrot.os	/^   30    format (i10)$/;"	l	subroutine:initrot	file:
30	kangang.os	/^   30          format (9x,i3,7x,3f11.3)$/;"	l	subroutine:kangang	file:
30	kangle.os	/^   30                format (4x,3i4,2x,2f12.3)$/;"	l	subroutine:kangle	file:
30	kangtor.os	/^   30          format (1x,4i4,4x,6f9.3)$/;"	l	subroutine:kangtor	file:
30	katom.os	/^   30          format (\/,' KATOM   --  Too many Atom Types;',$/;"	l	subroutine:katom	file:
30	kbond.os	/^   30             format (6x,2i4,4x,f12.3,f12.4)$/;"	l	subroutine:kbond	file:
30	kbond.os	/^   30          format (4x,3i4,14x,f12.4)$/;"	l	subroutine:keneg	file:
30	kbond.os	/^   30    continue$/;"	l	subroutine:kbondm	file:
30	kcharge.os	/^   30             format (\/,' KCHARGE  --  Too many Partial Charge',$/;"	l	subroutine:kcharge	file:
30	kdipole.os	/^   30                format (6x,2i4,4x,2f12.3)$/;"	l	subroutine:kdipole	file:
30	kewald.os	/^   30    format (\/,' KEWALD  --  FFT Charge Grid Too Large;',$/;"	l	subroutine:kewald	file:
30	kgeom.os	/^   30          format (\/,' KGEOM  --  Too many Position Restraints;',$/;"	l	subroutine:kgeom	file:
30	kimprop.os	/^   30          format (4x,4i4,10x,2f12.3)$/;"	l	subroutine:kimprop	file:
30	kimptor.os	/^   30          format (4x,4i4,2x,3(f11.3,f7.1))$/;"	l	subroutine:kimptor	file:
30	kmpole.os	/^   30       continue$/;"	l	subroutine:kmpole	file:
30	kopbend.os	/^   30          format (4x,4i4,10x,f12.3)$/;"	l	subroutine:kopbend	file:
30	kopdist.os	/^   30          format (4x,4i4,10x,2f12.3)$/;"	l	subroutine:kopdist	file:
30	korbit.os	/^   30          format (8x,i4,3x,f10.3,3x,f10.3,2x,f10.3)$/;"	l	subroutine:korbit	file:
30	kpitors.os	/^   30          format (6x,2i4,4x,f12.3)$/;"	l	subroutine:kpitors	file:
30	kpolar.os	/^   30             continue$/;"	l	subroutine:kpolar	file:
30	kpolar.os	/^   30 continue$/;"	l	subroutine:polargrp	file:
30	ksolv.os	/^   30             format (4x,i6,8x,f12.4)$/;"	l	subroutine:ksolv	file:
30	ksolv.os	/^   30       continue$/;"	l	subroutine:kpb	file:
30	kstrbnd.os	/^   30          format (4x,3i4,2x,2f12.3)$/;"	l	subroutine:kstrbnd	file:
30	kstrtor.os	/^   30          format (1x,4i4,8x,'1st Bond',1x,3f12.3,$/;"	l	subroutine:kstrtor	file:
30	ktors.os	/^   30             format (1x,4i4,1x,6(f6.2,i4))$/;"	l	subroutine:ktors	file:
30	ktortor.os	/^   30          format (1x,5i4,6x,i8,6x,i8)$/;"	l	subroutine:ktortor	file:
30	kumbrella.os	/^   30       continue$/;"	l	subroutine:kumbrella	file:
30	kurey.os	/^   30          format (4x,3i4,2x,f12.3,f12.4)$/;"	l	subroutine:kurey	file:
30	kvdw.os	/^   30                format (\/,' Additional van der Waals Parameters :',$/;"	l	subroutine:kvdw	file:
30	lbfgs.os	/^   30       format (\/,' SD Iter     F Value      G RMS     F Move',$/;"	l	subroutine:lbfgs	file:
30	lights.os	/^   30       continue$/;"	l	subroutine:lights	file:
30	makeint.os	/^   30       format (i10)$/;"	l	subroutine:makeint	file:
30	makeint.os	/^   30    continue$/;"	l	function:adjacent	file:
30	mdinit.os	/^   30          format (\/,' MDINIT  --  Warning, Mass of Atom',i6,$/;"	l	subroutine:mdinit	file:
30	mdsave.os	/^   30    format (' Current Potential',3x,f19.8,' Kcal\/mole')$/;"	l	subroutine:mdsave	file:
30	mdstat.os	/^   30       format (i10,3f14.4,2f11.2)$/;"	l	subroutine:mdstat	file:
30	mutate.os	/^   30    format (\/,' Free Energy Perturbation :',f15.3,$/;"	l	subroutine:mutate	file:
30	nblist.os	/^   30                continue$/;"	l	subroutine:clist	file:
30	nblist.os	/^   30                continue$/;"	l	subroutine:mlist	file:
30	nblist.os	/^   30                continue$/;"	l	subroutine:ulist	file:
30	nblist.os	/^   30                continue$/;"	l	subroutine:vlist	file:
30	nblist.os	/^   30       format (\/,' CLIGHT  --  Too many Neighbors;',$/;"	l	subroutine:clight	file:
30	nblist.os	/^   30       format (\/,' MLIGHT  --  Too many Neighbors;',$/;"	l	subroutine:mlight	file:
30	nblist.os	/^   30       format (\/,' ULIGHT  --  Too many Neighbors;',$/;"	l	subroutine:ulight	file:
30	nblist.os	/^   30       format (\/,' VLIGHT  --  Too many Neighbors;',$/;"	l	subroutine:vlight	file:
30	nblist.os	/^   30    continue$/;"	l	subroutine:lightn	file:
30	number.os	/^   30          format (\/,' NUMBER  --  Non-Numeric Characters Found',$/;"	l	function:number	file:
30	ocvm.os	/^   30    format (\/,' VM Iter     F Value       G RMS     F Move',$/;"	l	subroutine:ocvm	file:
30	picalc.os	/^   30          format (\/,' Modified Pariser-Parr-Pople Molecular',$/;"	l	subroutine:picalc	file:
30	picalc.os	/^   30          format (\/,' SCF-MO Calculation for Non-Planar',$/;"	l	subroutine:piscf	file:
30	picalc.os	/^   30    format (\/,' Altered 2-Fold Torsional Parameters',$/;"	l	subroutine:pialter	file:
30	polymer.os	/^   30       format (\/,' POLYMER  --  Image Conflicts for Infinite',$/;"	l	subroutine:polymer	file:
30	pressure.os	/^   30    format (\/,' Pressure (Analytical, 0 K) :',5x,f15.3,$/;"	l	subroutine:ptest	file:
30	prtmol2.os	/^   30    format (a)$/;"	l	subroutine:prtmol2	file:
30	prtprm.os	/^   30          format (3x,i5,3x,i5,5x,a3,5x,a24,i5,f12.3,i7)$/;"	l	subroutine:prtprm	file:
30	readdyn.os	/^   30 format (a120)$/;"	l	subroutine:readdyn	file:
30	readgau.os	/^   30    format (a120)$/;"	l	subroutine:readgau	file:
30	readgau.os	/^   30 continue$/;"	l	subroutine:readgarc	file:
30	readint.os	/^   30    format (\/,' READINT  --  The Coordinate File Does Not',$/;"	l	subroutine:readint	file:
30	readmol.os	/^   30 format (\/)$/;"	l	subroutine:readmol	file:
30	readmol2.os	/^   30       format (a120)$/;"	l	subroutine:readmol2	file:
30	readpdb.os	/^   30       format (a1)$/;"	l	subroutine:scanpdb	file:
30	readpdb.os	/^   30       format (a4)$/;"	l	subroutine:readpdb	file:
30	readprm.os	/^   30          format (a)$/;"	l	subroutine:readprm	file:
30	readseq.os	/^   30 continue$/;"	l	subroutine:readseq	file:
30	readxyz.os	/^   30    format (\/,' READXYZ  --  The Coordinate File Does Not',$/;"	l	subroutine:readxyz	file:
30	replica.os	/^   30       format (\/,' REPLICA  --  Period Boundary via',i4,' x',$/;"	l	subroutine:replica	file:
30	rings.os	/^   30                format (\/,' RINGS  --  Too many 4-Membered Rings;',$/;"	l	subroutine:rings	file:
30	rotlist.os	/^   30    continue$/;"	l	subroutine:rotlist	file:
30	search.os	/^   30 continue$/;"	l	subroutine:search	file:
30	square.os	/^   30    format (\/,' LS Iter     F Value      Total G     Active G',$/;"	l	subroutine:square	file:
30	surface.os	/^   30       continue$/;"	l	subroutine:surface	file:
30	surface.os	/^   30       continue$/;"	l	subroutine:surface1	file:
30	surfatom.os	/^   30    continue$/;"	l	subroutine:surfatom	file:
30	surfatom.os	/^   30    continue$/;"	l	subroutine:surfatom1	file:
30	tncg.os	/^   30          format (' PRECOND  --  Incomplete Cholesky',i12,$/;"	l	subroutine:precond	file:
30	tncg.os	/^   30       format (\/,' Truncated-Newton Conjugate-Gradient',$/;"	l	subroutine:tncg	file:
30	volume.os	/^   30                      format (\/,' VOLUME1  --  Increase',$/;"	l	subroutine:volume1	file:
30	xyzatm.os	/^   30          format (\/,' XYZATM  --  Warning, Sum of Bond Angles',$/;"	l	subroutine:xyzatm	file:
30	zatom.os	/^   30          continue$/;"	l	subroutine:zatom	file:
300	mdsave.os	/^  300    format (' Induced Dipole File',10x,a)$/;"	l	subroutine:mdsave	file:
300	mdstat.os	/^  300          format (' Deformation',9x,f19.8,' Sqr Angs')$/;"	l	subroutine:mdstat	file:
300	prtprm.os	/^  300    format (\/\/,15x,'3-Membered Ring Stretch Parameters',$/;"	l	subroutine:prtprm	file:
300	readprm.os	/^  300       continue$/;"	l	subroutine:readprm	file:
310	mdsave.os	/^  310    format (\/,' MDSAVE  --  Dynamics Calculation Ending',$/;"	l	subroutine:mdsave	file:
310	mdstat.os	/^  310          format (' Deformation',9x,f17.6,' Sqr Angs')$/;"	l	subroutine:mdstat	file:
310	prtprm.os	/^  310       format (10x,i5,5x,i4,'-',i4,6x,f12.3,f12.4)$/;"	l	subroutine:prtprm	file:
310	readprm.os	/^  310       continue$/;"	l	subroutine:readprm	file:
320	mdsave.os	/^  320    format ()$/;"	l	subroutine:mdsave	file:
320	mdstat.os	/^  320          format (' Deformation',9x,f15.4,' Sqr Angs')$/;"	l	subroutine:mdstat	file:
320	prtprm.os	/^  320    continue$/;"	l	subroutine:prtprm	file:
320	readprm.os	/^  320       continue$/;"	l	subroutine:readprm	file:
330	prtprm.os	/^  330    format (\/\/,15x,'Higher Order Stretching Constants',$/;"	l	subroutine:prtprm	file:
330	readprm.os	/^  330       continue$/;"	l	subroutine:readprm	file:
340	prtprm.os	/^  340    format (\/\/,15x,'Electronegativity Bond Length Parameters',$/;"	l	subroutine:prtprm	file:
340	readprm.os	/^  340       continue$/;"	l	subroutine:readprm	file:
350	prtprm.os	/^  350       format (10x,i5,5x,i4,'-',i4,'-',i4,14x,f12.4)$/;"	l	subroutine:prtprm	file:
350	readprm.os	/^  350       continue$/;"	l	subroutine:readprm	file:
360	prtprm.os	/^  360    continue$/;"	l	subroutine:prtprm	file:
360	readprm.os	/^  360       continue$/;"	l	subroutine:readprm	file:
370	prtprm.os	/^  370    format (a1,\/\/,15x,'TINKER Force Field Parameters for ',a20)$/;"	l	subroutine:prtprm	file:
370	readprm.os	/^  370       continue$/;"	l	subroutine:readprm	file:
380	prtprm.os	/^  380    format (\/\/,15x,'Angle Bending Parameters',$/;"	l	subroutine:prtprm	file:
380	readprm.os	/^  380       continue$/;"	l	subroutine:readprm	file:
390	prtprm.os	/^  390          format (3x,i5,5x,i4,'-',i4,'-',i4,2f12.3)$/;"	l	subroutine:prtprm	file:
390	readprm.os	/^  390       continue$/;"	l	subroutine:readprm	file:
40	active.os	/^   40             format (\/,' Active Site Spheres used to',$/;"	l	subroutine:active	file:
40	attach.os	/^   40       format (\/,' ATTACH  --  Too many 1-4 Connected Atoms',$/;"	l	subroutine:attach	file:
40	chkring.os	/^   40    continue$/;"	l	subroutine:chkring	file:
40	cluster.os	/^   40       continue$/;"	l	subroutine:cluster	file:
40	connolly.os	/^   40             continue$/;"	l	subroutine:nearby	file:
40	connolly.os	/^   40             continue$/;"	l	subroutine:vam	file:
40	connolly.os	/^   40       continue$/;"	l	subroutine:saddles	file:
40	connolly.os	/^   40    continue$/;"	l	subroutine:contact	file:
40	connolly.os	/^   40    continue$/;"	l	subroutine:place	file:
40	diagq.os	/^   40    continue$/;"	l	subroutine:diagq	file:
40	diffeq.os	/^   40 continue$/;"	l	subroutine:bsstep	file:
40	eangle3.os	/^   40                format (' Angle-IP',2x,i7,'-',a3,i7,'-',a3,i7,$/;"	l	subroutine:eangle3	file:
40	ebuck3.os	/^   40                   format (' VDW-Buck',2x,2(i7,'-',a3),3x,$/;"	l	subroutine:ebuck3a	file:
40	ebuck3.os	/^   40                   format (' VDW-Buck',2x,2(i7,'-',a3),3x,$/;"	l	subroutine:ebuck3b	file:
40	echarge3.os	/^   40                   format (' Charge',4x,2(i7,'-',a3),1x,$/;"	l	subroutine:echarge3a	file:
40	echarge3.os	/^   40                   format (' Charge',4x,2(i7,'-',a3),1x,$/;"	l	subroutine:echarge3b	file:
40	echarge3.os	/^   40                   format (' Charge',4x,2(i7,'-',a3),1x,$/;"	l	subroutine:echarge3d	file:
40	echarge3.os	/^   40                   format (' Charge',4x,2(i7,'-',a3),1x,$/;"	l	subroutine:echarge3e	file:
40	echgdpl2.os	/^   40    continue$/;"	l	subroutine:echgdpl2	file:
40	echgdpl3.os	/^   40                   format (' Chg-Dpl',3x,3(i7,'-',a3),$/;"	l	subroutine:echgdpl3	file:
40	edipole3.os	/^   40                format (' Dipole',4x,4(i7,'-',a3),f11.4,f12.4)$/;"	l	subroutine:edipole3	file:
40	egauss3.os	/^   40                   format (' VDW-Gauss',1x,2(i7,'-',a3),$/;"	l	subroutine:egauss3a	file:
40	egauss3.os	/^   40                   format (' VDW-Gauss',1x,2(i7,'-',a3),$/;"	l	subroutine:egauss3b	file:
40	egeom3.os	/^   40             format (' Position',2x,i7,'-',a3,9x,'----',$/;"	l	subroutine:egeom3	file:
40	ehal3.os	/^   40                   format (' VDW-Hal',3x,2(i7,'-',a3),3x,$/;"	l	subroutine:ehal3a	file:
40	ehal3.os	/^   40                   format (' VDW-Hal',3x,2(i7,'-',a3),3x,$/;"	l	subroutine:ehal3b	file:
40	elj3.os	/^   40                   format (' VDW-LJ',4x,2(i7,'-',a3),3x,$/;"	l	subroutine:elj3a	file:
40	elj3.os	/^   40                   format (' VDW-LJ',4x,2(i7,'-',a3),3x,$/;"	l	subroutine:elj3b	file:
40	embed.os	/^   40             format (' TRIANGLE  --  Altered Lower Bound at',$/;"	l	subroutine:triangle	file:
40	embed.os	/^   40       format (5f15.4)$/;"	l	subroutine:eigen	file:
40	embed.os	/^   40       format (\/,' Distance Matrix Generated via Normal',$/;"	l	subroutine:dstmat	file:
40	embed.os	/^   40    format (\/,' Radius of Gyration after Majorization :',5x,f16.4)$/;"	l	subroutine:majorize	file:
40	embed.os	/^   40    format (\/,' Time Required for Refinement :',10x,f12.2,$/;"	l	subroutine:embed	file:
40	embed.os	/^   40    format (i6,2f13.4,f12.4,f11.2)$/;"	l	subroutine:explore	file:
40	embed.os	/^   40 format (\/,' Symbol Magnitude Ordering :',14x,$/;"	l	subroutine:grafic	file:
40	emm3hb3.os	/^   40                   format (' VDW-MM3',3x,2(i7,'-',a3),3x,$/;"	l	subroutine:emm3hb3a	file:
40	emm3hb3.os	/^   40                   format (' VDW-MM3',3x,2(i7,'-',a3),3x,$/;"	l	subroutine:emm3hb3b	file:
40	empole3.os	/^   40                   format (' M-Pole',4x,2(i7,'-',a3),1x,$/;"	l	subroutine:empole3a	file:
40	empole3.os	/^   40                format (' M-Pole',4x,2(i7,'-',a3),1x,$/;"	l	subroutine:ereal3c	file:
40	esolv3.os	/^   40       format (' Dispersion Energy for Atom',i6,' :',2x,f12.4)$/;"	l	subroutine:ewca3x	file:
40	esolv3.os	/^   40       format (\/,' Implicit Solvation Energy Components :'$/;"	l	subroutine:esolv3	file:
40	flatten.os	/^   40          format (\/,' Enter Length Scale for Potential Surface',$/;"	l	subroutine:flatten	file:
40	getkey.os	/^   40    continue$/;"	l	subroutine:getkey	file:
40	getprm.os	/^   40          format (\/,' GETPRM  --  Parameter File Too Large;',$/;"	l	subroutine:getprm	file:
40	hybrid.os	/^   40                   format (\/,' Hybrid Improper Torsional',$/;"	l	subroutine:himptor	file:
40	hybrid.os	/^   40                format (\/,' Hybrid Stretch-Torsion Parameters :',$/;"	l	subroutine:hstrtor	file:
40	hybrid.os	/^   40             format (3x,3i5,2f12.3)$/;"	l	subroutine:hstrbnd	file:
40	hybrid.os	/^   40             format (\/,' Hybrid Bond Dipole Moment Parameters :',$/;"	l	subroutine:hdipole	file:
40	hybrid.os	/^   40          format (1x,4i4,1x,6(f6.2,i4))$/;"	l	subroutine:htors	file:
40	hybrid.os	/^   40          format (3x,3i5,2f12.3)$/;"	l	subroutine:hangle	file:
40	hybrid.os	/^   40          format (6x,2i5,f14.3,f12.4)$/;"	l	subroutine:hbond	file:
40	impose.os	/^   40    format (' IMPOSE  --  After Rotation',15x,f12.6)$/;"	l	subroutine:impose	file:
40	induce.os	/^   40                format (\/,4x,'Atom',14x,'X',13x,'Y',13x,'Z',$/;"	l	subroutine:induce	file:
40	induce.os	/^   40       format (\/,' INDUCE  --  Warning, Induced Dipoles',$/;"	l	subroutine:induce0a	file:
40	induce.os	/^   40       format (\/,' INDUCE  --  Warning, Induced Dipoles',$/;"	l	subroutine:induce0d	file:
40	induce.os	/^   40       format (\/,' INDUCE  --  Warning, Induced Dipoles',$/;"	l	subroutine:induce0e	file:
40	inertia.os	/^   40    format (\/,' Moments of Inertia and Principal Axes :',$/;"	l	subroutine:inertia	file:
40	initrot.os	/^   40       format (\/,' Enter Atoms in Rotatable Bond',i5,' :  ',$)$/;"	l	subroutine:initrot	file:
40	kangle.os	/^   40                format (4x,3i4,2x,2f12.3,3x,'0-H''s')$/;"	l	subroutine:kangle	file:
40	kangtor.os	/^   40       format (\/,' KANGTOR  --  Too many Angle-Torsion',$/;"	l	subroutine:kangtor	file:
40	katom.os	/^   40       continue$/;"	l	subroutine:katom	file:
40	kbond.os	/^   40             format (6x,2i4,4x,f12.3,f12.4,3x,a6)$/;"	l	subroutine:kbond	file:
40	kbond.os	/^   40       format (\/,' KENEG  --  Too many Electronegativity',$/;"	l	subroutine:keneg	file:
40	kcharge.os	/^   40       continue$/;"	l	subroutine:kcharge	file:
40	kdipole.os	/^   40                format (6x,2i4,4x,2f12.3,3x,a6)$/;"	l	subroutine:kdipole	file:
40	kewald.os	/^   40    format (\/,' KEWALD  --  Warning, Small Charge Grid',$/;"	l	subroutine:kewald	file:
40	kgeom.os	/^   40       continue$/;"	l	subroutine:kgeom	file:
40	kimprop.os	/^   40       format (\/,' KIMPROP  --  Too many Improper Dihedral',$/;"	l	subroutine:kimprop	file:
40	kimptor.os	/^   40       format (\/,' KIMPTOR  --  Too many Improper Torsion',$/;"	l	subroutine:kimptor	file:
40	kmpole.os	/^   40       continue$/;"	l	subroutine:kmpole	file:
40	kopbend.os	/^   40       format (\/,' KOPBEND --  Too many Out-of-Plane',$/;"	l	subroutine:kopbend	file:
40	kopdist.os	/^   40       format (\/,' KOPDIST  --  Too many Out-of-Plane Distance',$/;"	l	subroutine:kopdist	file:
40	korbit.os	/^   40          format (\/,' KORBIT  --  Too many Atom Classes;',$/;"	l	subroutine:korbit	file:
40	kpitors.os	/^   40       format (\/,' KPITORS  --  Too many Pi-Orbital Torsion',$/;"	l	subroutine:kpitors	file:
40	kpolar.os	/^   40                   format (\/,' POLARGRP  --  Too many Atoms',$/;"	l	subroutine:polargrp	file:
40	kpolar.os	/^   40                format (4x,i6,10x,f10.3,2x,f10.3,7x,20i5)$/;"	l	subroutine:kpolar	file:
40	ksolv.os	/^   40          format (\/,' KSOLV  --  Only Atom Types Through',i4,$/;"	l	subroutine:ksolv	file:
40	ksolv.os	/^   40       continue$/;"	l	subroutine:kpb	file:
40	kstrbnd.os	/^   40       format (\/,' KSTRBND  --  Too many Stretch-Bend',$/;"	l	subroutine:kstrbnd	file:
40	kstrtor.os	/^   40       format (\/,' KSTRTOR  --  Too many Stretch-Torsion',$/;"	l	subroutine:kstrtor	file:
40	ktors.os	/^   40             format (1x,4i4,1x,6(f6.2,i4),3x,a6)$/;"	l	subroutine:ktors	file:
40	ktortor.os	/^   40       format (\/,' KTORTOR  --  Too many Torsion-Torsion',$/;"	l	subroutine:ktortor	file:
40	kurey.os	/^   40       format (\/,' KUREY  --  Too many Urey-Bradley',$/;"	l	subroutine:kurey	file:
40	kvdw.os	/^   40             format (4x,i6,8x,2f12.4,f12.3)$/;"	l	subroutine:kvdw	file:
40	lbfgs.os	/^   40       format (\/,' Limited Memory BFGS Quasi-Newton',$/;"	l	subroutine:lbfgs	file:
40	lights.os	/^   40       continue$/;"	l	subroutine:lights	file:
40	makeint.os	/^   40          format (\/,' Already Defined that Atom; Choose Another')$/;"	l	subroutine:makeint	file:
40	makeint.os	/^   40       format (\/,' ADJACENT  --  Atom',i6,' is the only',$/;"	l	function:adjacent	file:
40	mdinit.os	/^   40       format (\/,' MDINIT  --  Atom-based Monte Carlo',$/;"	l	subroutine:mdinit	file:
40	mdsave.os	/^   40    format (' Current Kinetic',5x,f19.8,' Kcal\/mole')$/;"	l	subroutine:mdsave	file:
40	mdstat.os	/^   40       format (i10,3f14.4,f11.2)$/;"	l	subroutine:mdstat	file:
40	mutate.os	/^   40    format (' Free Energy Perturbation :',f15.3,$/;"	l	subroutine:mutate	file:
40	nblist.os	/^   40       format (\/,' CLIST  --  Too many Neighbors;',$/;"	l	subroutine:clist	file:
40	nblist.os	/^   40       format (\/,' MLIST  --  Too many Neighbors;',$/;"	l	subroutine:mlist	file:
40	nblist.os	/^   40       format (\/,' ULIST  --  Too many Neighbors;',$/;"	l	subroutine:ulist	file:
40	nblist.os	/^   40       format (\/,' VLIST  --  Too many Neighbors;',$/;"	l	subroutine:vlist	file:
40	nblist.os	/^   40    continue$/;"	l	subroutine:lightn	file:
40	number.os	/^   40 continue$/;"	l	function:number	file:
40	ocvm.os	/^   40             format (i6,f14.4,f12.4,32x,i9)$/;"	l	subroutine:ocvm	file:
40	picalc.os	/^   40          format (\/,' Modified Pariser-Parr-Pople MOs for',$/;"	l	subroutine:picalc	file:
40	picalc.os	/^   40       format (' Torsion',3x,4(i7,'-',a3),2x,f8.3,2x,'-->',f8.3)$/;"	l	subroutine:pialter	file:
40	picalc.os	/^   40       format (\/,' Total Energy',11x,f12.4,$/;"	l	subroutine:piscf	file:
40	polymer.os	/^   40       format (\/,' POLYMER  --  Warning, Infinite Polymer',$/;"	l	subroutine:polymer	file:
40	pressure.os	/^   40    format (' Pressure (Numerical, 0 K) :',6x,f15.3,$/;"	l	subroutine:ptest	file:
40	prtmol2.os	/^   40 format (3i8)$/;"	l	subroutine:prtmol2	file:
40	prtprm.os	/^   40    format (a1,\/\/,15x,'TINKER Force Field Parameters for ',a20)$/;"	l	subroutine:prtprm	file:
40	readdyn.os	/^   40    format (\/,' READDYN  --  Restart File has Incorrect',$/;"	l	subroutine:readdyn	file:
40	readgau.os	/^   40          format (a120)$/;"	l	subroutine:readgau	file:
40	readint.os	/^   40    format (' READINT  --  The Maximum of',i8,' Atoms',$/;"	l	subroutine:readint	file:
40	readmol.os	/^   40 format (2i3)$/;"	l	subroutine:readmol	file:
40	readmol2.os	/^   40       format (a120)$/;"	l	subroutine:readmol2	file:
40	readpdb.os	/^   40          format (i4)$/;"	l	subroutine:scanpdb	file:
40	readpdb.os	/^   40       format (a1)$/;"	l	subroutine:readpdb	file:
40	readprm.os	/^   40          format (\/,' READPRM  --  Too many Atom Types;',$/;"	l	subroutine:readprm	file:
40	readseq.os	/^   40       continue$/;"	l	subroutine:readseq	file:
40	readxyz.os	/^   40    format (\/,' READXYZ  --  The Maximum of',i8,' Atoms',$/;"	l	subroutine:readxyz	file:
40	rings.os	/^   40       continue$/;"	l	subroutine:rings	file:
40	rotlist.os	/^   40 continue$/;"	l	subroutine:rotlist	file:
40	square.os	/^   40       format (i6,f14.4,2f13.4,2i10)$/;"	l	subroutine:square	file:
40	surface.os	/^   40             continue$/;"	l	subroutine:surface	file:
40	surface.os	/^   40             continue$/;"	l	subroutine:surface1	file:
40	surfatom.os	/^   40          continue$/;"	l	subroutine:surfatom	file:
40	surfatom.os	/^   40          continue$/;"	l	subroutine:surfatom1	file:
40	tncg.os	/^   40       format (\/,' Finite-Difference Truncated-Newton',$/;"	l	subroutine:tncg	file:
40	volume.os	/^   40                   continue$/;"	l	subroutine:volume1	file:
40	zatom.os	/^   40       format (\/,' ZATOM  --  The Maximum of',i8,' Atoms',$/;"	l	subroutine:zatom	file:
400	prtprm.os	/^  400          format (3x,i5,5x,i4,'-',i4,'-',i4,4f12.3)$/;"	l	subroutine:prtprm	file:
400	readprm.os	/^  400       continue$/;"	l	subroutine:readprm	file:
410	prtprm.os	/^  410    continue$/;"	l	subroutine:prtprm	file:
410	readprm.os	/^  410       continue$/;"	l	subroutine:readprm	file:
420	prtprm.os	/^  420    format (\/\/,17x,'5-Membered Ring Bend Parameters',$/;"	l	subroutine:prtprm	file:
420	readprm.os	/^  420       continue$/;"	l	subroutine:readprm	file:
430	prtprm.os	/^  430          format (3x,i5,5x,i4,'-',i4,'-',i4,2f12.3)$/;"	l	subroutine:prtprm	file:
430	readprm.os	/^  430       continue$/;"	l	subroutine:readprm	file:
440	prtprm.os	/^  440          format (3x,i5,5x,i4,'-',i4,'-',i4,4f12.3)$/;"	l	subroutine:prtprm	file:
440	readprm.os	/^  440       continue$/;"	l	subroutine:readprm	file:
450	prtprm.os	/^  450    continue$/;"	l	subroutine:prtprm	file:
450	readprm.os	/^  450       continue$/;"	l	subroutine:readprm	file:
460	prtprm.os	/^  460    format (\/\/,15x,'4-Membered Ring Bend Parameters',$/;"	l	subroutine:prtprm	file:
460	readprm.os	/^  460       continue$/;"	l	subroutine:readprm	file:
470	prtprm.os	/^  470          format (3x,i5,5x,i4,'-',i4,'-',i4,2f12.3)$/;"	l	subroutine:prtprm	file:
470	readprm.os	/^  470       continue$/;"	l	subroutine:readprm	file:
480	prtprm.os	/^  480          format (3x,i5,5x,i4,'-',i4,'-',i4,4f12.3)$/;"	l	subroutine:prtprm	file:
480	readprm.os	/^  480       continue$/;"	l	subroutine:readprm	file:
490	prtprm.os	/^  490    continue$/;"	l	subroutine:prtprm	file:
490	readprm.os	/^  490       continue$/;"	l	subroutine:readprm	file:
50	active.os	/^   50          format (2x,i8,6x,3f9.2,2x,f9.2,7x,i8)$/;"	l	subroutine:active	file:
50	attach.os	/^   50          continue$/;"	l	subroutine:attach	file:
50	chkring.os	/^   50    continue$/;"	l	subroutine:chkring	file:
50	cluster.os	/^   50          format (\/,' List of Atoms in Group',i3,' :',\/)$/;"	l	subroutine:cluster	file:
50	connolly.os	/^   50             continue$/;"	l	subroutine:nearby	file:
50	connolly.os	/^   50             continue$/;"	l	subroutine:vam	file:
50	connolly.os	/^   50       continue$/;"	l	subroutine:place	file:
50	connolly.os	/^   50    continue$/;"	l	subroutine:contact	file:
50	connolly.os	/^   50    continue$/;"	l	subroutine:saddles	file:
50	diagq.os	/^   50    continue$/;"	l	subroutine:diagq	file:
50	diffeq.os	/^   50 continue$/;"	l	subroutine:bsstep	file:
50	ebuck3.os	/^   50       continue$/;"	l	subroutine:ebuck3b	file:
50	echarge3.os	/^   50       continue$/;"	l	subroutine:echarge3b	file:
50	echarge3.os	/^   50       continue$/;"	l	subroutine:echarge3e	file:
50	egauss3.os	/^   50       continue$/;"	l	subroutine:egauss3b	file:
50	egeom3.os	/^   50             format (' Position',2x,i7,'-',a3,4x,4f10.4,f12.4)$/;"	l	subroutine:egeom3	file:
50	ehal3.os	/^   50       continue$/;"	l	subroutine:ehal3b	file:
50	elj3.os	/^   50       continue$/;"	l	subroutine:elj3b	file:
50	embed.os	/^   50             format (' TRIANGLE  --  Altered Upper Bound at',$/;"	l	subroutine:triangle	file:
50	embed.os	/^   50       format (1x,130a1)$/;"	l	subroutine:grafic	file:
50	embed.os	/^   50       format (\/,' Distance Matrix Generated via Triangle',$/;"	l	subroutine:dstmat	file:
50	embed.os	/^   50       format (i6,2f13.4,f12.4,f11.2,2f10.4)$/;"	l	subroutine:explore	file:
50	embed.os	/^   50    format (\/,' Time Required for Eigenvalues :',9x,f12.2,$/;"	l	subroutine:eigen	file:
50	embed.os	/^   50    format (\/,' Time Required for Majorization :',8x,f12.2,$/;"	l	subroutine:majorize	file:
50	embed.os	/^   50 format (\/,' Results of Distance Geometry Protocol :',$/;"	l	subroutine:embed	file:
50	emm3hb3.os	/^   50       continue$/;"	l	subroutine:emm3hb3b	file:
50	esolv3.os	/^   50       format (\/,' Implicit Solvation Energy Components :'$/;"	l	subroutine:esolv3	file:
50	esolv3.os	/^   50    format (\/,' Total Onion Dispersion Energy :',5x,f12.4)$/;"	l	subroutine:ewca3x	file:
50	flatten.os	/^   50          format (\/,' Enter the Potential Surface Smoothing',$/;"	l	subroutine:flatten	file:
50	getkey.os	/^   50          format ()$/;"	l	subroutine:getkey	file:
50	getprm.os	/^   50    continue$/;"	l	subroutine:getprm	file:
50	hybrid.os	/^   50                format (1x,4i5,4x,3(f10.4,f7.1))$/;"	l	subroutine:himptor	file:
50	hybrid.os	/^   50             format (3x,4i5,3f12.3)$/;"	l	subroutine:hstrtor	file:
50	hybrid.os	/^   50          format (6x,2i5,2f15.3)$/;"	l	subroutine:hdipole	file:
50	induce.os	/^   50                format (\/,4x,'Atom',14x,'X',11x,'Y',11x,'Z',$/;"	l	subroutine:induce	file:
50	inertia.os	/^   50    format (3(\/,11x,f16.3,10x,3f12.6))$/;"	l	subroutine:inertia	file:
50	initrot.os	/^   50       format (a120)$/;"	l	subroutine:initrot	file:
50	kangle.os	/^   50                format (4x,3i4,2x,2f12.3,3x,'1-H''s')$/;"	l	subroutine:kangle	file:
50	kangtor.os	/^   50       continue$/;"	l	subroutine:kangtor	file:
50	katom.os	/^   50             format (\/,' Additional Atom Types for',$/;"	l	subroutine:katom	file:
50	kbond.os	/^   50          format (\/,' KBOND  --  Too many Bond Stretching',$/;"	l	subroutine:kbond	file:
50	kbond.os	/^   50       continue$/;"	l	subroutine:keneg	file:
50	kcharge.os	/^   50             format (\/,' Additional Partial Charges for',$/;"	l	subroutine:kcharge	file:
50	kdipole.os	/^   50             format (\/,' KDIPOLE  --  Too many Bond Dipole',$/;"	l	subroutine:kdipole	file:
50	kewald.os	/^   50    format (\/,' Smooth Particle Mesh Ewald Parameters :',$/;"	l	subroutine:kewald	file:
50	kgeom.os	/^   50       continue$/;"	l	subroutine:kgeom	file:
50	kimprop.os	/^   50       continue$/;"	l	subroutine:kimprop	file:
50	kimptor.os	/^   50       continue$/;"	l	subroutine:kimptor	file:
50	kmpole.os	/^   50       continue$/;"	l	subroutine:kmpole	file:
50	kopbend.os	/^   50       continue$/;"	l	subroutine:kopbend	file:
50	kopdist.os	/^   50       continue$/;"	l	subroutine:kopdist	file:
50	korbit.os	/^   50       continue$/;"	l	subroutine:korbit	file:
50	kpitors.os	/^   50       continue$/;"	l	subroutine:kpitors	file:
50	kpolar.os	/^   50             format (\/,' KPOLAR  --  Too many Dipole',$/;"	l	subroutine:kpolar	file:
50	kpolar.os	/^   50 continue$/;"	l	subroutine:polargrp	file:
50	ksolv.os	/^   50       continue$/;"	l	subroutine:kpb	file:
50	ksolv.os	/^   50    continue$/;"	l	subroutine:ksolv	file:
50	kstrbnd.os	/^   50       continue$/;"	l	subroutine:kstrbnd	file:
50	kstrtor.os	/^   50       continue$/;"	l	subroutine:kstrtor	file:
50	ktors.os	/^   50          format (\/,' KTORS  --  Too many Torsional Angle',$/;"	l	subroutine:ktors	file:
50	ktortor.os	/^   50       continue$/;"	l	subroutine:ktortor	file:
50	kurey.os	/^   50       continue$/;"	l	subroutine:kurey	file:
50	kvdw.os	/^   50          format (\/,' KVDW  --  Only Atom Classes through',i4,$/;"	l	subroutine:kvdw	file:
50	lbfgs.os	/^   50       format (\/,' QN Iter     F Value      G RMS     F Move',$/;"	l	subroutine:lbfgs	file:
50	lights.os	/^   50       continue$/;"	l	subroutine:lights	file:
50	makeint.os	/^   50             format (\/,' MAKEINT  --  Connectivity Error',$/;"	l	subroutine:makeint	file:
50	makeint.os	/^   50    continue$/;"	l	function:adjacent	file:
50	mdinit.os	/^   50    format (\/,' Number of Degrees of Freedom for Dynamics :',i10)$/;"	l	subroutine:mdinit	file:
50	mdsave.os	/^   50    format (\/,' Current Time',8x,f17.6,' Picosecond')$/;"	l	subroutine:mdsave	file:
50	mdstat.os	/^   50    format (\/,' Average Values for the Last',i6,' Out of',$/;"	l	subroutine:mdstat	file:
50	mutate.os	/^   50    format (' Free Energy Perturbation :',f15.3,$/;"	l	subroutine:mutate	file:
50	nblist.os	/^   50    continue$/;"	l	subroutine:lightn	file:
50	ocvm.os	/^   50             format (i6,d14.4,d12.4,32x,i9)$/;"	l	subroutine:ocvm	file:
50	picalc.os	/^   50       format (\/,' Core Integrals',9x,f12.4,$/;"	l	subroutine:piscf	file:
50	pressure.os	/^   50    format (\/,' Pressure (Analytical,',i4,' K) :',3x,f15.3,$/;"	l	subroutine:ptest	file:
50	prtmol2.os	/^   50 format ('SMALL')$/;"	l	subroutine:prtmol2	file:
50	prtprm.os	/^   50       format (\/\/,15x,'Van der Waals Parameters',$/;"	l	subroutine:prtprm	file:
50	readdyn.os	/^   50 format ()$/;"	l	subroutine:readdyn	file:
50	readgau.os	/^   50          format (a120)$/;"	l	subroutine:readgau	file:
50	readint.os	/^   50       format (a120)$/;"	l	subroutine:readint	file:
50	readmol.os	/^   50    format (\/,' READMOL  --  The Coordinate File Does Not',$/;"	l	subroutine:readmol	file:
50	readmol2.os	/^   50 continue$/;"	l	subroutine:readmol2	file:
50	readpdb.os	/^   50       format (a1)$/;"	l	subroutine:scanpdb	file:
50	readpdb.os	/^   50       format (a3)$/;"	l	subroutine:readpdb	file:
50	readprm.os	/^   50          format (\/,' READPRM  --  Too many Atom Classes;',$/;"	l	subroutine:readprm	file:
50	readseq.os	/^   50    continue$/;"	l	subroutine:readseq	file:
50	readxyz.os	/^   50       format (a120)$/;"	l	subroutine:readxyz	file:
50	rings.os	/^   50                format (\/,' RINGS  --  Too many 5-Membered Rings;',    $/;"	l	subroutine:rings	file:
50	rotlist.os	/^   50       continue$/;"	l	subroutine:rotlist	file:
50	square.os	/^   50       format (i6,f14.4,2d13.4,2i10)$/;"	l	subroutine:square	file:
50	surface.os	/^   50             continue$/;"	l	subroutine:surface	file:
50	surface.os	/^   50             continue$/;"	l	subroutine:surface1	file:
50	surfatom.os	/^   50          continue$/;"	l	subroutine:surfatom	file:
50	surfatom.os	/^   50          continue$/;"	l	subroutine:surfatom1	file:
50	tncg.os	/^   50       format (\/,' Variable-Mode Truncated-Newton',$/;"	l	subroutine:tncg	file:
50	volume.os	/^   50    continue$/;"	l	subroutine:volume1	file:
500	prtprm.os	/^  500    format (\/\/,15x,'3-Membered Ring Bend Parameters',$/;"	l	subroutine:prtprm	file:
500	readprm.os	/^  500       continue$/;"	l	subroutine:readprm	file:
510	prtprm.os	/^  510          format (3x,i5,5x,i4,'-',i4,'-',i4,2f12.3)$/;"	l	subroutine:prtprm	file:
510	readprm.os	/^  510       continue$/;"	l	subroutine:readprm	file:
520	prtprm.os	/^  520          format (3x,i5,5x,i4,'-',i4,'-',i4,4f12.3)$/;"	l	subroutine:prtprm	file:
520	readprm.os	/^  520          format (\/,' READPRM  --  Too many Biopolymer Types;',$/;"	l	subroutine:readprm	file:
530	prtprm.os	/^  530    continue$/;"	l	subroutine:prtprm	file:
530	readprm.os	/^  530       continue$/;"	l	subroutine:readprm	file:
540	prtprm.os	/^  540    format (\/\/,15x,'Fourier Angle Bending Parameters',$/;"	l	subroutine:prtprm	file:
540	readprm.os	/^  540       continue$/;"	l	subroutine:readprm	file:
550	prtprm.os	/^  550       format (3x,i5,5x,i4,'-',i4,'-',i4,3f12.3)$/;"	l	subroutine:prtprm	file:
550	readprm.os	/^  550       continue$/;"	l	subroutine:readprm	file:
560	prtprm.os	/^  560    continue$/;"	l	subroutine:prtprm	file:
560	readprm.os	/^  560       continue$/;"	l	subroutine:readprm	file:
570	prtprm.os	/^  570    format (\/\/,15x,'Higher Order Bending Constants',$/;"	l	subroutine:prtprm	file:
570	readprm.os	/^  570       continue$/;"	l	subroutine:readprm	file:
580	prtprm.os	/^  580    format (a1,\/\/,15x,'TINKER Force Field Parameters for ',a20)$/;"	l	subroutine:prtprm	file:
580	readprm.os	/^  580       continue$/;"	l	subroutine:readprm	file:
590	prtprm.os	/^  590    format (\/\/,15x,'Stretch-Bend Parameters',$/;"	l	subroutine:prtprm	file:
590	readprm.os	/^  590       continue$/;"	l	subroutine:readprm	file:
60	active.os	/^   60       continue$/;"	l	subroutine:active	file:
60	attach.os	/^   60       format (\/,' ATTACH  --  Too many 1-5 Connected Atoms',$/;"	l	subroutine:attach	file:
60	cluster.os	/^   60          format (3x,10i7)$/;"	l	subroutine:cluster	file:
60	connolly.os	/^   60             continue$/;"	l	subroutine:nearby	file:
60	connolly.os	/^   60             continue$/;"	l	subroutine:vam	file:
60	connolly.os	/^   60       continue$/;"	l	subroutine:contact	file:
60	connolly.os	/^   60       continue$/;"	l	subroutine:place	file:
60	connolly.os	/^   60    continue$/;"	l	subroutine:saddles	file:
60	egeom3.os	/^   60             format (\/,' Individual Interatomic Distance',$/;"	l	subroutine:egeom3	file:
60	embed.os	/^   60          format (i6,2f13.4,f12.4,f11.2,2f10.4)$/;"	l	subroutine:explore	file:
60	embed.os	/^   60       format (\/,' Distance Matrix Generated via',i4,'-Atom',$/;"	l	subroutine:dstmat	file:
60	embed.os	/^   60    format (\/,1x,130a1)$/;"	l	subroutine:grafic	file:
60	embed.os	/^   60 format (\/,' Radius of Gyration after Refinement  :',6x,f16.4)$/;"	l	subroutine:embed	file:
60	esolv3.os	/^   60       format (\/,' Implicit Solvation Energy Components :'$/;"	l	subroutine:esolv3	file:
60	flatten.os	/^   60       format (a120)$/;"	l	subroutine:flatten	file:
60	getkey.os	/^   60          format ()$/;"	l	subroutine:getkey	file:
60	induce.os	/^   60             format (i8,3x,4f16.8)$/;"	l	subroutine:induce	file:
60	initrot.os	/^   60       format (\/,' INITROT  --  Bond between Atoms',2i6,$/;"	l	subroutine:initrot	file:
60	kangle.os	/^   60                format (4x,3i4,2x,2f12.3,3x,'2-H''s')$/;"	l	subroutine:kangle	file:
60	kangtor.os	/^   60             continue$/;"	l	subroutine:kangtor	file:
60	katom.os	/^   60             format (2x,i6,1x,i6,5x,a3,3x,a24,i6,f11.3,i6)$/;"	l	subroutine:katom	file:
60	kbond.os	/^   60          continue$/;"	l	subroutine:kbond	file:
60	kbond.os	/^   60 continue$/;"	l	subroutine:keneg	file:
60	kcharge.os	/^   60             format (4x,i6,8x,f12.4)$/;"	l	subroutine:kcharge	file:
60	kdipole.os	/^   60             format (\/,' KDIPOLE  --  Too many 5-Ring Bond',$/;"	l	subroutine:kdipole	file:
60	kgeom.os	/^   60          format (\/,' KGEOM  --  Too many Distance Restraints;',$/;"	l	subroutine:kgeom	file:
60	kmpole.os	/^   60    format (\/,' KMPOLE  --  Too many Atomic Multipole',$/;"	l	subroutine:kmpole	file:
60	kopbend.os	/^   60 continue$/;"	l	subroutine:kopbend	file:
60	kopdist.os	/^   60          continue$/;"	l	subroutine:kopdist	file:
60	korbit.os	/^   60             format (\/,' Additional Pisystem Bond Parameters :',$/;"	l	subroutine:korbit	file:
60	kpitors.os	/^   60       continue$/;"	l	subroutine:kpitors	file:
60	kpolar.os	/^   60          continue$/;"	l	subroutine:kpolar	file:
60	kpolar.os	/^   60       format (\/,' POLARGRP  --  Too many Atoms',$/;"	l	subroutine:polargrp	file:
60	ksolv.os	/^   60       continue$/;"	l	subroutine:kpb	file:
60	kstrbnd.os	/^   60       continue$/;"	l	subroutine:kstrbnd	file:
60	kstrtor.os	/^   60             continue$/;"	l	subroutine:kstrtor	file:
60	ktors.os	/^   60          continue$/;"	l	subroutine:ktors	file:
60	ktortor.os	/^   60             format (\/,' KTORTOR  --  Warning, Unequal Tor-Tor',$/;"	l	subroutine:ktortor	file:
60	kurey.os	/^   60       continue$/;"	l	subroutine:kurey	file:
60	kvdw.os	/^   60          continue$/;"	l	subroutine:kvdw	file:
60	lbfgs.os	/^   60       format (i6,f14.4,f11.4,29x,i7)$/;"	l	subroutine:lbfgs	file:
60	lights.os	/^   60       continue$/;"	l	subroutine:lights	file:
60	makeint.os	/^   60             format (\/,' MAKEINT  --  Connectivity Error',$/;"	l	subroutine:makeint	file:
60	makeint.os	/^   60       format (' Choose a Connected Atom (',2i6,') :  ',$)$/;"	l	function:adjacent	file:
60	mdinit.os	/^   60    format (\/,' MDINIT  --  No Degrees of Freedom for Dynamics')$/;"	l	subroutine:mdinit	file:
60	mdsave.os	/^   60    format (' Current Potential',3x,f17.6,' Kcal\/mole')$/;"	l	subroutine:mdsave	file:
60	mdstat.os	/^   60       format (\/,' Simulation Time',5x,f19.8,' Picosecond')$/;"	l	subroutine:mdstat	file:
60	nblist.os	/^   60    continue$/;"	l	subroutine:lightn	file:
60	ocvm.os	/^   60             format (i6,f14.4,f12.4,f11.4,f10.4,f11.4,i9)$/;"	l	subroutine:ocvm	file:
60	picalc.os	/^   60       format (\/,' Orbital Energies')$/;"	l	subroutine:piscf	file:
60	pressure.os	/^   60    format (' Pressure (Numerical,',i4,' K) :',4x,f15.3,$/;"	l	subroutine:ptest	file:
60	prtmol2.os	/^   60 format ('NO_CHARGES')$/;"	l	subroutine:prtmol2	file:
60	prtprm.os	/^   60       format (\/\/,15x,'Van der Waals Parameters',$/;"	l	subroutine:prtprm	file:
60	readdyn.os	/^   60 format (a120)$/;"	l	subroutine:readdyn	file:
60	readgau.os	/^   60       continue$/;"	l	subroutine:readgau	file:
60	readint.os	/^   60    continue$/;"	l	subroutine:readint	file:
60	readmol.os	/^   60    format (\/,' READMOL  --  The Maximum of',i8,' Atoms',$/;"	l	subroutine:readmol	file:
60	readmol2.os	/^   60    format (\/,' READMOL2  --  The Coordinate File Does Not',$/;"	l	subroutine:readmol2	file:
60	readpdb.os	/^   60       format (a1)$/;"	l	subroutine:readpdb	file:
60	readpdb.os	/^   60 continue$/;"	l	subroutine:scanpdb	file:
60	readprm.os	/^   60          continue$/;"	l	subroutine:readprm	file:
60	readseq.os	/^   60          continue$/;"	l	subroutine:readseq	file:
60	readxyz.os	/^   60       continue$/;"	l	subroutine:readxyz	file:
60	rings.os	/^   60       continue$/;"	l	subroutine:rings	file:
60	rotlist.os	/^   60       continue$/;"	l	subroutine:rotlist	file:
60	square.os	/^   60 continue$/;"	l	subroutine:square	file:
60	surface.os	/^   60             continue$/;"	l	subroutine:surface	file:
60	surface.os	/^   60             continue$/;"	l	subroutine:surface1	file:
60	surfatom.os	/^   60          continue$/;"	l	subroutine:surfatom	file:
60	surfatom.os	/^   60          continue$/;"	l	subroutine:surfatom1	file:
60	tncg.os	/^   60    format (\/,' Algorithm : ',a6,5x,'Preconditioning : ',a6,5x,$/;"	l	subroutine:tncg	file:
600	prtprm.os	/^  600       format (3x,i5,5x,i4,'-',i4,'-',i4,2f12.3)$/;"	l	subroutine:prtprm	file:
600	readprm.os	/^  600       continue$/;"	l	subroutine:readprm	file:
610	prtprm.os	/^  610    continue$/;"	l	subroutine:prtprm	file:
610	readprm.os	/^  610       continue$/;"	l	subroutine:readprm	file:
620	prtprm.os	/^  620    format (a1,\/\/,15x,'TINKER Force Field Parameters for ',a20)$/;"	l	subroutine:prtprm	file:
620	readprm.os	/^  620       continue$/;"	l	subroutine:readprm	file:
630	prtprm.os	/^  630    format (\/\/,15x,'Urey-Bradley Parameters',$/;"	l	subroutine:prtprm	file:
630	readprm.os	/^  630       continue$/;"	l	subroutine:readprm	file:
640	prtprm.os	/^  640       format (3x,i5,5x,i4,'-',i4,'-',i4,f12.3,f12.4)$/;"	l	subroutine:prtprm	file:
640	readprm.os	/^  640       continue$/;"	l	subroutine:readprm	file:
650	prtprm.os	/^  650    continue$/;"	l	subroutine:prtprm	file:
650	readprm.os	/^  650       continue$/;"	l	subroutine:readprm	file:
660	prtprm.os	/^  660    format (\/\/,15x,'Higher Order Urey-Bradley Constants',$/;"	l	subroutine:prtprm	file:
660	readprm.os	/^  660       continue$/;"	l	subroutine:readprm	file:
670	prtprm.os	/^  670    format (a1,\/\/,15x,'TINKER Force Field Parameters for ',a20)$/;"	l	subroutine:prtprm	file:
680	prtprm.os	/^  680    format (\/\/,15x,'Angle-Angle Parameters',$/;"	l	subroutine:prtprm	file:
690	prtprm.os	/^  690          format (8x,i5,7x,i4,3x,3f12.3)$/;"	l	subroutine:prtprm	file:
70	active.os	/^   70    format (\/,' List of Active Atoms for Energy',$/;"	l	subroutine:active	file:
70	cluster.os	/^   70                format (\/,' Active Sets of Intra- and InterGroup',$/;"	l	subroutine:cluster	file:
70	connolly.os	/^   70             continue$/;"	l	subroutine:vam	file:
70	connolly.os	/^   70    continue$/;"	l	subroutine:contact	file:
70	connolly.os	/^   70    continue$/;"	l	subroutine:nearby	file:
70	connolly.os	/^   70    continue$/;"	l	subroutine:place	file:
70	connolly.os	/^   70    continue$/;"	l	subroutine:saddles	file:
70	egeom3.os	/^   70          format (' Distance',2x,2(i7,'-',a3),$/;"	l	subroutine:egeom3	file:
70	embed.os	/^   70       format ()$/;"	l	subroutine:grafic	file:
70	embed.os	/^   70       format (\/,' Distance Matrix Generated via Randomized',$/;"	l	subroutine:dstmat	file:
70	embed.os	/^   70       format (\/,' EXPLORE  --  Simulated Annealing Unstable;',$/;"	l	subroutine:explore	file:
70	flatten.os	/^   70       continue$/;"	l	subroutine:flatten	file:
70	getkey.os	/^   70          format (a)$/;"	l	subroutine:getkey	file:
70	induce.os	/^   70             format (i8,4x,4f14.6)$/;"	l	subroutine:induce	file:
70	initrot.os	/^   70       continue$/;"	l	subroutine:initrot	file:
70	kangle.os	/^   70                format (4x,3i4,2x,2f12.3,3x,a6)$/;"	l	subroutine:kangle	file:
70	kangtor.os	/^   70       continue$/;"	l	subroutine:kangtor	file:
70	katom.os	/^   70       continue$/;"	l	subroutine:katom	file:
70	kbond.os	/^   70          format (\/,' KBOND  --  Too many 5-Ring Stretching',$/;"	l	subroutine:kbond	file:
70	kbond.os	/^   70       continue$/;"	l	subroutine:keneg	file:
70	kcharge.os	/^   70       continue$/;"	l	subroutine:kcharge	file:
70	kdipole.os	/^   70             format (\/,' KDIPOLE  --  Too many 4-Ring Bond',$/;"	l	subroutine:kdipole	file:
70	kgeom.os	/^   70       continue$/;"	l	subroutine:kgeom	file:
70	kmpole.os	/^   70       continue$/;"	l	subroutine:kmpole	file:
70	kopbend.os	/^   70          continue$/;"	l	subroutine:kopbend	file:
70	korbit.os	/^   70             format (6x,2i4,5x,2f11.3)$/;"	l	subroutine:korbit	file:
70	kpolar.os	/^   70             format (\/,' Additional Dipole Polarizabilities',$/;"	l	subroutine:kpolar	file:
70	kpolar.os	/^   70 continue$/;"	l	subroutine:polargrp	file:
70	ksolv.os	/^   70       continue$/;"	l	subroutine:kpb	file:
70	kstrtor.os	/^   70             continue$/;"	l	subroutine:kstrtor	file:
70	ktors.os	/^   70          format (\/,' KTORS  --  Too many 5-Ring Torsional',$/;"	l	subroutine:ktors	file:
70	ktortor.os	/^   70             format (\/,' KTORTOR  --  Warning, Unequal Tor-Tor',$/;"	l	subroutine:ktortor	file:
70	kvdw.os	/^   70                format (\/,' Additional 1-4 van der Waals',$/;"	l	subroutine:kvdw	file:
70	lbfgs.os	/^   70       format (i6,d14.4,d11.4,29x,i7)$/;"	l	subroutine:lbfgs	file:
70	lights.os	/^   70       continue$/;"	l	subroutine:lights	file:
70	makeint.os	/^   70          format (\/,' Specify with Dihedral Angle or Second',$/;"	l	subroutine:makeint	file:
70	makeint.os	/^   70       format (' Choose a Connected Atom (',3i6,') :  ',$)$/;"	l	function:adjacent	file:
70	mdsave.os	/^   70    format (' Current Kinetic',5x,f17.6,' Kcal\/mole')$/;"	l	subroutine:mdsave	file:
70	mdstat.os	/^   70       format (\/,' Simulation Time',5x,f17.6,' Picosecond')$/;"	l	subroutine:mdstat	file:
70	nblist.os	/^   70    continue$/;"	l	subroutine:lightn	file:
70	ocvm.os	/^   70             format (i6,d14.4,d12.4,d11.4,f10.4,f11.4,i9)$/;"	l	subroutine:ocvm	file:
70	picalc.os	/^   70       format (8f9.4)$/;"	l	subroutine:piscf	file:
70	prtmol2.os	/^   70 format (\/,'@<TRIPOS>ATOM')$/;"	l	subroutine:prtmol2	file:
70	prtprm.os	/^   70          format (10x,i5,5x,i4,2x,3f12.3)$/;"	l	subroutine:prtprm	file:
70	readdyn.os	/^   70 format (a120)$/;"	l	subroutine:readdyn	file:
70	readgau.os	/^   70 continue$/;"	l	subroutine:readgau	file:
70	readint.os	/^   70 continue$/;"	l	subroutine:readint	file:
70	readmol.os	/^   70    format (3f10.4,1x,a3)$/;"	l	subroutine:readmol	file:
70	readmol2.os	/^   70    format (\/,' READMOL2  --  The Maximum of',i8,' Atoms',$/;"	l	subroutine:readmol2	file:
70	readpdb.os	/^   70          format (i4)$/;"	l	subroutine:readpdb	file:
70	readpdb.os	/^   70       format (\/,' Enter the Chain Names to Include',$/;"	l	subroutine:scanpdb	file:
70	readprm.os	/^   70       continue$/;"	l	subroutine:readprm	file:
70	readseq.os	/^   70       continue$/;"	l	subroutine:readseq	file:
70	readxyz.os	/^   70    continue$/;"	l	subroutine:readxyz	file:
70	rings.os	/^   70                   format (\/,' RINGS  --  Too many 6-Membered',$/;"	l	subroutine:rings	file:
70	square.os	/^   70       format (i6,f14.4,2f13.4,2i10)$/;"	l	subroutine:square	file:
70	surface.os	/^   70                   format (\/,' SURFACE  --  Increase the Value',$/;"	l	subroutine:surface	file:
70	surface.os	/^   70                   format (\/,' SURFACE1  --  Increase the Value',$/;"	l	subroutine:surface1	file:
70	surfatom.os	/^   70                format (\/,' SURFATOM  --  Increase the Value',$/;"	l	subroutine:surfatom	file:
70	surfatom.os	/^   70                format (\/,' SURFATOM  --  Increase the Value',$/;"	l	subroutine:surfatom1	file:
70	tncg.os	/^   70    format (\/,' TN Iter    F Value       G RMS     F Move  ',$/;"	l	subroutine:tncg	file:
700	prtprm.os	/^  700    format (a1,\/\/,15x,'TINKER Force Field Parameters for ',a20)$/;"	l	subroutine:prtprm	file:
710	prtprm.os	/^  710    format (\/\/,15x,'Out-of-Plane Bend Parameters',$/;"	l	subroutine:prtprm	file:
720	prtprm.os	/^  720       format (8x,i5,5x,i4,'-',i4,'-',i4,'-',i4,f12.3)$/;"	l	subroutine:prtprm	file:
730	prtprm.os	/^  730    continue$/;"	l	subroutine:prtprm	file:
740	prtprm.os	/^  740    format (a1,\/\/,15x,'TINKER Force Field Parameters for ',a20)$/;"	l	subroutine:prtprm	file:
750	prtprm.os	/^  750    format (\/\/,15x,'Out-of-Plane Distance Parameters',$/;"	l	subroutine:prtprm	file:
760	prtprm.os	/^  760       format (8x,i5,5x,i4,'-',i4,'-',i4,'-',i4,f12.3)$/;"	l	subroutine:prtprm	file:
770	prtprm.os	/^  770    continue$/;"	l	subroutine:prtprm	file:
780	prtprm.os	/^  780    format (a1,\/\/,15x,'TINKER Force Field Parameters for ',a20)$/;"	l	subroutine:prtprm	file:
790	prtprm.os	/^  790    format (\/\/,15x,'Improper Dihedral Parameters',$/;"	l	subroutine:prtprm	file:
80	active.os	/^   80    format (3x,10i7)$/;"	l	subroutine:active	file:
80	cluster.os	/^   80                format (5x,2i6,12x,'IntraGroup',5x,f12.4)$/;"	l	subroutine:cluster	file:
80	connolly.os	/^   80          continue$/;"	l	subroutine:place	file:
80	connolly.os	/^   80          continue$/;"	l	subroutine:vam	file:
80	connolly.os	/^   80    continue$/;"	l	subroutine:contact	file:
80	connolly.os	/^   80    continue$/;"	l	subroutine:saddles	file:
80	egeom3.os	/^   80                format (\/,' Individual Interatomic Angle',$/;"	l	subroutine:egeom3	file:
80	embed.os	/^   80       format (\/,' Distance Matrix Generated via',i4,'-Atom',$/;"	l	subroutine:dstmat	file:
80	embed.os	/^   80 continue$/;"	l	subroutine:explore	file:
80	getkey.os	/^   80    continue$/;"	l	subroutine:getkey	file:
80	induce.os	/^   80             format (i8,5x,4f12.4)$/;"	l	subroutine:induce	file:
80	initrot.os	/^   80    continue$/;"	l	subroutine:initrot	file:
80	kangle.os	/^   80                format (4x,3i4,2x,2f12.3,3x,a6,3x,'0-H''s')$/;"	l	subroutine:kangle	file:
80	katom.os	/^   80          format (\/,' Undefined Atom Types or Classes :',$/;"	l	subroutine:katom	file:
80	kbond.os	/^   80          continue$/;"	l	subroutine:kbond	file:
80	kbond.os	/^   80       continue$/;"	l	subroutine:keneg	file:
80	kdipole.os	/^   80             format (\/,' KDIPOLE  --  Too many 3-Ring Bond',$/;"	l	subroutine:kdipole	file:
80	kgeom.os	/^   80       continue$/;"	l	subroutine:kgeom	file:
80	kmpole.os	/^   80       continue$/;"	l	subroutine:kmpole	file:
80	kopbend.os	/^   80                format (\/,' Undefined Out-of-Plane Bend',$/;"	l	subroutine:kopbend	file:
80	korbit.os	/^   80             format (6x,2i4,5x,2f11.3,3x,a6)$/;"	l	subroutine:korbit	file:
80	kpolar.os	/^   80             format (4x,i6,10x,f10.3,2x,f10.3)$/;"	l	subroutine:kpolar	file:
80	kpolar.os	/^   80       format (\/,' POLARGRP  --  Too many Atoms',$/;"	l	subroutine:polargrp	file:
80	ksolv.os	/^   80       continue$/;"	l	subroutine:kpb	file:
80	kstrtor.os	/^   80             continue$/;"	l	subroutine:kstrtor	file:
80	ktors.os	/^   80          continue$/;"	l	subroutine:ktors	file:
80	ktortor.os	/^   80    continue$/;"	l	subroutine:ktortor	file:
80	kvdw.os	/^   80                format (\/,' Additional 1-4 van der Waals',$/;"	l	subroutine:kvdw	file:
80	lbfgs.os	/^   80             format (i6,f14.4,f11.4,f11.4,f10.4,f8.2,i7,3x,a9)$/;"	l	subroutine:lbfgs	file:
80	makeint.os	/^   80          format (a120)$/;"	l	subroutine:makeint	file:
80	makeint.os	/^   80       format (' Choose a Connected Atom (',4i6,') :  ',$)$/;"	l	function:adjacent	file:
80	mdsave.os	/^   80    format (\/,' Current Time',8x,f15.4,' Picosecond')$/;"	l	subroutine:mdsave	file:
80	mdstat.os	/^   80       format (\/,' Simulation Time',5x,f15.4,' Picosecond')$/;"	l	subroutine:mdstat	file:
80	ocvm.os	/^   80                format (i6,f14.4,f12.4,f11.4,f10.4,f11.4,i9)$/;"	l	subroutine:ocvm	file:
80	picalc.os	/^   80       format (\/,' Molecular Orbitals')$/;"	l	subroutine:piscf	file:
80	prtmol2.os	/^   80    format (i8,3x,a7,2x,3f12.6,3x,a4)$/;"	l	subroutine:prtmol2	file:
80	prtprm.os	/^   80    format (\/\/,15x,'Van der Waals Scaling Factors',$/;"	l	subroutine:prtprm	file:
80	readdyn.os	/^   80 format ()$/;"	l	subroutine:readdyn	file:
80	readgau.os	/^   80    format (a120)$/;"	l	subroutine:readgau	file:
80	readint.os	/^   80    format (' READZ  --  Error in Z-Matrix File at Atom',i6)$/;"	l	subroutine:readint	file:
80	readmol.os	/^   80    format (2i3)$/;"	l	subroutine:readmol	file:
80	readmol2.os	/^   80    format (a120)$/;"	l	subroutine:readmol2	file:
80	readpdb.os	/^   80       format (a1)$/;"	l	subroutine:readpdb	file:
80	readpdb.os	/^   80       format (a20)$/;"	l	subroutine:scanpdb	file:
80	readprm.os	/^   80       continue$/;"	l	subroutine:readprm	file:
80	readxyz.os	/^   80 continue$/;"	l	subroutine:readxyz	file:
80	rings.os	/^   80                continue$/;"	l	subroutine:rings	file:
80	square.os	/^   80       format (i6,f14.4,2d13.4,2i10)$/;"	l	subroutine:square	file:
80	surface.os	/^   80                   format (\/,' SURFACE  --  Increase the Value',$/;"	l	subroutine:surface	file:
80	surface.os	/^   80                   format (\/,' SURFACE1  --  Increase the Value',$/;"	l	subroutine:surface1	file:
80	surfatom.os	/^   80                format (\/,' SURFATOM  --  Increase the Value',$/;"	l	subroutine:surfatom	file:
80	surfatom.os	/^   80                format (\/,' SURFATOM  --  Increase the Value',$/;"	l	subroutine:surfatom1	file:
80	tncg.os	/^   80       format (i6,f13.4,f12.4,41x,i7)$/;"	l	subroutine:tncg	file:
800	prtprm.os	/^  800       format (2x,i5,5x,i4,'-',i4,'-',i4,'-',i4,f12.3,f12.4)$/;"	l	subroutine:prtprm	file:
810	prtprm.os	/^  810    continue$/;"	l	subroutine:prtprm	file:
820	prtprm.os	/^  820    format (a1,\/\/,15x,'TINKER Force Field Parameters for ',a20)$/;"	l	subroutine:prtprm	file:
830	prtprm.os	/^  830    format (\/\/,15x,'Improper Torsion Parameters',$/;"	l	subroutine:prtprm	file:
840	prtprm.os	/^  840       format (2x,i5,2x,i4,'-',i4,'-',i4,'-',i4,2x,3(f8.3,f6.1,i2))$/;"	l	subroutine:prtprm	file:
850	prtprm.os	/^  850    continue$/;"	l	subroutine:prtprm	file:
860	prtprm.os	/^  860    format (a1,\/\/,15x,'TINKER Force Field Parameters for ',a20)$/;"	l	subroutine:prtprm	file:
870	prtprm.os	/^  870    format (\/\/,15x,'Torsional Parameters',$/;"	l	subroutine:prtprm	file:
880	prtprm.os	/^  880       format (2x,i5,2x,i4,'-',i4,'-',i4,'-',i4,2x,6(f8.3,f6.1,i2))$/;"	l	subroutine:prtprm	file:
890	prtprm.os	/^  890    continue$/;"	l	subroutine:prtprm	file:
9	readnc.f90	/^    9 format (\/, ' Use Amber NetCDF File : ', $)$/;"	l	subroutine:getnetcdf	file:
9	readtrr.f90	/^    9 format (\/, ' Use Gromacs Trr File : ', $)$/;"	l	subroutine:gettrr	file:
90	cluster.os	/^   90                format (5x,2i6,12x,'InterGroup',5x,f12.4)$/;"	l	subroutine:cluster	file:
90	connolly.os	/^   90          continue$/;"	l	subroutine:contact	file:
90	connolly.os	/^   90          continue$/;"	l	subroutine:place	file:
90	connolly.os	/^   90       continue$/;"	l	subroutine:vam	file:
90	egeom3.os	/^   90             format (' Angle',8x,3i6,8x,2f8.2,f10.4,f12.4)$/;"	l	subroutine:egeom3	file:
90	embed.os	/^   90       format (\/,' Distance Matrix Generated via',f6.2,'%',$/;"	l	subroutine:dstmat	file:
90	induce.os	/^   90                format (\/,' SCRF Induced Dipole Moments',$/;"	l	subroutine:induce	file:
90	initrot.os	/^   90       format (\/,' Enter Atoms in Frozen Bond',i5,' :  ',$)$/;"	l	subroutine:initrot	file:
90	kangle.os	/^   90                format (4x,3i4,2x,2f12.3,3x,a6,3x,'1-H''s')$/;"	l	subroutine:kangle	file:
90	katom.os	/^   90       format (' Atom',12x,i5,10x,i5,10x,i5)$/;"	l	subroutine:katom	file:
90	kbond.os	/^   90          format (\/,' KBOND  --  Too many 4-Ring Stretching',$/;"	l	subroutine:kbond	file:
90	kdipole.os	/^   90       continue$/;"	l	subroutine:kdipole	file:
90	kgeom.os	/^   90          format (\/,' KGEOM  --  Too many Angle Restraints;',$/;"	l	subroutine:kgeom	file:
90	kmpole.os	/^   90       continue$/;"	l	subroutine:kmpole	file:
90	kopbend.os	/^   90             format (' Angle-OP',3x,4(i6,'-',a3),5x,4i5)$/;"	l	subroutine:kopbend	file:
90	korbit.os	/^   90          format (\/,' KORBIT  --  Too many Pisystem Bond',$/;"	l	subroutine:korbit	file:
90	kpolar.os	/^   90 continue$/;"	l	subroutine:polargrp	file:
90	ksolv.os	/^   90       continue$/;"	l	subroutine:kpb	file:
90	kstrtor.os	/^   90             continue$/;"	l	subroutine:kstrtor	file:
90	ktors.os	/^   90          format (\/,' KTORS  --  Too many 4-Ring Torsional',$/;"	l	subroutine:ktors	file:
90	kvdw.os	/^   90             format (4x,i6,8x,2f12.4)$/;"	l	subroutine:kvdw	file:
90	lbfgs.os	/^   90             format (i6,d14.4,d11.4,d11.4,f10.4,f8.2,i7,3x,a9)$/;"	l	subroutine:lbfgs	file:
90	makeint.os	/^   90                format (\/,' MAKEINT  --  Connectivity Error',$/;"	l	subroutine:makeint	file:
90	makeint.os	/^   90       format (' Choose a Connected Atom (',5i6,') :  ',$)$/;"	l	function:adjacent	file:
90	mdsave.os	/^   90    format (' Current Potential',3x,f15.4,' Kcal\/mole')$/;"	l	subroutine:mdsave	file:
90	mdstat.os	/^   90       format (' Total Energy',8x,f19.8,' Kcal\/mole',3x,$/;"	l	subroutine:mdstat	file:
90	ocvm.os	/^   90                format (i6,d14.4,d12.4,d11.4,f10.4,f11.4,i9)$/;"	l	subroutine:ocvm	file:
90	picalc.os	/^   90          format (8f9.4)$/;"	l	subroutine:piscf	file:
90	prtmol2.os	/^   90 format (\/,'@<TRIPOS>BOND')$/;"	l	subroutine:prtmol2	file:
90	prtprm.os	/^   90       format (\/\/,15x,'Van der Waals Parameters for 1-4',$/;"	l	subroutine:prtprm	file:
90	readdyn.os	/^   90       format (a120)$/;"	l	subroutine:readdyn	file:
90	readgau.os	/^   90          format (a120)$/;"	l	subroutine:readgau	file:
90	readint.os	/^   90 format ()$/;"	l	subroutine:readint	file:
90	readmol.os	/^   90    continue$/;"	l	subroutine:readmol	file:
90	readmol2.os	/^   90          format (a120)$/;"	l	subroutine:readmol2	file:
90	readpdb.os	/^   90       continue$/;"	l	subroutine:readpdb	file:
90	readpdb.os	/^   90       format (\/,' Enter a Set of Alternate Atom Locations',$/;"	l	subroutine:scanpdb	file:
90	readprm.os	/^   90       continue$/;"	l	subroutine:readprm	file:
90	readxyz.os	/^   90    format (\/,' READXYZ  --  Error in Coordinate File at Atom',i6)$/;"	l	subroutine:readxyz	file:
90	rings.os	/^   90       format (\/,' Three-Membered Rings in the Structure :',$/;"	l	subroutine:rings	file:
90	square.os	/^   90    format (\/,' SQUARE  --  Normal Termination of Least Squares')$/;"	l	subroutine:square	file:
90	surface.os	/^   90       continue$/;"	l	subroutine:surface	file:
90	surface.os	/^   90       continue$/;"	l	subroutine:surface1	file:
90	surfatom.os	/^   90    continue$/;"	l	subroutine:surfatom	file:
90	surfatom.os	/^   90    continue$/;"	l	subroutine:surfatom1	file:
90	tncg.os	/^   90       format (i6,d13.4,d12.4,41x,i7)$/;"	l	subroutine:tncg	file:
900	prtprm.os	/^  900    format (\/\/,15x,'5-Membered Ring Torsion Parameters',$/;"	l	subroutine:prtprm	file:
910	prtprm.os	/^  910       format (2x,i5,2x,i4,'-',i4,'-',i4,'-',i4,2x,6(f8.3,f6.1,i2))$/;"	l	subroutine:prtprm	file:
920	prtprm.os	/^  920    continue$/;"	l	subroutine:prtprm	file:
930	prtprm.os	/^  930    format (\/\/,15x,'4-Membered Ring Torsion Parameters',$/;"	l	subroutine:prtprm	file:
940	prtprm.os	/^  940       format (2x,i5,2x,i4,'-',i4,'-',i4,'-',i4,2x,6(f8.3,f6.1,i2))$/;"	l	subroutine:prtprm	file:
950	prtprm.os	/^  950    continue$/;"	l	subroutine:prtprm	file:
960	prtprm.os	/^  960    format (a1,\/\/,15x,'TINKER Force Field Parameters for ',a20)$/;"	l	subroutine:prtprm	file:
970	prtprm.os	/^  970    format (\/\/,15x,'Pi-Orbital Torsion Parameters',$/;"	l	subroutine:prtprm	file:
980	prtprm.os	/^  980       format (6x,i5,5x,i4,'-',i4,6x,f12.3)$/;"	l	subroutine:prtprm	file:
990	prtprm.os	/^  990    continue$/;"	l	subroutine:prtprm	file:
AmberNetcdf	AmberNetcdf.h	/^struct AmberNetcdf {$/;"	s
BINTRAJ	AmberNetcdf.h	5;"	d
GetAttrText	AmberNetcdf.cpp	/^static char *GetAttrText(int ncid, int vid, const char *attribute) {$/;"	os	file:
GetDimInfo	AmberNetcdf.cpp	/^static int GetDimInfo(int ncid, const char *attribute, int *length) {$/;"	os	file:
INC_AMBER_NETCDF_H	AmberNetcdf.h	2;"	d
INIT_AmberNetcdf	AmberNetcdf.cpp	40;"	d	file:
NCATOM	AmberNetcdf.cpp	25;"	d	file:
NCCELL_ANGLES	AmberNetcdf.cpp	29;"	d	file:
NCCELL_ANGULAR	AmberNetcdf.cpp	28;"	d	file:
NCCELL_LENGTHS	AmberNetcdf.cpp	27;"	d	file:
NCCELL_SPATIAL	AmberNetcdf.cpp	26;"	d	file:
NCCOORDS	AmberNetcdf.cpp	30;"	d	file:
NCDEBUGVAL	AmberNetcdf.cpp	37;"	d	file:
NCFRAME	AmberNetcdf.cpp	23;"	d	file:
NCLABEL	AmberNetcdf.cpp	34;"	d	file:
NCLABELLEN	AmberNetcdf.cpp	35;"	d	file:
NCSPATIAL	AmberNetcdf.cpp	24;"	d	file:
NCTEMPERATURE	AmberNetcdf.cpp	32;"	d	file:
NCTIME	AmberNetcdf.cpp	33;"	d	file:
NCVELO	AmberNetcdf.cpp	31;"	d	file:
TINKER_AMBER_NETCDF_H	amber_netcdf.h	6;"	d
TINKER_GMXTRR_H	gmxtrr.h	6;"	d
TempVID	AmberNetcdf.h	/^  int TempVID;$/;"	m	struct:AmberNetcdf
a	moldyn.os	/^      real/;"	v	module:moldyn
aalt	moldyn.os	/^      real*8, allocatable :: aalt(/;"	v	module:moldyn
aaunit	angpot.os	/^      real*8 aaunit,/;"	v	module:angpot
abort	inform.os	/^      logical debug,holdup,abort$/;"	v	module:inform
abuck	vdwpot.os	/^      real*8 abuck,/;"	v	module:vdwpot
abur	faces.os	/^      logical, allocatable :: abur(/;"	v	module:faces
acls	faces.os	/^      integer, allocatable :: acls(/;"	v	module:faces
acoeff	paths.os	/^      real*8 acoeff(/;"	v	module:paths
acon	kangs.os	/^      real*8 acon(/;"	v	module:kangs
acon3	kangs.os	/^      real*8 acon3(/;"	v	module:kangs
acon4	kangs.os	/^      real*8 acon4(/;"	v	module:kangs
acon5	kangs.os	/^      real*8 acon5(/;"	v	module:kangs
aconf	kangs.os	/^      real*8 aconf(/;"	v	module:kangs
acsa	hpmf.os	/^      real*8, allocatable :: acsa(/;"	v	module:hpmf
acsurf	hpmf.os	/^      real*8 acsurf,/;"	v	module:hpmf
action	action.os	/^      module action$/;"	m
active	active.os	/^      subroutine active$/;"	s
adjacent	makeint.os	/^      function adjacent /;"	os
adjust	pmestuff.os	/^      subroutine adjust /;"	s
aea	analyz.os	/^      real*8, allocatable :: aea(/;"	v	module:analyz
aeaa	analyz.os	/^      real*8, allocatable :: aeaa(/;"	v	module:analyz
aeat	analyz.os	/^      real*8, allocatable :: aeat(/;"	v	module:analyz
aeb	analyz.os	/^      real*8, allocatable :: aeb(/;"	v	module:analyz
aeba	analyz.os	/^      real*8, allocatable :: aeba(/;"	v	module:analyz
aebt	analyz.os	/^      real*8, allocatable :: aebt(/;"	v	module:analyz
aec	analyz.os	/^      real*8, allocatable :: aec(/;"	v	module:analyz
aecd	analyz.os	/^      real*8, allocatable :: aecd(/;"	v	module:analyz
aed	analyz.os	/^      real*8, allocatable :: aed(/;"	v	module:analyz
aeg	analyz.os	/^      real*8, allocatable :: aeg(/;"	v	module:analyz
aeid	analyz.os	/^      real*8, allocatable :: aeid(/;"	v	module:analyz
aeit	analyz.os	/^      real*8, allocatable :: aeit(/;"	v	module:analyz
aelf	analyz.os	/^      real*8, allocatable :: aelf(/;"	v	module:analyz
aem	analyz.os	/^      real*8, allocatable :: aem(/;"	v	module:analyz
aeopb	analyz.os	/^      real*8, allocatable :: aeopb(/;"	v	module:analyz
aeopd	analyz.os	/^      real*8, allocatable :: aeopd(/;"	v	module:analyz
aep	analyz.os	/^      real*8, allocatable :: aep(/;"	v	module:analyz
aept	analyz.os	/^      real*8, allocatable :: aept(/;"	v	module:analyz
aer	analyz.os	/^      real*8, allocatable :: aer(/;"	v	module:analyz
aes	analyz.os	/^      real*8, allocatable :: aes(/;"	v	module:analyz
aesum	analyz.os	/^      real*8, allocatable :: aesum(/;"	v	module:analyz
aet	analyz.os	/^      real*8, allocatable :: aet(/;"	v	module:analyz
aett	analyz.os	/^      real*8, allocatable :: aett(/;"	v	module:analyz
aeub	analyz.os	/^      real*8, allocatable :: aeub(/;"	v	module:analyz
aev	analyz.os	/^      real*8, allocatable :: aev(/;"	v	module:analyz
aewald	ewald.os	/^      real*8 aewald$/;"	v	module:ewald
aex	analyz.os	/^      real*8, allocatable :: aex(/;"	v	module:analyz
afe	faces.os	/^      integer, allocatable :: afe(/;"	v	module:faces
afix	restrn.os	/^      real*8, allocatable :: afix(/;"	v	module:restrn
afld	angbnd.os	/^      real*8, allocatable :: afld(/;"	v	module:angbnd
afree	faces.os	/^      logical, allocatable :: afree(/;"	v	module:faces
ak	angbnd.os	/^      real*8, allocatable :: ak(/;"	v	module:angbnd
ale	faces.os	/^      integer, allocatable :: ale(/;"	v	module:faces
align	align.os	/^      module align$/;"	m
alph	merck.os	/^      real*8 alph(/;"	v	module:merck
alpha	boxes.os	/^      real*8 alpha,/;"	v	module:boxes
alpharef	refer.os	/^      real*8 alpharef(/;"	v	module:refer
altelec	mutate.os	/^      subroutine altelec$/;"	s
altsym	pdb.os	/^      character*1 altsym$/;"	v	module:pdb
amino	resdue.os	/^      character*3 amino(/;"	v	module:resdue
amino1	resdue.os	/^      character*1 amino1(/;"	v	module:resdue
ampersand	ascii.os	/^      integer ampersand$/;"	v	module:ascii
analysis	analysis.os	/^      subroutine analysis /;"	s
analyz	analyz.os	/^      module analyz$/;"	m
anan	kanang.os	/^      real*8 anan(/;"	v	module:kanang
anat	angbnd.os	/^      real*8, allocatable :: anat(/;"	v	module:angbnd
ang	kangs.os	/^      real*8 ang(/;"	v	module:kangs
ang3	kangs.os	/^      real*8 ang3(/;"	v	module:kangs
ang4	kangs.os	/^      real*8 ang4(/;"	v	module:kangs
ang5	kangs.os	/^      real*8 ang5(/;"	v	module:kangs
angang	angang.os	/^      module angang$/;"	m
angbnd	angbnd.os	/^      module angbnd$/;"	m
angf	kangs.os	/^      real*8 angf(/;"	v	module:kangs
angles	angles.os	/^      subroutine angles$/;"	s
anglist	atmlst.os	/^      integer, allocatable :: anglist(/;"	v	module:atmlst
angmax	linmin.os	/^      real*8 angmax$/;"	v	module:linmin
angpot	angpot.os	/^      module angpot$/;"	m
angtor	angtor.os	/^      module angtor$/;"	m
angtyp	angpot.os	/^      character*8, allocatable :: angtyp(/;"	v	module:angpot
angunit	angpot.os	/^      real*8 angunit,/;"	v	module:angpot
anisotrop	bath.os	/^      logical anisotrop$/;"	v	module:bath
anorm	connolly.os	/^      function anorm /;"	os
aobc	solute.os	/^      real*8, allocatable :: aobc(/;"	v	module:solute
apbe	pbstuf.os	/^      real*8, allocatable :: apbe(/;"	v	module:pbstuf
apbsempole	pmpb.os	/^      subroutine apbsempole /;"	s
apbsfinal	pmpb.os	/^      subroutine apbsfinal$/;"	s
apbsinduce	pmpb.os	/^      subroutine apbsinduce /;"	s
apbsinitial	pmpb.os	/^      subroutine apbsinitial /;"	s
apbsnlinduce	pmpb.os	/^      subroutine apbsnlinduce /;"	s
apostrophe	ascii.os	/^      integer apostrophe$/;"	v	module:ascii
append_frame_x_	gmxtrr.cpp	/^void append_frame_x_(const char *fn,int *leng, int *step, double *time,$/;"	os
append_frame_x_box_	gmxtrr.cpp	/^void append_frame_x_box_(const char *fn,int *leng, int *step, double *time,$/;"	os
ar	faces.os	/^      real*8, allocatable :: ar(/;"	v	module:faces
archive	output.os	/^      logical archive$/;"	v	module:output
arg	argue.os	/^      character*120 arg(/;"	v	module:argue
argue	argue.os	/^      module argue$/;"	m
arom	merck.os	/^      integer arom(/;"	v	module:merck
ascii	ascii.os	/^      module ascii$/;"	m
aset	overlap.os	/^      subroutine aset /;"	s
asolv	solute.os	/^      real*8, allocatable :: asolv(/;"	v	module:solute
aspc	uprior.os	/^      real*8 aspc(/;"	v	module:uprior
asterisk	ascii.os	/^      integer asterisk,/;"	v	module:ascii
atcon	kantor.os	/^      real*8 atcon(/;"	v	module:kantor
athl	kpolr.os	/^      real*8 athl(/;"	v	module:kpolr
atmcls	katoms.os	/^      integer atmcls(/;"	v	module:katoms
atmlst	atmlst.os	/^      module atmlst$/;"	m
atmnum	katoms.os	/^      integer atmnum(/;"	v	module:katoms
atmsph	bath.os	/^      real*8 kelvin,atmsph$/;"	v	module:bath
atomDID	AmberNetcdf.h	/^  int atomDID;        \/\/ ID of atom dimension$/;"	m	struct:AmberNetcdf
atomic	atomid.os	/^      integer atomic(/;"	v	module:atomid
atomid	atomid.os	/^      module atomid$/;"	m
atoms	atoms.os	/^      module atoms$/;"	m
atorunit	torpot.os	/^      real*8 atorunit$/;"	v	module:torpot
atsign	ascii.os	/^      integer atsign,/;"	v	module:ascii
attach	attach.os	/^      subroutine attach$/;"	s
avogadro	units.os	/^      real*8 avogadro$/;"	v	module:units
awater	nonpol.os	/^      real*8 awater,/;"	v	module:nonpol
axyz	faces.os	/^      real*8, allocatable :: axyz(/;"	v	module:faces
b1	rxnfld.os	/^      real*8 b1(/;"	v	module:rxnfld
b2	rxnfld.os	/^      real*8 b2(/;"	v	module:rxnfld
backslash	ascii.os	/^      integer atsign,backslash$/;"	v	module:ascii
barostat	bath.os	/^      character*11 barostat$/;"	v	module:bath
basefile	basefile.os	/^      subroutine basefile /;"	s
bath	bath.os	/^      module bath$/;"	m
bbuck	vdwpot.os	/^      real*8 abuck,bbuck,/;"	v	module:vdwpot
bcfl	pbstuf.os	/^      character*20 bcfl,/;"	v	module:pbstuf
bci	merck.os	/^      real*8 bci(/;"	v	module:merck
bci_1	merck.os	/^      real*8 bci_1(/;"	v	module:merck
bcon	kbonds.os	/^      real*8 bcon(/;"	v	module:kbonds
bcon3	kbonds.os	/^      real*8 bcon3(/;"	v	module:kbonds
bcon4	kbonds.os	/^      real*8 bcon4(/;"	v	module:kbonds
bcon5	kbonds.os	/^      real*8 bcon5(/;"	v	module:kbonds
bcucof	bicubic.os	/^      subroutine bcucof /;"	s
bcuint	bicubic.os	/^      subroutine bcuint /;"	s
bcuint1	bicubic.os	/^      subroutine bcuint1 /;"	s
bcuint2	bicubic.os	/^      subroutine bcuint2 /;"	s
bdpl	dipole.os	/^      real*8, allocatable :: bdpl(/;"	v	module:dipole
beeman	beeman.os	/^      subroutine beeman /;"	s
beta	boxes.os	/^      real*8 alpha,beta,/;"	v	module:boxes
beta_cos	boxes.os	/^      real*8 beta_cos$/;"	v	module:boxes
beta_sin	boxes.os	/^      real*8 beta_sin$/;"	v	module:boxes
beta_term	boxes.os	/^      real*8 beta_term$/;"	v	module:boxes
betacf	invbeta.os	/^      function betacf /;"	os
betai	invbeta.os	/^      function betai /;"	os
betaref	refer.os	/^      real*8 betaref(/;"	v	module:refer
biotyp	fields.os	/^      integer biotyp(/;"	v	module:fields
bitor	bitor.os	/^      module bitor$/;"	m
bitors	bitors.os	/^      subroutine bitors$/;"	s
bk	bndstr.os	/^      real*8, allocatable :: bk(/;"	v	module:bndstr
bkbone	nucleo.os	/^      real*8 bkbone(/;"	v	module:nucleo
bkpi	pistuf.os	/^      real*8, allocatable :: bkpi(/;"	v	module:pistuf
bl	bndstr.os	/^      real*8, allocatable/;"	v	module:bndstr
blen	kbonds.os	/^      real*8 blen(/;"	v	module:kbonds
blen3	kbonds.os	/^      real*8 blen3(/;"	v	module:kbonds
blen4	kbonds.os	/^      real*8 blen4(/;"	v	module:kbonds
blen5	kbonds.os	/^      real*8 blen5(/;"	v	module:kbonds
blpi	pistuf.os	/^      real*8, allocatable :: blpi(/;"	v	module:pistuf
bmax	overlap.os	/^      function bmax /;"	os
bmnmix	mdstuf.os	/^      integer bmnmix$/;"	v	module:mdstuf
bnderr	embed.os	/^      function bnderr /;"	os
bndlist	atmlst.os	/^      integer, allocatable :: bndlist(/;"	v	module:atmlst
bndpot	bndpot.os	/^      module bndpot$/;"	m
bndstr	bndstr.os	/^      module bndstr$/;"	m
bndtyp	bndpot.os	/^      character*8 bndtyp$/;"	v	module:bndpot
bndunit	bndpot.os	/^      real*8 bndunit$/;"	v	module:bndpot
bobc	solute.os	/^      real*8, allocatable :: bobc(/;"	v	module:solute
bohr	units.os	/^      real*8 bohr,/;"	v	module:units
boltzmann	units.os	/^      real*8 boltzmann$/;"	v	module:units
bonds	bonds.os	/^      subroutine bonds$/;"	s
born	born.os	/^      subroutine born$/;"	s
born1	born.os	/^      subroutine born1$/;"	s
borntyp	solute.os	/^      character*8 borntyp$/;"	v	module:solute
bound	bound.os	/^      module bound$/;"	m
boundary	ewald.os	/^      character*7 boundary$/;"	v	module:ewald
bounds	bounds.os	/^      subroutine bounds$/;"	s
box34	boxes.os	/^      real*8 box34,/;"	v	module:boxes
boxes	boxes.os	/^      module boxes$/;"	m
bpred	uprior.os	/^      real*8 bpred(/;"	v	module:uprior
bpredp	uprior.os	/^      real*8 bpredp(/;"	v	module:uprior
bpredps	uprior.os	/^      real*8 bpredps(/;"	v	module:uprior
bpreds	uprior.os	/^      real*8 bpreds(/;"	v	module:uprior
bsbuild	pme.os	/^      real*8, allocatable :: bsbuild(/;"	v	module:pme
bset	overlap.os	/^      subroutine bset /;"	s
bsmod1	pme.os	/^      real*8, allocatable :: bsmod1(/;"	v	module:pme
bsmod2	pme.os	/^      real*8, allocatable :: bsmod2(/;"	v	module:pme
bsmod3	pme.os	/^      real*8, allocatable :: bsmod3(/;"	v	module:pme
bsorder	pme.os	/^      integer bsorder$/;"	v	module:pme
bsplgen	pmestuff.os	/^      subroutine bsplgen /;"	s
bspline	kewald.os	/^      subroutine bspline /;"	s
bspline_fill	pmestuff.os	/^      subroutine bspline_fill$/;"	s
bsstep	diffeq.os	/^      subroutine bsstep /;"	s
bt_1	merck.os	/^      integer bt_1(/;"	v	module:merck
btcon	ksttor.os	/^      real*8 btcon(/;"	v	module:ksttor
bussi	bussi.os	/^      subroutine bussi /;"	s
c	faces.os	/^      real*8, alloca/;"	v	module:faces
c0	shunt.os	/^      real*8 c0,/;"	v	module:shunt
c1	hpmf.os	/^      real*8 c1,/;"	v	module:hpmf
c1	shunt.os	/^      real*8 c0,c1,/;"	v	module:shunt
c1typ	resdue.os	/^      integer c1typ(/;"	v	module:resdue
c2	hpmf.os	/^      real*8 c1,c2,/;"	v	module:hpmf
c2	shunt.os	/^      real*8 c0,c1,c2$/;"	v	module:shunt
c2scale	chgpot.os	/^      real*8 c2scale,/;"	v	module:chgpot
c2typ	resdue.os	/^      integer c2typ(/;"	v	module:resdue
c3	hpmf.os	/^      real*8 c1,c2,c3$/;"	v	module:hpmf
c3	shunt.os	/^      real*8 c3,/;"	v	module:shunt
c3scale	chgpot.os	/^      real*8 c2scale,c3scale$/;"	v	module:chgpot
c3typ	resdue.os	/^      integer c3typ(/;"	v	module:resdue
c4	shunt.os	/^      real*8 c3,c4,/;"	v	module:shunt
c4scale	chgpot.os	/^      real*8 c4scale,/;"	v	module:chgpot
c4typ	resdue.os	/^      integer c4typ(/;"	v	module:resdue
c5	shunt.os	/^      real*8 c3,c4,c5$/;"	v	module:shunt
c5scale	chgpot.os	/^      real*8 c4scale,c5scale$/;"	v	module:chgpot
c5typ	resdue.os	/^      integer c5typ(/;"	v	module:resdue
ca	faces.os	/^      integer, allocat/;"	v	module:faces
cactyp	resdue.os	/^      integer cactyp(/;"	v	module:resdue
calendar	calendar.os	/^      subroutine calendar /;"	s
cang	angpot.os	/^      real*8 cang,/;"	v	module:angpot
cantyp	resdue.os	/^      integer cantyp(/;"	v	module:resdue
cappa	linmin.os	/^      real*8 cappa$/;"	v	module:linmin
caret	ascii.os	/^      integer caret,/;"	v	module:ascii
carriage	ascii.os	/^      integer carriage,/;"	v	module:ascii
cart_to_frac	pmestuff.os	/^      subroutine cart_to_frac /;"	s
catyp	resdue.os	/^      integer catyp(/;"	v	module:resdue
cbnd	bndpot.os	/^      real*8 cbnd$/;"	v	module:bndpot
cbtyp	resdue.os	/^      integer cbtyp(/;"	v	module:resdue
cbuck	vdwpot.os	/^      real*8 abuck,bbuck,cbuck$/;"	v	module:vdwpot
cbuf2	neigh.os	/^      real*8 vbuf2,cbuf2$/;"	v	module:neigh
cbufx	neigh.os	/^      real*8 vbufx,cbufx$/;"	v	module:neigh
cbuild	nblist.os	/^      subroutine cbuild$/;"	s
cctyp	resdue.os	/^      integer cctyp(/;"	v	module:resdue
cdisp	nonpol.os	/^      real*8, allocatable :: cdisp(/;"	v	module:nonpol
cdt	socket.os	/^      real*8 cdt$/;"	v	module:socket
cdx	socket.os	/^      real*8, allocatable :: cdx(/;"	v	module:socket
cdy	socket.os	/^      real*8, allocatable :: cdy(/;"	v	module:socket
cdz	socket.os	/^      real*8, allocatable :: cdz(/;"	v	module:socket
cell	cell.os	/^      module cell$/;"	m
cellAngleVID	AmberNetcdf.h	/^  int cellAngleVID;   \/\/ ID of box angle variable$/;"	m	struct:AmberNetcdf
cellLengthVID	AmberNetcdf.h	/^  int cellLengthVID;  \/\/ ID of box length variable$/;"	m	struct:AmberNetcdf
cell_angularDID	AmberNetcdf.h	/^  int cell_angularDID;$/;"	m	struct:AmberNetcdf
cell_angularVID	AmberNetcdf.h	/^  int cell_angularVID;$/;"	m	struct:AmberNetcdf
cell_spatialDID	AmberNetcdf.h	/^  int cell_spatialDID;$/;"	m	struct:AmberNetcdf
cell_spatialVID	AmberNetcdf.h	/^  int cell_spatialVID;$/;"	m	struct:AmberNetcdf
cenergy	socket.os	/^      real*8 cenergy$/;"	v	module:socket
center	center.os	/^      subroutine center /;"	s
cerror	connolly.os	/^      subroutine cerror /;"	s
cfftb	fftpack.os	/^      subroutine cfftb /;"	s
cfftb1	fftpack.os	/^      subroutine cfftb1 /;"	s
cfftf	fftpack.os	/^      subroutine cfftf /;"	s
cfftf1	fftpack.os	/^      subroutine cfftf1 /;"	s
cffti	fftpack.os	/^      subroutine cffti /;"	s
cffti1	fftpack.os	/^      subroutine cffti1 /;"	s
cgcent	pbstuf.os	/^      real*8 cgcent(/;"	v	module:pbstuf
cgrid	pbstuf.os	/^      real*8 cgrid(/;"	v	module:pbstuf
charge	charge.os	/^      module charge$/;"	m
checkNCerr	AmberNetcdf.cpp	/^static int checkNCerr(int err, const char *message, ...) {$/;"	os	file:
chg	kchrge.os	/^      real*8 chg(/;"	v	module:kchrge
chgcut	limits.os	/^      real*8 vdwcut,chgcut$/;"	v	module:limits
chglist	charge.os	/^      integer, allocatable :: chglist(/;"	v	module:charge
chgm	pbstuf.os	/^      character*20 bcfl,chgm,/;"	v	module:pbstuf
chgpot	chgpot.os	/^      module chgpot$/;"	m
chgtaper	limits.os	/^      real*8 vdwtaper,chgtaper$/;"	v	module:limits
chi	phipsi.os	/^      real*8 chi(/;"	v	module:phipsi
chir	restrn.os	/^      real*8, allocatable :: chir(/;"	v	module:restrn
chiral	phipsi.os	/^      integer chiral(/;"	v	module:phipsi
chirer	embed.os	/^      function chirer /;"	os
chkangle	shakeup.os	/^      subroutine chkangle /;"	s
chkpole	chkpole.os	/^      subroutine chkpole$/;"	s
chkring	chkring.os	/^      subroutine chkring /;"	s
chksize	embed.os	/^      subroutine chksize$/;"	s
chksocket	server.os	/^      subroutine chksocket /;"	s
chkttor	etortor.os	/^      subroutine chkttor /;"	s
chkxyz	chkxyz.os	/^      subroutine chkxyz /;"	s
chnnam	sequen.os	/^      character*1 chnnam(/;"	v	module:sequen
chnsym	pdb.os	/^      character*20 chnsym$/;"	v	module:pdb
chntyp	sequen.os	/^      character*7 chntyp(/;"	v	module:sequen
cholesky	cholesky.os	/^      subroutine cholesky /;"	s
chrono	chrono.os	/^      module chrono$/;"	m
chunks	chunks.os	/^      module chunks$/;"	m
cirpln	connolly.os	/^      subroutine cirpln /;"	s
cjkm	overlap.os	/^      function cjkm /;"	os
class	atomid.os	/^      integer class(/;"	v	module:atomid
class0	mutant.os	/^      integer, allocatable :: class0(/;"	v	module:mutant
class1	mutant.os	/^      integer, allocatable :: class1(/;"	v	module:mutant
clight	nblist.os	/^      subroutine clight$/;"	s
clist	nblist.os	/^      subroutine clist$/;"	s
closenetcdf	readnc.f90	/^subroutine closenetcdf(/;"	s
closetrr	readtrr.f90	/^subroutine closetrr(/;"	s
cls	faces.os	/^      integer, allocatable :: cls(/;"	v	module:faces
clst	faces.os	/^      integer, allocatable :: clst(/;"	v	module:faces
cluster	cluster.os	/^      subroutine cluster$/;"	s
cmp_to_fmp	pmestuff.os	/^      subroutine cmp_to_fmp /;"	s
cntyp	resdue.os	/^      integer cntyp(/;"	v	module:resdue
collide	bath.os	/^      real*8 compress,collide$/;"	v	module:bath
colon	ascii.os	/^      integer colon,/;"	v	module:ascii
column	column.os	/^      subroutine column /;"	s
comma	ascii.os	/^      integer comma,/;"	v	module:ascii
command	command.os	/^      subroutine command$/;"	s
compact	disgeo.os	/^      real*8 compact$/;"	v	module:disgeo
compress	bath.os	/^      real*8 compress,/;"	v	module:bath
compress	connolly.os	/^      subroutine compress$/;"	s
connect	connect.os	/^      subroutine connect$/;"	s
connolly	connolly.os	/^      subroutine connolly /;"	s
contact	connolly.os	/^      subroutine contact$/;"	s
control	control.os	/^      subroutine control$/;"	s
convert	units.os	/^      real*8 joule,convert$/;"	v	module:units
coordVID	AmberNetcdf.h	/^  int coordVID;       \/\/ ID of coordinates variable$/;"	m	struct:AmberNetcdf
coords	embed.os	/^      subroutine coords /;"	s
coordtype	output.os	/^      character*9 coordtype$/;"	v	module:output
copb	angpot.os	/^      real*8 copb,/;"	v	module:angpot
copd	angpot.os	/^      real*8 copd,/;"	v	module:angpot
coulomb	units.os	/^      real*8 coulomb,/;"	v	module:units
couple	couple.os	/^      module couple$/;"	m
covrad	ptable.os	/^      real*8 covrad(/;"	v	module:ptable
cr	faces.os	/^      real*8, allocatable :: cr(/;"	v	module:faces
crd	merck.os	/^      integer crd(/;"	v	module:merck
createjvm	server.os	/^      subroutine createjvm /;"	s
createserver	server.os	/^      subroutine createserver /;"	s
createsystem	server.os	/^      subroutine createsystem /;"	s
createupdate	server.os	/^      subroutine createupdate /;"	s
cspline	cspline.os	/^      subroutine cspline /;"	s
cstep	socket.os	/^      integer cstep$/;"	v	module:socket
ct	ct.os	/^      module ct$/;"	m
ct	faces.os	/^      integer, allocatable :: ct(/;"	v	module:faces
ct_eta	ct.os	/^      real*8, allocatable :: ct_eta(/;"	v	module:ct
ct_etap	ct.os	/^      real*8 ct_etap(/;"	v	module:ct
ct_miu	ct.os	/^      real*8, allocatable :: ct_miu(/;"	v	module:ct
ct_miup	ct.os	/^      real*8 ct_miup(/;"	v	module:ct
ct_qct	ct.os	/^      real*8, allocatable :: ct_qct(/;"	v	module:ct
ct_qctp	ct.os	/^      real*8 ct_qctp(/;"	v	module:ct
ct_r1	ct.os	/^      real*8, allocatable :: ct_r1(/;"	v	module:ct
ct_r1p	ct.os	/^      real*8 ct_r1p(/;"	v	module:ct
ct_r2	ct.os	/^      real*8, allocatable :: ct_r2(/;"	v	module:ct
ct_r2p	ct.os	/^      real*8 ct_r2p(/;"	v	module:ct
ctlambda	mutant.os	/^      real*8 ctlambda$/;"	v	module:mutant
ctyp	resdue.os	/^      integer ctyp(/;"	v	module:resdue
currentFrame	AmberNetcdf.h	/^  int currentFrame;   \/\/ Current frame number$/;"	m	struct:AmberNetcdf
current_step	umbrella.os	/^      integer current_step$/;"	v	module:umbrella
cury	urypot.os	/^      real*8 cury$/;"	v	module:urypot
cut	shunt.os	/^      real*8 cut,/;"	v	module:shunt
cut2	shunt.os	/^      real*8 cut,cut2$/;"	v	module:shunt
cutoffs	cutoffs.os	/^      subroutine cutoffs$/;"	s
cyclesave	output.os	/^      logical cyclesave$/;"	v	module:output
cyep	faces.os	/^      integer, allocatable :: cyep(/;"	v	module:faces
cynep	faces.os	/^      integer, allocatable :: cynep(/;"	v	module:faces
cytsy	cspline.os	/^      subroutine cytsy /;"	s
cytsyp	cspline.os	/^      subroutine cytsyp /;"	s
cytsys	cspline.os	/^      subroutine cytsys /;"	s
d1d2	erxnfld.os	/^      function d1d2 /;"	os
d1scale	polpot.os	/^      real*8 d1scale,/;"	v	module:polpot
d2scale	polpot.os	/^      real*8 d1scale,d2scale$/;"	v	module:polpot
d3scale	polpot.os	/^      real*8 d3scale,/;"	v	module:polpot
d4scale	polpot.os	/^      real*8 d3scale,d4scale$/;"	v	module:polpot
da	merck.os	/^      character*1 da(/;"	v	module:merck
dblhlx	nucleo.os	/^      logical dblhlx$/;"	v	module:nucleo
dbnd	disgeo.os	/^      real*8, allocatable :: dbnd(/;"	v	module:disgeo
dcon	kiprop.os	/^      real*8 dcon(/;"	v	module:kiprop
dea	deriv.os	/^      real*8, allocatable :: dea(/;"	v	module:deriv
deaa	deriv.os	/^      real*8, allocatable :: deaa(/;"	v	module:deriv
deat	deriv.os	/^      real*8, allocatable :: deat(/;"	v	module:deriv
deb	deriv.os	/^      real*8, allocatable :: deb(/;"	v	module:deriv
deba	deriv.os	/^      real*8, allocatable :: deba(/;"	v	module:deriv
debt	deriv.os	/^      real*8, allocatable :: debt(/;"	v	module:deriv
debug	inform.os	/^      logical debug,/;"	v	module:inform
debye	units.os	/^      real*8 coulomb,debye$/;"	v	module:units
dec	deriv.os	/^      real*8, allocatable :: dec(/;"	v	module:deriv
decd	deriv.os	/^      real*8, allocatable :: decd(/;"	v	module:deriv
dect	deriv.os	/^      real*8, allocatable :: dect(/;"	v	module:deriv
ded	deriv.os	/^      real*8, allocatable :: ded(/;"	v	module:deriv
deflate	deflate.os	/^      subroutine deflate /;"	s
deform	warp.os	/^      real*8 deform$/;"	v	module:warp
defstbn_abc	merck.os	/^      real*8 defstbn_abc(/;"	v	module:merck
defstbn_cba	merck.os	/^      real*8 defstbn_cba(/;"	v	module:merck
deg	deriv.os	/^      real*8, allocatable :: deg(/;"	v	module:deriv
deid	deriv.os	/^      real*8, allocatable :: deid(/;"	v	module:deriv
deit	deriv.os	/^      real*8, allocatable :: deit(/;"	v	module:deriv
delete	delete.os	/^      subroutine delete /;"	s
delf	deriv.os	/^      real*8, allocatable :: delf(/;"	v	module:deriv
dem	deriv.os	/^      real*8, allocatable :: dem(/;"	v	module:deriv
deopb	deriv.os	/^      real*8, allocatable :: deopb(/;"	v	module:deriv
deopd	deriv.os	/^      real*8, allocatable :: deopd(/;"	v	module:deriv
deoxy	nucleo.os	/^      logical deoxy(/;"	v	module:nucleo
dep	deriv.os	/^      real*8, allocatable :: dep(/;"	v	module:deriv
dept	deriv.os	/^      real*8, allocatable :: dept(/;"	v	module:deriv
depth	connolly.os	/^      function depth /;"	os
depth	restrn.os	/^      real*8 depth$/;"	v	module:restrn
der	deriv.os	/^      real*8, allocatable :: der(/;"	v	module:deriv
deriv	deriv.os	/^      module deriv$/;"	m
des	deriv.os	/^      real*8, allocatable :: des(/;"	v	module:deriv
describe	katoms.os	/^      character*24 describe(/;"	v	module:katoms
destroyjvm	server.os	/^      subroutine destroyjvm /;"	s
destroyserver	server.os	/^      subroutine destroyserver /;"	s
desum	deriv.os	/^      real*8, allocatable :: desum(/;"	v	module:deriv
det	deriv.os	/^      real*8, allocatable :: det(/;"	v	module:deriv
dett	deriv.os	/^      real*8, allocatable :: dett(/;"	v	module:deriv
deub	deriv.os	/^      real*8, allocatable :: deub(/;"	v	module:deriv
dev	deriv.os	/^      real*8, allocatable :: dev(/;"	v	module:deriv
dex	deriv.os	/^      real*8, allocatable :: dex(/;"	v	module:deriv
dfield0a	induce.os	/^      subroutine dfield0a /;"	s
dfield0b	induce.os	/^      subroutine dfield0b /;"	s
dfield0c	induce.os	/^      subroutine dfield0c /;"	s
dfield0d	induce.os	/^      subroutine dfield0d /;"	s
dfield0e	induce.os	/^      subroutine dfield0e /;"	s
dfix	restrn.os	/^      real*8, allocatable :: dfix(/;"	v	module:restrn
dftmod	kewald.os	/^      subroutine dftmod /;"	s
dhal	vdwpot.os	/^      real*8 ghal,dhal$/;"	v	module:vdwpot
diagq	diagq.os	/^      subroutine diagq /;"	s
dielec	chgpot.os	/^      real*8 dielec,/;"	v	module:chgpot
diffc	warp.os	/^      real*8 diffc$/;"	v	module:warp
diffeq	diffeq.os	/^      subroutine diffeq /;"	s
difft	warp.os	/^      real*8 difft$/;"	v	module:warp
diffv	warp.os	/^      real*8 diffv$/;"	v	module:warp
digits	inform.os	/^      integer digits,/;"	v	module:inform
dihed	omega.os	/^      real*8, allocatable :: dihed(/;"	v	module:omega
dime	pbstuf.os	/^      integer dime(/;"	v	module:pbstuf
dipole	dipole.os	/^      module dipole$/;"	m
disgeo	disgeo.os	/^      module disgeo$/;"	m
dist2	connolly.os	/^      function dist2 /;"	os
disulf	phipsi.os	/^      integer disulf(/;"	v	module:phipsi
dlen	kbonds.os	/^      real*8 dlen(/;"	v	module:kbonds
dma	dma.os	/^      module dma$/;"	m
dmdump	embed.os	/^      subroutine dmdump /;"	s
doclst	neigh.os	/^      logical dovlst,doclst$/;"	v	module:neigh
doffset	solute.os	/^      real*8 doffset$/;"	v	module:solute
dollar	ascii.os	/^      integer dollar,/;"	v	module:ascii
domega	domega.os	/^      module domega$/;"	m
domlst	neigh.os	/^      logical domlst,/;"	v	module:neigh
dorest	mdstuf.os	/^      logical dorest$/;"	v	module:mdstuf
dot	connolly.os	/^      function dot /;"	os
doulst	neigh.os	/^      logical domlst,doulst$/;"	v	module:neigh
dovlst	neigh.os	/^      logical dovlst,/;"	v	module:neigh
dpl	kdipol.os	/^      real*8 dpl(/;"	v	module:kdipol
dpl3	kdipol.os	/^      real*8 dpl3(/;"	v	module:kdipol
dpl4	kdipol.os	/^      real*8 dpl4(/;"	v	module:kdipol
dpl5	kdipol.os	/^      real*8 dpl5(/;"	v	module:kdipol
dplcut	limits.os	/^      real*8 dplcut,/;"	v	module:limits
dpltaper	limits.os	/^      real*8 dpltaper,/;"	v	module:limits
dpx	dma.os	/^      real*8, allocatable :: dpx(/;"	v	module:dma
dpy	dma.os	/^      real*8, allocatable :: dpy(/;"	v	module:dma
dpz	dma.os	/^      real*8, allocatable :: dpz(/;"	v	module:dma
drb	solute.os	/^      real*8, allocatable :: drb(/;"	v	module:solute
drbp	solute.os	/^      real*8, allocatable :: drbp(/;"	v	module:solute
drobc	solute.os	/^      real*8, allocatable :: drobc(/;"	v	module:solute
dst13	kurybr.os	/^      real*8 dst13(/;"	v	module:kurybr
dstmat	embed.os	/^      subroutine dstmat /;"	s
e0_lattice	xtals.os	/^      real*8 e0_lattice$/;"	v	module:xtals
ea	energi.os	/^      real/;"	v	module:energi
eaa	energi.os	/^      real*8 eba,eub,eaa$/;"	v	module:energi
eangang	eangang.os	/^      subroutine eangang$/;"	s
eangang1	eangang1.os	/^      subroutine eangang1$/;"	s
eangang2	eangang2.os	/^      subroutine eangang2 /;"	s
eangang2a	eangang2.os	/^      subroutine eangang2a /;"	s
eangang3	eangang3.os	/^      subroutine eangang3$/;"	s
eangle	eangle.os	/^      subroutine eangle$/;"	s
eangle1	eangle1.os	/^      subroutine eangle1$/;"	s
eangle2	eangle2.os	/^      subroutine eangle2 /;"	s
eangle2a	eangle2.os	/^      subroutine eangle2a /;"	s
eangle2b	eangle2.os	/^      subroutine eangle2b /;"	s
eangle3	eangle3.os	/^      subroutine eangle3$/;"	s
eangtor	eangtor.os	/^      subroutine eangtor$/;"	s
eangtor1	eangtor1.os	/^      subroutine eangtor1$/;"	s
eangtor2	eangtor2.os	/^      subroutine eangtor2 /;"	s
eangtor3	eangtor3.os	/^      subroutine eangtor3$/;"	s
eat	energi.os	/^      real*8 ebt,eat,/;"	v	module:energi
eb	energi.os	/^      real*8 esum,eb,/;"	v	module:energi
eba	energi.os	/^      real*8 eba,/;"	v	module:energi
ebond	ebond.os	/^      subroutine ebond$/;"	s
ebond1	ebond1.os	/^      subroutine ebond1$/;"	s
ebond2	ebond2.os	/^      subroutine ebond2 /;"	s
ebond3	ebond3.os	/^      subroutine ebond3$/;"	s
ebt	energi.os	/^      real*8 ebt,/;"	v	module:energi
ebuck	ebuck.os	/^      subroutine ebuck$/;"	s
ebuck0a	ebuck.os	/^      subroutine ebuck0a$/;"	s
ebuck0b	ebuck.os	/^      subroutine ebuck0b$/;"	s
ebuck0c	ebuck.os	/^      subroutine ebuck0c$/;"	s
ebuck0d	ebuck.os	/^      subroutine ebuck0d$/;"	s
ebuck1	ebuck1.os	/^      subroutine ebuck1$/;"	s
ebuck1a	ebuck1.os	/^      subroutine ebuck1a$/;"	s
ebuck1b	ebuck1.os	/^      subroutine ebuck1b$/;"	s
ebuck1c	ebuck1.os	/^      subroutine ebuck1c$/;"	s
ebuck1d	ebuck1.os	/^      subroutine ebuck1d$/;"	s
ebuck2	ebuck2.os	/^      subroutine ebuck2 /;"	s
ebuck2a	ebuck2.os	/^      subroutine ebuck2a /;"	s
ebuck2b	ebuck2.os	/^      subroutine ebuck2b /;"	s
ebuck3	ebuck3.os	/^      subroutine ebuck3$/;"	s
ebuck3a	ebuck3.os	/^      subroutine ebuck3a$/;"	s
ebuck3b	ebuck3.os	/^      subroutine ebuck3b$/;"	s
ebuck3c	ebuck3.os	/^      subroutine ebuck3c$/;"	s
ebuck3d	ebuck3.os	/^      subroutine ebuck3d$/;"	s
ebuffer	chgpot.os	/^      real*8 dielec,ebuffer$/;"	v	module:chgpot
ec	energi.os	/^      real*8 ev,ec,/;"	v	module:energi
ecd	energi.os	/^      real*8 ev,ec,ecd$/;"	v	module:energi
echarge	echarge.os	/^      subroutine echarge$/;"	s
echarge0a	echarge.os	/^      subroutine echarge0a$/;"	s
echarge0b	echarge.os	/^      subroutine echarge0b$/;"	s
echarge0c	echarge.os	/^      subroutine echarge0c$/;"	s
echarge0d	echarge.os	/^      subroutine echarge0d$/;"	s
echarge0e	echarge.os	/^      subroutine echarge0e$/;"	s
echarge0f	echarge.os	/^      subroutine echarge0f$/;"	s
echarge0g	echarge.os	/^      subroutine echarge0g$/;"	s
echarge1	echarge1.os	/^      subroutine echarge1$/;"	s
echarge1a	echarge1.os	/^      subroutine echarge1a$/;"	s
echarge1b	echarge1.os	/^      subroutine echarge1b$/;"	s
echarge1c	echarge1.os	/^      subroutine echarge1c$/;"	s
echarge1d	echarge1.os	/^      subroutine echarge1d$/;"	s
echarge1e	echarge1.os	/^      subroutine echarge1e$/;"	s
echarge1f	echarge1.os	/^      subroutine echarge1f$/;"	s
echarge1g	echarge1.os	/^      subroutine echarge1g$/;"	s
echarge2	echarge2.os	/^      subroutine echarge2 /;"	s
echarge2a	echarge2.os	/^      subroutine echarge2a /;"	s
echarge2b	echarge2.os	/^      subroutine echarge2b /;"	s
echarge2c	echarge2.os	/^      subroutine echarge2c /;"	s
echarge3	echarge3.os	/^      subroutine echarge3$/;"	s
echarge3a	echarge3.os	/^      subroutine echarge3a$/;"	s
echarge3b	echarge3.os	/^      subroutine echarge3b$/;"	s
echarge3c	echarge3.os	/^      subroutine echarge3c$/;"	s
echarge3d	echarge3.os	/^      subroutine echarge3d$/;"	s
echarge3e	echarge3.os	/^      subroutine echarge3e$/;"	s
echarge3f	echarge3.os	/^      subroutine echarge3f$/;"	s
echarge3g	echarge3.os	/^      subroutine echarge3g$/;"	s
echgdpl	echgdpl.os	/^      subroutine echgdpl$/;"	s
echgdpl1	echgdpl1.os	/^      subroutine echgdpl1$/;"	s
echgdpl2	echgdpl2.os	/^      subroutine echgdpl2 /;"	s
echgdpl3	echgdpl3.os	/^      subroutine echgdpl3$/;"	s
ecrecip	echarge.os	/^      subroutine ecrecip$/;"	s
ecrecip1	echarge1.os	/^      subroutine ecrecip1$/;"	s
ect	energi.os	/^      real*8 eg,ex,ect$/;"	v	module:energi
ect0	ect0.os	/^      subroutine ect0$/;"	s
ect1	ect1.os	/^      subroutine ect1$/;"	s
ed	energi.os	/^      real*8 ed,/;"	v	module:energi
ediff	esolv.os	/^      subroutine ediff$/;"	s
ediff1a	esolv1.os	/^      subroutine ediff1a$/;"	s
ediff1b	esolv1.os	/^      subroutine ediff1b$/;"	s
ediff3	esolv3.os	/^      subroutine ediff3$/;"	s
edipole	edipole.os	/^      subroutine edipole$/;"	s
edipole1	edipole1.os	/^      subroutine edipole1$/;"	s
edipole2	edipole2.os	/^      subroutine edipole2 /;"	s
edipole3	edipole3.os	/^      subroutine edipole3$/;"	s
efreq	units.os	/^      real*8 evolt,efreq$/;"	v	module:units
eg	energi.os	/^      real*8 eg,/;"	v	module:energi
egau	qmstuf.os	/^      real*8 egau$/;"	v	module:qmstuf
egauss	egauss.os	/^      subroutine egauss$/;"	s
egauss0a	egauss.os	/^      subroutine egauss0a$/;"	s
egauss0b	egauss.os	/^      subroutine egauss0b$/;"	s
egauss0c	egauss.os	/^      subroutine egauss0c$/;"	s
egauss0d	egauss.os	/^      subroutine egauss0d$/;"	s
egauss1	egauss1.os	/^      subroutine egauss1$/;"	s
egauss1a	egauss1.os	/^      subroutine egauss1a$/;"	s
egauss1b	egauss1.os	/^      subroutine egauss1b$/;"	s
egauss1c	egauss1.os	/^      subroutine egauss1c$/;"	s
egauss1d	egauss1.os	/^      subroutine egauss1d$/;"	s
egauss2	egauss2.os	/^      subroutine egauss2 /;"	s
egauss2a	egauss2.os	/^      subroutine egauss2a /;"	s
egauss2b	egauss2.os	/^      subroutine egauss2b /;"	s
egauss3	egauss3.os	/^      subroutine egauss3$/;"	s
egauss3a	egauss3.os	/^      subroutine egauss3a$/;"	s
egauss3b	egauss3.os	/^      subroutine egauss3b$/;"	s
egauss3c	egauss3.os	/^      subroutine egauss3c$/;"	s
egauss3d	egauss3.os	/^      subroutine egauss3d$/;"	s
egb0a	esolv.os	/^      subroutine egb0a$/;"	s
egb0b	esolv.os	/^      subroutine egb0b$/;"	s
egb0c	esolv.os	/^      subroutine egb0c$/;"	s
egb1a	esolv1.os	/^      subroutine egb1a$/;"	s
egb1b	esolv1.os	/^      subroutine egb1b$/;"	s
egb1c	esolv1.os	/^      subroutine egb1c$/;"	s
egb2a	esolv2.os	/^      subroutine egb2a /;"	s
egb2b	esolv2.os	/^      subroutine egb2b /;"	s
egb3a	esolv3.os	/^      subroutine egb3a$/;"	s
egb3b	esolv3.os	/^      subroutine egb3b$/;"	s
egb3c	esolv3.os	/^      subroutine egb3c$/;"	s
egeom	egeom.os	/^      subroutine egeom$/;"	s
egeom1	egeom1.os	/^      subroutine egeom1$/;"	s
egeom2	egeom2.os	/^      subroutine egeom2 /;"	s
egeom3	egeom3.os	/^      subroutine egeom3$/;"	s
egk	esolv.os	/^      subroutine egk$/;"	s
egk0a	esolv.os	/^      subroutine egk0a$/;"	s
egk1	esolv1.os	/^      subroutine egk1$/;"	s
egk1a	esolv1.os	/^      subroutine egk1a$/;"	s
egk3	esolv3.os	/^      subroutine egk3$/;"	s
egk3a	esolv3.os	/^      subroutine egk3a$/;"	s
ehal	ehal.os	/^      subroutine ehal$/;"	s
ehal0a	ehal.os	/^      subroutine ehal0a$/;"	s
ehal0b	ehal.os	/^      subroutine ehal0b$/;"	s
ehal0c	ehal.os	/^      subroutine ehal0c$/;"	s
ehal1	ehal1.os	/^      subroutine ehal1$/;"	s
ehal1a	ehal1.os	/^      subroutine ehal1a$/;"	s
ehal1b	ehal1.os	/^      subroutine ehal1b$/;"	s
ehal1c	ehal1.os	/^      subroutine ehal1c$/;"	s
ehal2	ehal2.os	/^      subroutine ehal2 /;"	s
ehal3	ehal3.os	/^      subroutine ehal3$/;"	s
ehal3a	ehal3.os	/^      subroutine ehal3a$/;"	s
ehal3b	ehal3.os	/^      subroutine ehal3b$/;"	s
ehal3c	ehal3.os	/^      subroutine ehal3c$/;"	s
ehpmf	esolv.os	/^      subroutine ehpmf /;"	s
ehpmf1	esolv1.os	/^      subroutine ehpmf1 /;"	s
ehpmf3	esolv3.os	/^      subroutine ehpmf3 /;"	s
eid	energi.os	/^      real*8 eopb,eopd,eid$/;"	v	module:energi
eigen	embed.os	/^      subroutine eigen /;"	s
eimprop	eimprop.os	/^      subroutine eimprop$/;"	s
eimprop1	eimprop1.os	/^      subroutine eimprop1$/;"	s
eimprop2	eimprop2.os	/^      subroutine eimprop2 /;"	s
eimprop3	eimprop3.os	/^      subroutine eimprop3$/;"	s
eimptor	eimptor.os	/^      subroutine eimptor$/;"	s
eimptor1	eimptor1.os	/^      subroutine eimptor1$/;"	s
eimptor2	eimptor2.os	/^      subroutine eimptor2 /;"	s
eimptor3	eimptor3.os	/^      subroutine eimptor3$/;"	s
einter	inter.os	/^      real*8 einter$/;"	v	module:inter
eit	energi.os	/^      real*8 eit,/;"	v	module:energi
elambda	mutant.os	/^      real*8 elambda$/;"	v	module:mutant
electric	chgpot.os	/^      real*8 electric$/;"	v	module:chgpot
electron	korbs.os	/^      real*8 electron(/;"	v	module:korbs
elemnt	ptable.os	/^      character*3 elemnt(/;"	v	module:ptable
elf	energi.os	/^      real*8 er,es,elf$/;"	v	module:energi
elj	elj.os	/^      subroutine elj$/;"	s
elj0a	elj.os	/^      subroutine elj0a$/;"	s
elj0b	elj.os	/^      subroutine elj0b$/;"	s
elj0c	elj.os	/^      subroutine elj0c$/;"	s
elj0d	elj.os	/^      subroutine elj0d$/;"	s
elj0e	elj.os	/^      subroutine elj0e$/;"	s
elj1	elj1.os	/^      subroutine elj1$/;"	s
elj1a	elj1.os	/^      subroutine elj1a$/;"	s
elj1b	elj1.os	/^      subroutine elj1b$/;"	s
elj1c	elj1.os	/^      subroutine elj1c$/;"	s
elj1d	elj1.os	/^      subroutine elj1d$/;"	s
elj1e	elj1.os	/^      subroutine elj1e$/;"	s
elj2	elj2.os	/^      subroutine elj2 /;"	s
elj2a	elj2.os	/^      subroutine elj2a /;"	s
elj2b	elj2.os	/^      subroutine elj2b /;"	s
elj2c	elj2.os	/^      subroutine elj2c /;"	s
elj3	elj3.os	/^      subroutine elj3$/;"	s
elj3a	elj3.os	/^      subroutine elj3a$/;"	s
elj3b	elj3.os	/^      subroutine elj3b$/;"	s
elj3c	elj3.os	/^      subroutine elj3c$/;"	s
elj3d	elj3.os	/^      subroutine elj3d$/;"	s
elj3e	elj3.os	/^      subroutine elj3e$/;"	s
elst	neigh.os	/^      integer, allocatable :: elst(/;"	v	module:neigh
em	energi.os	/^      real*8 ed,em,/;"	v	module:energi
emass	units.os	/^      real*8 emass,/;"	v	module:units
embed	embed.os	/^      subroutine embed$/;"	s
emetal	emetal.os	/^      subroutine emetal$/;"	s
emetal1	emetal1.os	/^      subroutine emetal1$/;"	s
emetal2	emetal2.os	/^      subroutine emetal2 /;"	s
emetal3	emetal3.os	/^      subroutine emetal3$/;"	s
emm3hb	emm3hb.os	/^      subroutine emm3hb$/;"	s
emm3hb0a	emm3hb.os	/^      subroutine emm3hb0a$/;"	s
emm3hb0b	emm3hb.os	/^      subroutine emm3hb0b$/;"	s
emm3hb0c	emm3hb.os	/^      subroutine emm3hb0c$/;"	s
emm3hb1	emm3hb1.os	/^      subroutine emm3hb1$/;"	s
emm3hb1a	emm3hb1.os	/^      subroutine emm3hb1a$/;"	s
emm3hb1b	emm3hb1.os	/^      subroutine emm3hb1b$/;"	s
emm3hb1c	emm3hb1.os	/^      subroutine emm3hb1c$/;"	s
emm3hb2	emm3hb2.os	/^      subroutine emm3hb2 /;"	s
emm3hb3	emm3hb3.os	/^      subroutine emm3hb3$/;"	s
emm3hb3a	emm3hb3.os	/^      subroutine emm3hb3a$/;"	s
emm3hb3b	emm3hb3.os	/^      subroutine emm3hb3b$/;"	s
emm3hb3c	emm3hb3.os	/^      subroutine emm3hb3c$/;"	s
emorb	orbits.os	/^      real*8, allocatable :: emorb(/;"	v	module:orbits
empole	empole.os	/^      subroutine empole$/;"	s
empole0a	empole.os	/^      subroutine empole0a$/;"	s
empole0b	empole.os	/^      subroutine empole0b$/;"	s
empole0c	empole.os	/^      subroutine empole0c$/;"	s
empole0d	empole.os	/^      subroutine empole0d$/;"	s
empole1	empole1.os	/^      subroutine empole1$/;"	s
empole1a	empole1.os	/^      subroutine empole1a$/;"	s
empole1b	empole1.os	/^      subroutine empole1b$/;"	s
empole1c	empole1.os	/^      subroutine empole1c$/;"	s
empole1d	empole1.os	/^      subroutine empole1d$/;"	s
empole2	empole2.os	/^      subroutine empole2 /;"	s
empole2a	empole2.os	/^      subroutine empole2a /;"	s
empole3	empole3.os	/^      subroutine empole3$/;"	s
empole3a	empole3.os	/^      subroutine empole3a$/;"	s
empole3b	empole3.os	/^      subroutine empole3b$/;"	s
empole3c	empole3.os	/^      subroutine empole3c$/;"	s
empole3d	empole3.os	/^      subroutine empole3d$/;"	s
emrecip	empole.os	/^      subroutine emrecip$/;"	s
emrecip1	empole1.os	/^      subroutine emrecip1$/;"	s
energi	energi.os	/^      module energi$/;"	m
energy	energy.os	/^      function energy /;"	os
enext	faces.os	/^      integer, allocatable :: enext(/;"	v	module:faces
enp	esolv.os	/^      subroutine enp /;"	s
enp1	esolv1.os	/^      subroutine enp1 /;"	s
enp3	esolv3.os	/^      subroutine enp3 /;"	s
env	faces.os	/^      integer, allocatable :: env(/;"	v	module:faces
eopb	energi.os	/^      real*8 eopb,/;"	v	module:energi
eopbend	eopbend.os	/^      subroutine eopbend$/;"	s
eopbend1	eopbend1.os	/^      subroutine eopbend1$/;"	s
eopbend2	eopbend2.os	/^      subroutine eopbend2 /;"	s
eopbend2a	eopbend2.os	/^      subroutine eopbend2a /;"	s
eopbend3	eopbend3.os	/^      subroutine eopbend3$/;"	s
eopd	energi.os	/^      real*8 eopb,eopd,/;"	v	module:energi
eopdist	eopdist.os	/^      subroutine eopdist$/;"	s
eopdist1	eopdist1.os	/^      subroutine eopdist1$/;"	s
eopdist2	eopdist2.os	/^      subroutine eopdist2 /;"	s
eopdist3	eopdist3.os	/^      subroutine eopdist3$/;"	s
ep	energi.os	/^      real*8 ed,em,ep$/;"	v	module:energi
epb	esolv.os	/^      subroutine epb$/;"	s
epb1	esolv1.os	/^      subroutine epb1$/;"	s
epb1a	esolv1.os	/^      subroutine epb1a$/;"	s
epb3	esolv3.os	/^      subroutine epb3$/;"	s
epc	faces.os	/^      integer, allocatable :: epc(/;"	v	module:faces
epitors	epitors.os	/^      subroutine epitors$/;"	s
epitors1	epitors1.os	/^      subroutine epitors1$/;"	s
epitors2	epitors2.os	/^      subroutine epitors2 /;"	s
epitors2a	epitors2.os	/^      subroutine epitors2a /;"	s
epitors3	epitors3.os	/^      subroutine epitors3$/;"	s
epnext	faces.os	/^      integer, allocatable :: epnext(/;"	v	module:faces
epot	potfit.os	/^      real*8, allocatable :: epot(/;"	v	module:potfit
eps	kvdws.os	/^      real*8 eps(/;"	v	module:kvdws
eps4	kvdws.os	/^      real*8 eps4(/;"	v	module:kvdws
epsh	nonpol.os	/^      real*8 epso,epsh$/;"	v	module:nonpol
epshb	khbond.os	/^      real*8 epshb(/;"	v	module:khbond
epshbnd	vdw.os	/^      real*8, allocatable :: epshbnd(/;"	v	module:vdw
epsilon	vdw.os	/^      real*8, allocatable :: epsilon(/;"	v	module:vdw
epsilon4	vdw.os	/^      real*8, allocatable :: epsilon4(/;"	v	module:vdw
epso	nonpol.os	/^      real*8 epso,/;"	v	module:nonpol
epspr	kvdwpr.os	/^      real*8 epspr(/;"	v	module:kvdwpr
epsrule	vdwpot.os	/^      character*10 radrule,epsrule$/;"	v	module:vdwpot
ept	energi.os	/^      real*8 eit,et,ept$/;"	v	module:energi
epuclc	connolly.os	/^      subroutine epuclc /;"	s
epv	faces.os	/^      integer, allocatable :: epv(/;"	v	module:faces
eqclass	merck.os	/^      integer eqclass(/;"	v	module:merck
equal	ascii.os	/^      integer equal,/;"	v	module:ascii
er	energi.os	/^      real*8 er,/;"	v	module:energi
ereal0c	empole.os	/^      subroutine ereal0c$/;"	s
ereal0d	empole.os	/^      subroutine ereal0d$/;"	s
ereal1c	empole1.os	/^      subroutine ereal1c /;"	s
ereal1d	empole1.os	/^      subroutine ereal1d /;"	s
ereal3c	empole3.os	/^      subroutine ereal3c /;"	s
ereal3d	empole3.os	/^      subroutine ereal3d /;"	s
erf	erf.os	/^      function erf /;"	os
erfc	erf.os	/^      function erfc /;"	os
erfcore	erf.os	/^      subroutine erfcore /;"	s
erfik	erxnfld.os	/^      subroutine erfik /;"	s
erfinv	erf.os	/^      function erfinv /;"	os
erxnfld	erxnfld.os	/^      subroutine erxnfld$/;"	s
erxnfld1	erxnfld1.os	/^      subroutine erxnfld1$/;"	s
erxnfld2	erxnfld2.os	/^      subroutine erxnfld2 /;"	s
erxnfld3	erxnfld3.os	/^      subroutine erxnfld3$/;"	s
es	energi.os	/^      real*8 er,es,/;"	v	module:energi
escape	ascii.os	/^      integer carriage,escape$/;"	v	module:ascii
esolv	esolv.os	/^      subroutine esolv$/;"	s
esolv1	esolv1.os	/^      subroutine esolv1$/;"	s
esolv2	esolv2.os	/^      subroutine esolv2 /;"	s
esolv3	esolv3.os	/^      subroutine esolv3$/;"	s
estrbnd	estrbnd.os	/^      subroutine estrbnd$/;"	s
estrbnd1	estrbnd1.os	/^      subroutine estrbnd1$/;"	s
estrbnd2	estrbnd2.os	/^      subroutine estrbnd2 /;"	s
estrbnd3	estrbnd3.os	/^      subroutine estrbnd3$/;"	s
estrtor	estrtor.os	/^      subroutine estrtor$/;"	s
estrtor1	estrtor1.os	/^      subroutine estrtor1$/;"	s
estrtor2	estrtor2.os	/^      subroutine estrtor2 /;"	s
estrtor3	estrtor3.os	/^      subroutine estrtor3$/;"	s
esum	energi.os	/^      real*8 esum,/;"	v	module:energi
et	energi.os	/^      real*8 eit,et,/;"	v	module:energi
eta	bath.os	/^      real*8 eta,/;"	v	module:bath
etors	etors.os	/^      subroutine etors$/;"	s
etors0a	etors.os	/^      subroutine etors0a$/;"	s
etors0b	etors.os	/^      subroutine etors0b$/;"	s
etors1	etors1.os	/^      subroutine etors1$/;"	s
etors1a	etors1.os	/^      subroutine etors1a$/;"	s
etors1b	etors1.os	/^      subroutine etors1b$/;"	s
etors2	etors2.os	/^      subroutine etors2 /;"	s
etors2a	etors2.os	/^      subroutine etors2a /;"	s
etors2b	etors2.os	/^      subroutine etors2b /;"	s
etors3	etors3.os	/^      subroutine etors3$/;"	s
etors3a	etors3.os	/^      subroutine etors3a$/;"	s
etors3b	etors3.os	/^      subroutine etors3b$/;"	s
etortor	etortor.os	/^      subroutine etortor$/;"	s
etortor1	etortor1.os	/^      subroutine etortor1$/;"	s
etortor2	etortor2.os	/^      subroutine etortor2 /;"	s
etortor3	etortor3.os	/^      subroutine etortor3$/;"	s
etree	tree.os	/^      real*8 etree$/;"	v	module:tree
ett	energi.os	/^      real*8 ebt,eat,ett$/;"	v	module:energi
eub	energi.os	/^      real*8 eba,eub,/;"	v	module:energi
eurey	eurey.os	/^      subroutine eurey$/;"	s
eurey1	eurey1.os	/^      subroutine eurey1$/;"	s
eurey2	eurey2.os	/^      subroutine eurey2 /;"	s
eurey3	eurey3.os	/^      subroutine eurey3$/;"	s
ev	energi.os	/^      real*8 ev,/;"	v	module:energi
evcorr	evcorr.os	/^      subroutine evcorr /;"	s
evcorr1	evcorr.os	/^      subroutine evcorr1 /;"	s
evolt	units.os	/^      real*8 evolt,/;"	v	module:units
ewald	ewald.os	/^      module ewald$/;"	m
ewaldcof	kewald.os	/^      subroutine ewaldcof /;"	s
ewaldcut	limits.os	/^      real*8 ewaldcut,/;"	v	module:limits
ewca	esolv.os	/^      subroutine ewca /;"	s
ewca1	esolv1.os	/^      subroutine ewca1 /;"	s
ewca3	esolv3.os	/^      subroutine ewca3 /;"	s
ewca3x	esolv3.os	/^      subroutine ewca3x /;"	s
ewcax	esolv.os	/^      subroutine ewcax /;"	s
ex	energi.os	/^      real*8 eg,ex,/;"	v	module:energi
exclamation	ascii.os	/^      integer space,exclamation$/;"	v	module:ascii
explore	embed.os	/^      subroutine explore /;"	s
extent	kewald.os	/^      subroutine extent /;"	s
extra	extra.os	/^      subroutine extra$/;"	s
extra1	extra1.os	/^      subroutine extra1$/;"	s
extra2	extra2.os	/^      subroutine extra2 /;"	s
extra3	extra3.os	/^      subroutine extra3$/;"	s
f0	shunt.os	/^      real*8 f0,/;"	v	module:shunt
f1	shunt.os	/^      real*8 f0,f1,/;"	v	module:shunt
f2	shunt.os	/^      real*8 f0,f1,f2,/;"	v	module:shunt
f3	shunt.os	/^      real*8 f0,f1,f2,f3$/;"	v	module:shunt
f4	shunt.os	/^      real*8 f4,/;"	v	module:shunt
f5	shunt.os	/^      real*8 f4,f5,/;"	v	module:shunt
f6	shunt.os	/^      real*8 f4,f5,f6,/;"	v	module:shunt
f7	shunt.os	/^      real*8 f4,f5,f6,f7$/;"	v	module:shunt
faces	faces.os	/^      module faces$/;"	m
fatal	fatal.os	/^      subroutine fatal$/;"	s
fatm	potfit.os	/^      logical, allocatable :: fatm(/;"	v	module:potfit
fcadj	merck.os	/^      real*8 fcadj(/;"	v	module:merck
fctmin	minima.os	/^      real*8 fctmin$/;"	v	module:minima
fft	fft.os	/^      module fft$/;"	m
fftback	fft3d.os	/^      subroutine fftback$/;"	s
fftfront	fft3d.os	/^      subroutine fftfront$/;"	s
fftsetup	fft3d.os	/^      subroutine fftsetup$/;"	s
ffttable	fft.os	/^      real*8, allocatable :: ffttable(/;"	v	module:fft
ffttyp	fft.os	/^      character*7 ffttyp$/;"	v	module:fft
fgamma	stodyn.os	/^      real*8, allocatable :: fgamma(/;"	v	module:stodyn
fgcent	pbstuf.os	/^      real*8 fgcent(/;"	v	module:pbstuf
fgrid	pbstuf.os	/^      real*8 fgrid(/;"	v	module:pbstuf
field	field.os	/^      subroutine field$/;"	s
fields	fields.os	/^      module fields$/;"	m
filename	files.os	/^      character*120 filename$/;"	v	module:files
files	files.os	/^      module files$/;"	m
final	final.os	/^      subroutine final$/;"	s
fit_angle	valfit.os	/^      logical fit_bond,fit_angle$/;"	v	module:valfit
fit_bond	valfit.os	/^      logical fit_bond,/;"	v	module:valfit
fit_dpl	potfit.os	/^      logical fit_mpl,fit_dpl$/;"	v	module:potfit
fit_force	valfit.os	/^      logical fit_struct,fit_force$/;"	v	module:valfit
fit_mpl	potfit.os	/^      logical fit_mpl,/;"	v	module:potfit
fit_opbend	valfit.os	/^      logical fit_opbend,/;"	v	module:valfit
fit_qdp	potfit.os	/^      logical fit_qdp$/;"	v	module:potfit
fit_strbnd	valfit.os	/^      logical fit_strbnd,/;"	v	module:valfit
fit_struct	valfit.os	/^      logical fit_struct,/;"	v	module:valfit
fit_tors	valfit.os	/^      logical fit_opbend,fit_tors$/;"	v	module:valfit
fit_urey	valfit.os	/^      logical fit_strbnd,fit_urey$/;"	v	module:valfit
fixpdb	readpdb.os	/^      subroutine fixpdb /;"	s
flatten	flatten.os	/^      subroutine flatten$/;"	s
fnen	faces.os	/^      integer, allocatable :: fnen(/;"	v	module:faces
forcefield	fields.os	/^      character*20 forcefield$/;"	v	module:fields
formfeed	ascii.os	/^      integer linefeed,formfeed$/;"	v	module:ascii
fpa	faces.os	/^      integer, allocatable :: fpa(/;"	v	module:faces
fpcy	faces.os	/^      integer, allocatable :: fpcy(/;"	v	module:faces
fphi_mpole	pmestuff.os	/^      subroutine fphi_mpole /;"	s
fphi_to_cphi	pmestuff.os	/^      subroutine fphi_to_cphi /;"	s
fphi_uind	pmestuff.os	/^      subroutine fphi_uind /;"	s
fpncy	faces.os	/^      integer, allocatable :: fpncy(/;"	v	module:faces
frac_to_cart	pmestuff.os	/^      subroutine frac_to_cart /;"	s
fracdist	embed.os	/^      subroutine fracdist /;"	s
fracs	fracs.os	/^      module fracs$/;"	m
frameDID	AmberNetcdf.h	/^  int frameDID;       \/\/ ID of frame dimension$/;"	m	struct:AmberNetcdf
frcsave	mdstuf.os	/^      logical frcsave$/;"	v	module:mdstuf
freeunit	freeunit.os	/^      function freeunit /;"	os
freeze	freeze.os	/^      module freeze$/;"	m
friction	stodyn.os	/^      real*8 friction$/;"	v	module:stodyn
frontslash	ascii.os	/^      integer period,frontslash$/;"	v	module:ascii
fsen	faces.os	/^      integer, allocatable :: fsen(/;"	v	module:faces
fsep	faces.os	/^      integer, allocatable :: fsep(/;"	v	module:faces
g	merck.os	/^      real*8 g(/;"	v	module:merck
gamma	boxes.os	/^      real*8 alpha,beta,gamma$/;"	v	module:boxes
gamma_cos	boxes.os	/^      real*8 gamma_cos$/;"	v	module:boxes
gamma_sin	boxes.os	/^      real*8 gamma_sin$/;"	v	module:boxes
gamma_term	boxes.os	/^      real*8 gamma_term$/;"	v	module:boxes
gammaref	refer.os	/^      real*8 gammaref(/;"	v	module:refer
gammln	invbeta.os	/^      function gammln /;"	os
gasconst	units.os	/^      real*8 gasconst$/;"	v	module:units
gatm	potfit.os	/^      logical, allocatable :: gatm(/;"	v	module:potfit
gausstyp	vdwpot.os	/^      character*8 radsiz,gausstyp$/;"	v	module:vdwpot
gbar	bath.os	/^      real*8 vbar,qbar,gbar$/;"	v	module:bath
gc	paths.os	/^      real*8, allocatable :: gc(/;"	v	module:paths
gcent	pbstuf.os	/^      real*8 gcent(/;"	v	module:pbstuf
gdastat	diffeq.os	/^      subroutine gdastat /;"	s
gear	uprior.os	/^      real*8 gear(/;"	v	module:uprior
gendot	connolly.os	/^      subroutine gendot /;"	s
geodesic	embed.os	/^      subroutine geodesic$/;"	s
geometry	geometry.os	/^      function geometry /;"	os
georad	disgeo.os	/^      real*8, allocatable :: georad(/;"	v	module:disgeo
getchunk	kewald.os	/^      subroutine getchunk$/;"	s
getint	getint.os	/^      subroutine getint$/;"	s
getkey	getkey.os	/^      subroutine getkey$/;"	s
getmol	getmol.os	/^      subroutine getmol$/;"	s
getmol2	getmol2.os	/^      subroutine getmol2$/;"	s
getmonitor	server.os	/^      subroutine getmonitor /;"	s
getnetcdf	readnc.f90	/^subroutine getnetcdf(/;"	s
getnumb	getnumb.os	/^      subroutine getnumb /;"	s
getpdb	getpdb.os	/^      subroutine getpdb$/;"	s
getprb	connolly.os	/^      subroutine getprb /;"	s
getprm	getprm.os	/^      subroutine getprm$/;"	s
getref	getref.os	/^      subroutine getref /;"	s
getstring	getstring.os	/^      subroutine getstring /;"	s
gettext	gettext.os	/^      subroutine gettext /;"	s
gettime	clock.os	/^      subroutine gettime /;"	s
gettor	connolly.os	/^      subroutine gettor /;"	s
gettrr	readtrr.f90	/^subroutine gettrr(/;"	s
getword	getword.os	/^      subroutine getword /;"	s
getxyz	getxyz.os	/^      subroutine getxyz$/;"	s
gfix	restrn.os	/^      real*8, allocatable :: gfix(/;"	v	module:restrn
gforce	qmstuf.os	/^      real*8, allocatable :: gforce(/;"	v	module:qmstuf
gfreq	qmstuf.os	/^      real*8, allocatable :: gfreq(/;"	v	module:qmstuf
gh	qmstuf.os	/^      real*8, allocatable :: gh(/;"	v	module:qmstuf
ghal	vdwpot.os	/^      real*8 ghal,/;"	v	module:vdwpot
ghmcstep	ghmcstep.os	/^      subroutine ghmcstep /;"	s
ghmcterm	ghmcstep.os	/^      subroutine ghmcterm /;"	s
gkc	gkstuf.os	/^      real*8 gkc$/;"	v	module:gkstuf
gkr	gkstuf.os	/^      real*8 gkr(/;"	v	module:gkstuf
gkstuf	gkstuf.os	/^      module gkstuf$/;"	m
glyco	nucleo.os	/^      real*8 glyco(/;"	v	module:nucleo
gmx	gmxtrr.h	/^namespace gmx{$/;"	n
gmxtrr	output.os	/^      logical gmxtrr$/;"	v	module:output
gnh	bath.os	/^      real*8 gnh(/;"	v	module:bath
gobc	solute.os	/^      real*8, allocatable :: gobc(/;"	v	module:solute
gpol	solute.os	/^      real*8, allocatable :: gpol(/;"	v	module:solute
gradfast	respa.os	/^      subroutine gradfast /;"	s
gradient	gradient.os	/^      subroutine gradient /;"	s
gradrgd	gradrgd.os	/^      subroutine gradrgd /;"	s
gradrot	gradrot.os	/^      subroutine gradrot /;"	s
gradslow	respa.os	/^      subroutine gradslow /;"	s
grafic	embed.os	/^      subroutine grafic /;"	s
grdoff	chunks.os	/^      integer nlpts,nrpts,grdoff$/;"	v	module:chunks
grid	pbstuf.os	/^      real*8 grid(/;"	v	module:pbstuf
grid_mpole	pmestuff.os	/^      subroutine grid_mpole /;"	s
grid_pchg	pmestuff.os	/^      subroutine grid_pchg$/;"	s
grid_uind	pmestuff.os	/^      subroutine grid_uind /;"	s
group	group.os	/^      module group$/;"	m
groups	groups.os	/^      subroutine groups /;"	s
grpline	grpline.os	/^      subroutine grpline$/;"	s
grplist	group.os	/^      integer, allocatable :: grplist(/;"	v	module:group
grpmass	group.os	/^      real*8, allocatable :: grpmass(/;"	v	module:group
gx	qmstuf.os	/^      real*8, allocatable :: gx(/;"	v	module:qmstuf
gy	qmstuf.os	/^      real*8, allocatable :: gy(/;"	v	module:qmstuf
gyrate	gyrate.os	/^      subroutine gyrate /;"	s
gz	qmstuf.os	/^      real*8, allocatable :: gz(/;"	v	module:qmstuf
h1	hpmf.os	/^      real*8 h1,/;"	v	module:hpmf
h1typ	resdue.os	/^      integer h1typ(/;"	v	module:resdue
h2	hpmf.os	/^      real*8 h1,h2,/;"	v	module:hpmf
h21typ	resdue.os	/^      integer h21typ(/;"	v	module:resdue
h22typ	resdue.os	/^      integer h22typ(/;"	v	module:resdue
h3	hpmf.os	/^      real*8 h1,h2,h3$/;"	v	module:hpmf
h3ttyp	resdue.os	/^      integer h3ttyp(/;"	v	module:resdue
h3typ	resdue.os	/^      integer h3typ(/;"	v	module:resdue
h4typ	resdue.os	/^      integer h4typ(/;"	v	module:resdue
h51typ	resdue.os	/^      integer h51typ(/;"	v	module:resdue
h52typ	resdue.os	/^      integer h52typ(/;"	v	module:resdue
h5ttyp	resdue.os	/^      integer h5ttyp(/;"	v	module:resdue
hactyp	resdue.os	/^      integer hactyp(/;"	v	module:resdue
hangle	hybrid.os	/^      subroutine hangle$/;"	s
hantyp	resdue.os	/^      integer hantyp(/;"	v	module:resdue
hartree	units.os	/^      real*8 bohr,hartree$/;"	v	module:units
hatom	hybrid.os	/^      subroutine hatom$/;"	s
hatyp	resdue.os	/^      integer hatyp(/;"	v	module:resdue
hbond	hybrid.os	/^      subroutine hbond$/;"	s
hcharge	hybrid.os	/^      subroutine hcharge$/;"	s
hdipole	hybrid.os	/^      subroutine hdipole$/;"	s
hescut	hescut.os	/^      module hescut$/;"	m
hesscut	hescut.os	/^      real*8 hesscut$/;"	v	module:hescut
hessian	hessian.os	/^      subroutine hessian /;"	s
hessn	hessn.os	/^      module hessn$/;"	m
hessrgd	hessrgd.os	/^      subroutine hessrgd /;"	s
hessrot	hessrot.os	/^      subroutine hessrot /;"	s
hessx	hessn.os	/^      real*8, allocatable :: hessx(/;"	v	module:hessn
hessy	hessn.os	/^      real*8, allocatable :: hessy(/;"	v	module:hessn
hessz	hessn.os	/^      real*8, allocatable :: hessz(/;"	v	module:hessn
hguess	minima.os	/^      real*8 hguess$/;"	v	module:minima
himptor	hybrid.os	/^      subroutine himptor$/;"	s
hlxform	nucleo.os	/^      character*1 hlxform$/;"	v	module:nucleo
hnctyp	resdue.os	/^      integer hnctyp(/;"	v	module:resdue
hnntyp	resdue.os	/^      integer hnntyp(/;"	v	module:resdue
hntyp	resdue.os	/^      integer hntyp(/;"	v	module:resdue
holdup	inform.os	/^      logical debug,holdup,/;"	v	module:inform
hoover	nose.os	/^      subroutine hoover /;"	s
hpmf	hpmf.os	/^      module hpmf$/;"	m
hpmfcut	hpmf.os	/^      real*8 hpmfcut$/;"	v	module:hpmf
hstrbnd	hybrid.os	/^      subroutine hstrbnd$/;"	s
hstrtor	hybrid.os	/^      subroutine hstrtor$/;"	s
htors	hybrid.os	/^      subroutine htors$/;"	s
huge	precis.os	/^      real*8 huge$/;"	v	module:precis
hvdw	hybrid.os	/^      subroutine hvdw$/;"	s
hybrid	hybrid.os	/^      subroutine hybrid$/;"	s
i12	couple.os	/^      integer i12(/;"	v	module:couple
i12ref	refer.os	/^      integer, allocatable :: i12ref(/;"	v	module:refer
i13	couple.os	/^      integer, allocatable :: i13(/;"	v	module:couple
i14	couple.os	/^      integer, allocatable :: i14(/;"	v	module:couple
i15	couple.os	/^      integer, allocatable :: i15(/;"	v	module:couple
ia_ct	ct.os	/^      integer, allocatable :: ia_ct(/;"	v	module:ct
ia_ctp	ct.os	/^      integer ia_ctp(/;"	v	module:ct
iaa	angang.os	/^      integer, allocatable :: iaa(/;"	v	module:angang
iadd	zclose.os	/^      integer iadd(/;"	v	module:zclose
iafix	restrn.os	/^      integer, allocatable :: iafix(/;"	v	module:restrn
iang	angbnd.os	/^      integer, allocatable :: iang(/;"	v	module:angbnd
iat	angtor.os	/^      integer, allocatable :: iat(/;"	v	module:angtor
ib_ct	ct.os	/^      integer, allocatable :: ib_ct(/;"	v	module:ct
ib_ctp	ct.os	/^      integer ib_ctp(/;"	v	module:ct
ibitor	bitor.os	/^      integer, allocatable :: ibitor(/;"	v	module:bitor
ibnd	bndstr.os	/^      integer, allocatable :: ibnd(/;"	v	module:bndstr
ibpi	piorbs.os	/^      integer, allocatable :: ibpi(/;"	v	module:piorbs
icell	cell.os	/^      integer, allocatable :: icell(/;"	v	module:cell
ichain	sequen.os	/^      integer ichain(/;"	v	module:sequen
ichir	restrn.os	/^      integer, allocatable :: ichir(/;"	v	module:restrn
iconj	piorbs.os	/^      integer, allocatable :: iconj(/;"	v	module:piorbs
idel	zclose.os	/^      integer idel(/;"	v	module:zclose
idfix	restrn.os	/^      integer, allocatable :: idfix(/;"	v	module:restrn
idihunit	torpot.os	/^      real*8 idihunit$/;"	v	module:torpot
idpl	dipole.os	/^      integer, allocatable :: idpl(/;"	v	module:dipole
ifit	align.os	/^      integer, allocatable :: ifit(/;"	v	module:align
igauss	vdwpot.os	/^      real*8 igauss(/;"	v	module:vdwpot
igfix	restrn.os	/^      integer, allocatable :: igfix(/;"	v	module:restrn
igrid	pme.os	/^      integer, allocatable :: igrid(/;"	v	module:pme
igrp	group.os	/^      integer, allocatable :: igrp(/;"	v	module:group
iion	charge.os	/^      integer, allocatable :: iion(/;"	v	module:charge
iiprop	improp.os	/^      integer, allocatable :: iiprop(/;"	v	module:improp
iitors	imptor.os	/^      integer, allocatable :: iitors(/;"	v	module:imptor
ijk	rxnfld.os	/^      integer ijk(/;"	v	module:rxnfld
ijkpts	erxnfld.os	/^      subroutine ijkpts$/;"	s
ilevel	tree.os	/^      real*8 ilevel(/;"	v	module:tree
image	image.os	/^      subroutine image /;"	s
imagen	nblist.os	/^      subroutine imagen /;"	s
imager	image.os	/^      subroutine imager /;"	s
imol	molcul.os	/^      integer, allocatable :: imol(/;"	v	module:molcul
impose	impose.os	/^      subroutine impose /;"	s
improp	improp.os	/^      module improp$/;"	m
imptor	imptor.os	/^      module imptor$/;"	m
imut	mutant.os	/^      integer, allocatable :: imut(/;"	v	module:mutant
induce	induce.os	/^      subroutine induce$/;"	s
induce0a	induce.os	/^      subroutine induce0a$/;"	s
induce0d	induce.os	/^      subroutine induce0d$/;"	s
induce0e	induce.os	/^      subroutine induce0e$/;"	s
inedge	connolly.os	/^      subroutine inedge /;"	s
inertia	inertia.os	/^      subroutine inertia /;"	s
inform	inform.os	/^      module inform$/;"	m
initatom	initatom.os	/^      subroutine initatom$/;"	s
initerr	embed.os	/^      function initerr /;"	os
initial	initial.os	/^      subroutine initial$/;"	s
initmmff	initprm.os	/^      subroutine initmmff$/;"	s
initprm	initprm.os	/^      subroutine initprm$/;"	s
initres	initres.os	/^      subroutine initres$/;"	s
initrot	initrot.os	/^      subroutine initrot$/;"	s
input	iounit.os	/^      integer input$/;"	v	module:iounit
insert	insert.os	/^      subroutine insert /;"	s
instyp	pdb.os	/^      character*20 instyp$/;"	v	module:pdb
integrate	mdstuf.os	/^      character*11 integrate$/;"	v	module:mdstuf
inter	inter.os	/^      module inter$/;"	m
intmax	linmin.os	/^      integer intmax$/;"	v	module:linmin
invbeta	invbeta.os	/^      function invbeta /;"	os
invert	invert.os	/^      subroutine invert /;"	s
iomega	omega.os	/^      integer, allocatable :: iomega(/;"	v	module:omega
ionc	pbstuf.os	/^      real*8 ionc(/;"	v	module:pbstuf
ionize	korbs.os	/^      real*8 ionize(/;"	v	module:korbs
ionn	pbstuf.os	/^      integer ionn(/;"	v	module:pbstuf
ionq	pbstuf.os	/^      integer ionq(/;"	v	module:pbstuf
ionr	pbstuf.os	/^      real*8 ionr(/;"	v	module:pbstuf
iopb	opbend.os	/^      integer, allocatable :: iopb(/;"	v	module:opbend
iopd	opdist.os	/^      integer, allocatable :: iopd(/;"	v	module:opdist
iorbit	piorbs.os	/^      integer, allocatable :: iorbit(/;"	v	module:piorbs
iounit	iounit.os	/^      module iounit$/;"	m
iout	iounit.os	/^      integer iout$/;"	v	module:iounit
ip11	polgrp.os	/^      integer, allocatable :: ip11(/;"	v	module:polgrp
ip12	polgrp.os	/^      integer, allocatable :: ip12(/;"	v	module:polgrp
ip13	polgrp.os	/^      integer, allocatable :: ip13(/;"	v	module:polgrp
ip14	polgrp.os	/^      integer, allocatable :: ip14(/;"	v	module:polgrp
ipdb12	pdb.os	/^      integer, allocatable :: ipdb12(/;"	v	module:pdb
ipedge	connolly.os	/^      subroutine ipedge /;"	s
ipfix	restrn.os	/^      integer, allocatable :: ipfix(/;"	v	module:restrn
ipgrid	potfit.os	/^      integer, allocatable :: ipgrid(/;"	v	module:potfit
ipit	pitors.os	/^      integer, allocatable :: ipit(/;"	v	module:pitors
ipmf	hpmf.os	/^      integer, allocatable :: ipmf(/;"	v	module:hpmf
ipole	mpole.os	/^      integer, allocatable :: ipole(/;"	v	module:mpole
iprime	fft.os	/^      integer iprime(/;"	v	module:fft
iprint	inform.os	/^      integer digits,iprint$/;"	v	module:inform
irat	freeze.os	/^      integer, allocatable :: irat(/;"	v	module:freeze
iratx	freeze.os	/^      integer, allocatable :: iratx(/;"	v	module:freeze
ired	vdw.os	/^      integer, allocatable :: ired(/;"	v	module:vdw
iresid	xtals.os	/^      integer iresid(/;"	v	module:xtals
irest	mdstuf.os	/^      integer irest$/;"	v	module:mdstuf
iring3	ring.os	/^      integer, allocatable :: iring3(/;"	v	module:ring
iring4	ring.os	/^      integer, allocatable :: iring4(/;"	v	module:ring
iring5	ring.os	/^      integer, allocatable :: iring5(/;"	v	module:ring
iring6	ring.os	/^      integer, allocatable :: iring6(/;"	v	module:ring
isNCrestart	AmberNetcdf.h	/^  int isNCrestart;    \/\/ 0 if trajectory, 1 if restart$/;"	m	struct:AmberNetcdf
isb	strbnd.os	/^      integer, allocatable :: isb(/;"	v	module:strbnd
isdynamic	output.os	/^      logical isdynamic$/;"	v	module:output
isend	inform.os	/^      integer iwrite,isend$/;"	v	module:inform
isobaric	bath.os	/^      logical isobaric$/;"	v	module:bath
isothermal	bath.os	/^      logical isothermal$/;"	v	module:bath
ist	strtor.os	/^      integer, allocatable :: ist(/;"	v	module:strtor
itfix	restrn.os	/^      integer, allocatable :: itfix(/;"	v	module:restrn
itors	tors.os	/^      integer, allocatable :: itors(/;"	v	module:tors
itors1	imptor.os	/^      real*8, allocatable :: itors1(/;"	v	module:imptor
itors2	imptor.os	/^      real*8, allocatable :: itors2(/;"	v	module:imptor
itors3	imptor.os	/^      real*8, allocatable :: itors3(/;"	v	module:imptor
itorunit	torpot.os	/^      real*8 itorunit$/;"	v	module:torpot
itpi	piorbs.os	/^      integer, allocatable :: itpi(/;"	v	module:piorbs
itt	tortor.os	/^      integer, allocatable :: itt(/;"	v	module:tortor
iury	urey.os	/^      integer, allocatable :: iury(/;"	v	module:urey
iuse	usage.os	/^      integer, allocatable :: iuse(/;"	v	module:usage
ivary	xtals.os	/^      integer ivary(/;"	v	module:xtals
ivdw	vdw.os	/^      integer, allocatable :: ivdw(/;"	v	module:vdw
iwrite	inform.os	/^      integer iwrite,/;"	v	module:inform
iz	zcoord.os	/^      integer iz(/;"	v	module:zcoord
jacobi	jacobi.os	/^      subroutine jacobi /;"	s
jion	charge.os	/^      integer, allocatable :: jion(/;"	v	module:charge
joule	units.os	/^      real*8 joule,/;"	v	module:units
justify	trimtext.os	/^      subroutine justify /;"	s
jvdw	vdw.os	/^      integer, allocatable :: jvdw(/;"	v	module:vdw
ka	kangs.os	/^      character*12 ka(/;"	v	module:kangs
ka3	kangs.os	/^      character*12 ka3(/;"	v	module:kangs
ka4	kangs.os	/^      character*12 ka4(/;"	v	module:kangs
ka5	kangs.os	/^      character*12 ka5(/;"	v	module:kangs
kaa	angang.os	/^      real*8, allocatable :: kaa(/;"	v	module:angang
kaf	kangs.os	/^      character*12 kaf(/;"	v	module:kangs
kanang	kanang.os	/^      module kanang$/;"	m
kangang	kangang.os	/^      subroutine kangang$/;"	s
kangle	kangle.os	/^      subroutine kangle$/;"	s
kanglem	kangle.os	/^      subroutine kanglem$/;"	s
kangs	kangs.os	/^      module kangs$/;"	m
kangtor	kangtor.os	/^      subroutine kangtor$/;"	s
kant	angtor.os	/^      real*8, allocatable :: kant(/;"	v	module:angtor
kantor	kantor.os	/^      module kantor$/;"	m
kat	kantor.os	/^      character*16 kat(/;"	v	module:kantor
katom	katom.os	/^      subroutine katom$/;"	s
katoms	katoms.os	/^      module katoms$/;"	m
kb	kbonds.os	/^      character*8 kb(/;"	v	module:kbonds
kb3	kbonds.os	/^      character*8 kb3(/;"	v	module:kbonds
kb4	kbonds.os	/^      character*8 kb4(/;"	v	module:kbonds
kb5	kbonds.os	/^      character*8 kb5(/;"	v	module:kbonds
kbond	kbond.os	/^      subroutine kbond$/;"	s
kbondm	kbond.os	/^      subroutine kbondm$/;"	s
kbonds	kbonds.os	/^      module kbonds$/;"	m
kbref	merck.os	/^      real*8 kbref(/;"	v	module:merck
kbt	ksttor.os	/^      character*16 kbt(/;"	v	module:ksttor
kbx	light.os	/^      integer, allocatable :: kbx(/;"	v	module:light
kby	light.os	/^      integer, allocatable :: kby(/;"	v	module:light
kbz	light.os	/^      integer, allocatable :: kbz(/;"	v	module:light
kcharge	kcharge.os	/^      subroutine kcharge$/;"	s
kchargem	kcharge.os	/^      subroutine kchargem$/;"	s
kchiral	embed.os	/^      subroutine kchiral$/;"	s
kchrge	kchrge.os	/^      module kchrge$/;"	m
kconj	piorbs.os	/^      integer, allocatable :: kconj(/;"	v	module:piorbs
kct	kct.os	/^      subroutine kct$/;"	s
kd	kdipol.os	/^      character*8 kd(/;"	v	module:kdipol
kd3	kdipol.os	/^      character*8 kd3(/;"	v	module:kdipol
kd4	kdipol.os	/^      character*8 kd4(/;"	v	module:kdipol
kd5	kdipol.os	/^      character*8 kd5(/;"	v	module:kdipol
kdi	kiprop.os	/^      character*16 kdi(/;"	v	module:kiprop
kdipol	kdipol.os	/^      module kdipol$/;"	m
kdipole	kdipole.os	/^      subroutine kdipole$/;"	s
kel	kbonds.os	/^      character*12 kel(/;"	v	module:kbonds
kelvin	bath.os	/^      real*8 kelvin,/;"	v	module:bath
keneg	kbond.os	/^      subroutine keneg$/;"	s
kewald	kewald.os	/^      subroutine kewald$/;"	s
kex	light.os	/^      integer, allocatable :: kex(/;"	v	module:light
kextra	kextra.os	/^      subroutine kextra$/;"	s
key	light.os	/^      integer, allocatable :: key(/;"	v	module:light
keyline	keys.os	/^      character*120 keyline(/;"	v	module:keys
keys	keys.os	/^      module keys$/;"	m
kez	light.os	/^      integer, allocatable :: kez(/;"	v	module:light
kgb	ksolv.os	/^      subroutine kgb$/;"	s
kgeom	kgeom.os	/^      subroutine kgeom$/;"	s
kgk	ksolv.os	/^      subroutine kgk$/;"	s
kgrp	group.os	/^      integer, allocatable :: kgrp(/;"	v	module:group
khb	khbond.os	/^      character*8 khb(/;"	v	module:khbond
khbond	khbond.os	/^      module khbond$/;"	m
khpmf	ksolv.os	/^      subroutine khpmf$/;"	s
kimprop	kimprop.os	/^      subroutine kimprop$/;"	s
kimptor	kimptor.os	/^      subroutine kimptor$/;"	s
kinetic	kinetic.os	/^      subroutine kinetic /;"	s
kion	charge.os	/^      integer, allocatable :: kion(/;"	v	module:charge
kiprop	kiprop.os	/^      module kiprop$/;"	m
kitors	kitors.os	/^      module kitors$/;"	m
kmetal	kmetal.os	/^      subroutine kmetal$/;"	s
kmol	molcul.os	/^      integer, allocatable :: kmol(/;"	v	module:molcul
kmp	kmulti.os	/^      character*16 kmp(/;"	v	module:kmulti
kmpole	kmpole.os	/^      subroutine kmpole$/;"	s
kmulti	kmulti.os	/^      module kmulti$/;"	m
knp	ksolv.os	/^      subroutine knp$/;"	s
kopb	kopbnd.os	/^      character*16 kopb(/;"	v	module:kopbnd
kopbend	kopbend.os	/^      subroutine kopbend$/;"	s
kopbendm	kopbend.os	/^      subroutine kopbendm$/;"	s
kopbnd	kopbnd.os	/^      module kopbnd$/;"	m
kopd	kopdst.os	/^      character*16 kopd(/;"	v	module:kopdst
kopdist	kopdist.os	/^      subroutine kopdist$/;"	s
kopdst	kopdst.os	/^      module kopdst$/;"	m
korbit	korbit.os	/^      subroutine korbit$/;"	s
korbs	korbs.os	/^      module korbs$/;"	m
kpb	ksolv.os	/^      subroutine kpb$/;"	s
kpfix	restrn.os	/^      integer, allocatable :: kpfix(/;"	v	module:restrn
kpi	korbs.os	/^      character*8 kpi(/;"	v	module:korbs
kpi4	korbs.os	/^      character*8 kpi4(/;"	v	module:korbs
kpi5	korbs.os	/^      character*8 kpi5(/;"	v	module:korbs
kpit	pitors.os	/^      real*8, allocatable :: kpit(/;"	v	module:pitors
kpitor	kpitor.os	/^      module kpitor$/;"	m
kpitors	kpitors.os	/^      subroutine kpitors$/;"	s
kpolar	kpolar.os	/^      subroutine kpolar$/;"	s
kpolr	kpolr.os	/^      module kpolr$/;"	m
kprop	improp.os	/^      real*8, allocatable :: kprop(/;"	v	module:improp
kpt	kpitor.os	/^      character*8 kpt(/;"	v	module:kpitor
krat	freeze.os	/^      real*8, allocatable :: krat(/;"	v	module:freeze
kratx	freeze.os	/^      integer, allocatable :: kratx(/;"	v	module:freeze
kred	vdw.os	/^      real*8, allocatable :: kred(/;"	v	module:vdw
ksa	ksolv.os	/^      subroutine ksa$/;"	s
ksb	kstbnd.os	/^      character*12 ksb(/;"	v	module:kstbnd
kslope	pistuf.os	/^      real*8, allocatable :: kslope(/;"	v	module:pistuf
ksolv	ksolv.os	/^      subroutine ksolv$/;"	s
kst	strtor.os	/^      real*8, allocatable :: kst(/;"	v	module:strtor
kstbnd	kstbnd.os	/^      module kstbnd$/;"	m
kstrbnd	kstrbnd.os	/^      subroutine kstrbnd$/;"	s
kstrbndm	kstrbnd.os	/^      subroutine kstrbndm$/;"	s
kstrtor	kstrtor.os	/^      subroutine kstrtor$/;"	s
ksttor	ksttor.os	/^      module ksttor$/;"	m
kt	ktorsn.os	/^      character*16 kt(/;"	v	module:ktorsn
kt4	ktorsn.os	/^      character*16 kt4(/;"	v	module:ktorsn
kt5	ktorsn.os	/^      character*16 kt5(/;"	v	module:ktorsn
kt_1	merck.os	/^      character*16 kt_1(/;"	v	module:merck
kt_2	merck.os	/^      character*16 kt_2(/;"	v	module:merck
kti	kitors.os	/^      character*16 kti(/;"	v	module:kitors
ktors	ktors.os	/^      subroutine ktors$/;"	s
ktorsm	ktors.os	/^      subroutine ktorsm$/;"	s
ktorsn	ktorsn.os	/^      module ktorsn$/;"	m
ktortor	ktortor.os	/^      subroutine ktortor$/;"	s
ktrtor	ktrtor.os	/^      module ktrtor$/;"	m
ktt	ktrtor.os	/^      character*20 ktt(/;"	v	module:ktrtor
ku	kurybr.os	/^      character*12 ku(/;"	v	module:kurybr
kumbrella	kumbrella.os	/^      subroutine kumbrella$/;"	s
kurey	kurey.os	/^      subroutine kurey$/;"	s
kurybr	kurybr.os	/^      module kurybr$/;"	m
kvdw	kvdw.os	/^      subroutine kvdw$/;"	s
kvdwpr	kvdwpr.os	/^      module kvdwpr$/;"	m
kvdws	kvdws.os	/^      module kvdws$/;"	m
kvpr	kvdwpr.os	/^      character*8 kvpr(/;"	v	module:kvdwpr
labelDID	AmberNetcdf.h	/^  int labelDID;$/;"	m	struct:AmberNetcdf
lambda	mutant.os	/^      real*8 lambda$/;"	v	module:mutant
lattice	lattice.os	/^      subroutine lattice$/;"	s
lbfgs	lbfgs.os	/^      subroutine lbfgs /;"	s
lbuf2	neigh.os	/^      real*8 lbuf2,/;"	v	module:neigh
lbuffer	neigh.os	/^      real*8 lbuffer,/;"	v	module:neigh
ldir	files.os	/^      integer ldir,/;"	v	module:files
leng	files.os	/^      integer ldir,leng$/;"	v	module:files
ligand	katoms.os	/^      integer ligand(/;"	v	module:katoms
light	light.os	/^      module light$/;"	m
lightn	nblist.os	/^      subroutine lightn /;"	s
lights	lights.os	/^      subroutine lights /;"	s
lightspd	units.os	/^      real*8 lightspd$/;"	v	module:units
limits	limits.os	/^      module limits$/;"	m
lin	merck.os	/^      integer lin(/;"	v	module:merck
linbody	rgdstep.os	/^      subroutine linbody /;"	s
linear	rgddyn.os	/^      logical, allocatable :: linear(/;"	v	module:rgddyn
linefeed	ascii.os	/^      integer linefeed,/;"	v	module:ascii
linmin	linmin.os	/^      module linmin$/;"	m
listarg	argue.os	/^      logical listarg(/;"	v	module:argue
listpi	piorbs.os	/^      logical, allocatable :: listpi(/;"	v	module:piorbs
lm	rgddyn.os	/^      real*8, allocatable :: lm(/;"	v	module:rgddyn
lmstep	square.os	/^      subroutine lmstep /;"	s
locerr	embed.os	/^      function locerr /;"	os
locx	light.os	/^      integer, allocatable :: locx(/;"	v	module:light
locy	light.os	/^      integer, allocatable :: locy(/;"	v	module:light
locz	light.os	/^      integer, allocatable :: locz(/;"	v	module:light
logten	math.os	/^      real*8 sqrtpi,logten$/;"	v	module:math
lowcase	trimtext.os	/^      subroutine lowcase /;"	s
lslope	pistuf.os	/^      real*8, allocatable :: lslope(/;"	v	module:pistuf
ltitle	titles.os	/^      integer ltitle$/;"	v	module:titles
lvec	boxes.os	/^      real*8 lvec(/;"	v	module:boxes
m2	warp.os	/^      real*8, allocatable :: m2(/;"	v	module:warp
m2scale	mplpot.os	/^      real*8 m2scale$/;"	v	module:mplpot
m3scale	mplpot.os	/^      real*8 m3scale$/;"	v	module:mplpot
m4scale	mplpot.os	/^      real*8 m4scale$/;"	v	module:mplpot
m5scale	mplpot.os	/^      real*8 m5scale$/;"	v	module:mplpot
majorize	embed.os	/^      subroutine majorize /;"	s
makeint	makeint.os	/^      subroutine makeint /;"	s
makeref	makeref.os	/^      subroutine makeref /;"	s
makexyz	makexyz.os	/^      subroutine makexyz$/;"	s
mass	atomid.os	/^      real*8 mass(/;"	v	module:atomid
math	math.os	/^      module math$/;"	m
maxamino	resdue.os	/^      integer maxamino$/;"	v	module:resdue
maxarg	argue.os	/^      integer maxarg$/;"	v	module:argue
maxatm	sizes.os	/^      integer maxatm,/;"	v	module:sizes
maxbio	fields.os	/^      integer maxbio$/;"	v	module:fields
maxc	faces.os	/^      integer maxfn,maxc$/;"	v	module:faces
maxclass	sizes.os	/^      integer maxclass,/;"	v	module:sizes
maxcls	faces.os	/^      integer maxcls,/;"	v	module:faces
maxct	ct.os	/^      integer maxct$/;"	v	module:ct
maxctp	ct.os	/^      integer maxctp$/;"	v	module:ct
maxcy	faces.os	/^      integer maxcy,/;"	v	module:faces
maxele	ptable.os	/^      integer maxele$/;"	v	module:ptable
maxelst	neigh.os	/^      integer maxelst$/;"	v	module:neigh
maxen	faces.os	/^      integer maxv,maxen$/;"	v	module:faces
maxep	faces.os	/^      integer maxep,/;"	v	module:faces
maxfix	sizes.os	/^      integer maxres,maxfix$/;"	v	module:sizes
maxfn	faces.os	/^      integer maxfn,/;"	v	module:faces
maxfp	faces.os	/^      integer maxfp,/;"	v	module:faces
maxfs	faces.os	/^      integer maxep,maxfs$/;"	v	module:faces
maxgauss	vdwpot.os	/^      integer maxgauss$/;"	v	module:vdwpot
maxgrp	sizes.os	/^      integer maxref,maxgrp$/;"	v	module:sizes
maxion	pbstuf.os	/^      integer maxion$/;"	v	module:pbstuf
maxiter	minima.os	/^      integer maxiter$/;"	v	module:minima
maxkey	keys.os	/^      integer maxkey$/;"	v	module:keys
maxlsq	xtals.os	/^      integer maxlsq,/;"	v	module:xtals
maxna	kangs.os	/^      integer maxna$/;"	v	module:kangs
maxna3	kangs.os	/^      integer maxna3$/;"	v	module:kangs
maxna4	kangs.os	/^      integer maxna4$/;"	v	module:kangs
maxna5	kangs.os	/^      integer maxna5$/;"	v	module:kangs
maxnaf	kangs.os	/^      integer maxnaf$/;"	v	module:kangs
maxnat	kantor.os	/^      integer maxnat$/;"	v	module:kantor
maxnb	kbonds.os	/^      integer maxnb$/;"	v	module:kbonds
maxnb3	kbonds.os	/^      integer maxnb3$/;"	v	module:kbonds
maxnb4	kbonds.os	/^      integer maxnb4$/;"	v	module:kbonds
maxnb5	kbonds.os	/^      integer maxnb5$/;"	v	module:kbonds
maxnbt	ksttor.os	/^      integer maxnbt$/;"	v	module:ksttor
maxnd	kdipol.os	/^      integer maxnd$/;"	v	module:kdipol
maxnd3	kdipol.os	/^      integer maxnd3$/;"	v	module:kdipol
maxnd4	kdipol.os	/^      integer maxnd4$/;"	v	module:kdipol
maxnd5	kdipol.os	/^      integer maxnd5$/;"	v	module:kdipol
maxndi	kiprop.os	/^      integer maxndi$/;"	v	module:kiprop
maxnel	kbonds.os	/^      integer maxnel$/;"	v	module:kbonds
maxnhb	khbond.os	/^      integer maxnhb$/;"	v	module:khbond
maxnmp	kmulti.os	/^      integer maxnmp$/;"	v	module:kmulti
maxnopb	kopbnd.os	/^      integer maxnopb$/;"	v	module:kopbnd
maxnopd	kopdst.os	/^      integer maxnopd$/;"	v	module:kopdst
maxnose	bath.os	/^      integer maxnose$/;"	v	module:bath
maxnpi	korbs.os	/^      integer maxnpi$/;"	v	module:korbs
maxnpi4	korbs.os	/^      integer maxnpi4$/;"	v	module:korbs
maxnpi5	korbs.os	/^      integer maxnpi5$/;"	v	module:korbs
maxnpt	kpitor.os	/^      integer maxnpt$/;"	v	module:kpitor
maxnsb	kstbnd.os	/^      integer maxnsb$/;"	v	module:kstbnd
maxnt	ktorsn.os	/^      integer maxnt$/;"	v	module:ktorsn
maxnt4	ktorsn.os	/^      integer maxnt4$/;"	v	module:ktorsn
maxnt5	ktorsn.os	/^      integer maxnt5$/;"	v	module:ktorsn
maxnti	kitors.os	/^      integer maxnti$/;"	v	module:kitors
maxntt	ktrtor.os	/^      integer maxntt$/;"	v	module:ktrtor
maxnu	kurybr.os	/^      integer maxnu$/;"	v	module:kurybr
maxnuc	resdue.os	/^      integer maxnuc$/;"	v	module:resdue
maxnvp	kvdwpr.os	/^      integer maxnvp$/;"	v	module:kvdwpr
maxp	faces.os	/^      integer maxt,maxp$/;"	v	module:faces
maxp11	polgrp.os	/^      integer maxp11,/;"	v	module:polgrp
maxp12	polgrp.os	/^      integer maxp11,maxp12$/;"	v	module:polgrp
maxp13	polgrp.os	/^      integer maxp13,/;"	v	module:polgrp
maxp14	polgrp.os	/^      integer maxp13,maxp14$/;"	v	module:polgrp
maxpole	mpole.os	/^      integer maxpole$/;"	v	module:mpole
maxprime	fft.os	/^      integer maxprime$/;"	v	module:fft
maxprm	params.os	/^      integer maxprm$/;"	v	module:params
maxpss	tree.os	/^      integer maxpss$/;"	v	module:tree
maxref	sizes.os	/^      integer maxref,/;"	v	module:sizes
maxres	sizes.os	/^      integer maxres,/;"	v	module:sizes
maxrsd	xtals.os	/^      integer maxlsq,maxrsd$/;"	v	module:xtals
maxt	faces.os	/^      integer maxt,/;"	v	module:faces
maxtgrd	ktrtor.os	/^      integer maxtgrd$/;"	v	module:ktrtor
maxtgrd2	ktrtor.os	/^      integer maxtgrd2$/;"	v	module:ktrtor
maxtt	faces.os	/^      integer maxcls,maxtt$/;"	v	module:faces
maxtyp	sizes.os	/^      integer maxatm,maxtyp$/;"	v	module:sizes
maxualt	uprior.os	/^      integer maxualt$/;"	v	module:uprior
maxulst	neigh.os	/^      integer maxulst$/;"	v	module:neigh
maxv	faces.os	/^      integer maxv,/;"	v	module:faces
maxval	sizes.os	/^      integer maxclass,maxval$/;"	v	module:sizes
maxvlst	neigh.os	/^      integer maxvlst$/;"	v	module:neigh
maxwell	maxwell.os	/^      function maxwell /;"	os
mbuf2	neigh.os	/^      real*8 mbuf2,/;"	v	module:neigh
mbufx	neigh.os	/^      real*8 mbufx,/;"	v	module:neigh
mbuild	nblist.os	/^      subroutine mbuild$/;"	s
mdinit	mdinit.os	/^      subroutine mdinit$/;"	s
mdrest	mdrest.os	/^      subroutine mdrest /;"	s
mdsave	mdsave.os	/^      subroutine mdsave /;"	s
mdstat	mdstat.os	/^      subroutine mdstat /;"	s
mdstuf	mdstuf.os	/^      module mdstuf$/;"	m
measfn	connolly.os	/^      subroutine measfn /;"	s
measfp	connolly.os	/^      subroutine measfp /;"	s
measfs	connolly.os	/^      subroutine measfs /;"	s
measpm	connolly.os	/^      subroutine measpm /;"	s
mechanic	mechanic.os	/^      subroutine mechanic$/;"	s
merck	merck.os	/^      module merck$/;"	m
merge	merge.os	/^      subroutine merge /;"	s
metric	embed.os	/^      subroutine metric /;"	s
miderr	embed.os	/^      function miderr /;"	os
mindex	usolve.os	/^      integer, allocatable :: mindex(/;"	v	module:usolve
minima	minima.os	/^      module minima$/;"	m
minpath	embed.os	/^      subroutine minpath /;"	s
minus	ascii.os	/^      integer comma,minus$/;"	v	module:ascii
minv	usolve.os	/^      real*8, allocatable :: minv(/;"	v	module:usolve
mlight	nblist.os	/^      subroutine mlight$/;"	s
mlist	nblist.os	/^      subroutine mlist$/;"	s
mltb	merck.os	/^      integer mltb(/;"	v	module:merck
mmff_ang0	merck.os	/^      real*8, allocatable :: mmff_ang0(/;"	v	module:merck
mmff_ang1	merck.os	/^      real*8, allocatable :: mmff_ang1(/;"	v	module:merck
mmff_ang2	merck.os	/^      real*8, allocatable :: mmff_ang2(/;"	v	module:merck
mmff_ang3	merck.os	/^      real*8, allocatable :: mmff_ang3(/;"	v	module:merck
mmff_ang4	merck.os	/^      real*8, allocatable :: mmff_ang4(/;"	v	module:merck
mmff_ang5	merck.os	/^      real*8, allocatable :: mmff_ang5(/;"	v	module:merck
mmff_ang6	merck.os	/^      real*8, allocatable :: mmff_ang6(/;"	v	module:merck
mmff_ang7	merck.os	/^      real*8, allocatable :: mmff_ang7(/;"	v	module:merck
mmff_ang8	merck.os	/^      real*8, allocatable :: mmff_ang8(/;"	v	module:merck
mmff_b0	merck.os	/^      real*8 mmff_b0(/;"	v	module:merck
mmff_b1	merck.os	/^      real*8 mmff_b1(/;"	v	module:merck
mmff_ka	merck.os	/^      real*8, allocatable :: mmff_ka(/;"	v	module:merck
mmff_ka1	merck.os	/^      real*8, allocatable :: mmff_ka1(/;"	v	module:merck
mmff_ka2	merck.os	/^      real*8, allocatable :: mmff_ka2(/;"	v	module:merck
mmff_ka3	merck.os	/^      real*8, allocatable :: mmff_ka3(/;"	v	module:merck
mmff_ka4	merck.os	/^      real*8, allocatable :: mmff_ka4(/;"	v	module:merck
mmff_ka5	merck.os	/^      real*8, allocatable :: mmff_ka5(/;"	v	module:merck
mmff_ka6	merck.os	/^      real*8, allocatable :: mmff_ka6(/;"	v	module:merck
mmff_ka7	merck.os	/^      real*8, allocatable :: mmff_ka7(/;"	v	module:merck
mmff_ka8	merck.os	/^      real*8, allocatable :: mmff_ka8(/;"	v	module:merck
mmff_kb	merck.os	/^      real*8 mmff_kb(/;"	v	module:merck
mmff_kb1	merck.os	/^      real*8 mmff_kb1(/;"	v	module:merck
mmffarom	merck.os	/^      integer mmffarom(/;"	v	module:merck
mmffaroma	merck.os	/^      integer mmffaroma(/;"	v	module:merck
mmffaromc	merck.os	/^      integer mmffaromc(/;"	v	module:merck
mmid	diffeq.os	/^      subroutine mmid /;"	s
moduli	kewald.os	/^      subroutine moduli$/;"	s
molcul	molcul.os	/^      module molcul$/;"	m
molcule	molcul.os	/^      integer, allocatable :: molcule(/;"	v	module:molcul
moldyn	moldyn.os	/^      module moldyn$/;"	m
molecule	molecule.os	/^      subroutine molecule$/;"	s
molmass	molcul.os	/^      real*8, allocatable :: molmass(/;"	v	module:molcul
moment	moment.os	/^      module moment$/;"	m
moments	moments.os	/^      subroutine moments$/;"	s
momfull	moments.os	/^      subroutine momfull$/;"	s
monoclinic	boxes.os	/^      logical monoclinic$/;"	v	module:boxes
mp	dma.os	/^      real*8, allocatable :: mp(/;"	v	module:dma
mpaxis	kmulti.os	/^      character*8 mpaxis(/;"	v	module:kmulti
mplpot	mplpot.os	/^      module mplpot$/;"	m
mpole	mpole.os	/^      module mpole$/;"	m
mpolecut	limits.os	/^      real*8 dplcut,mpolecut$/;"	v	module:limits
mpoletaper	limits.os	/^      real*8 dpltaper,mpoletaper$/;"	v	module:limits
multip	kmulti.os	/^      real*8 multip(/;"	v	module:kmulti
mut	mutant.os	/^      logical, allocatable :: mut(/;"	v	module:mutant
mutant	mutant.os	/^      module mutant$/;"	m
mutate	mutate.os	/^      subroutine mutate$/;"	s
mxcyep	faces.os	/^      integer maxcy,mxcyep$/;"	v	module:faces
mxfpcy	faces.os	/^      integer maxfp,mxfpcy$/;"	v	module:faces
n	atoms.os	/^      int/;"	v	module:atoms
n12	couple.os	/^      integer n12(/;"	v	module:couple
n12ref	refer.os	/^      integer, allocatable :: n12ref(/;"	v	module:refer
n13	couple.os	/^      integer, allocatable :: n13(/;"	v	module:couple
n14	couple.os	/^      integer, allocatable :: n14(/;"	v	module:couple
n15	couple.os	/^      integer, allocatable :: n15(/;"	v	module:couple
na	faces.os	/^      integer na$/;"	v	module:faces
nadd	zclose.os	/^      integer nadd,/;"	v	module:zclose
nafix	restrn.os	/^      integer nafix$/;"	v	module:restrn
name	atomid.os	/^      character*3 name(/;"	v	module:atomid
nangang	angang.os	/^      integer nangang$/;"	v	module:angang
nangle	angbnd.os	/^      integer nangle$/;"	v	module:angbnd
nangtor	angtor.os	/^      integer nangtor$/;"	v	module:angtor
narg	argue.os	/^      integer narg$/;"	v	module:argue
nbitor	bitor.os	/^      integer nbitor$/;"	v	module:bitor
nblist	nblist.os	/^      subroutine nblist$/;"	s
nbond	bndstr.os	/^      integer nbond$/;"	v	module:bndstr
nbpi	piorbs.os	/^      integer nbpi$/;"	v	module:piorbs
nc	faces.os	/^      integer nc$/;"	v	module:faces
ncatom	AmberNetcdf.h	/^  int ncatom;         \/\/ Number of atoms$/;"	m	struct:AmberNetcdf
ncatom3	AmberNetcdf.h	/^  int ncatom3;        \/\/ Number of coordinates (ncatom * 3)$/;"	m	struct:AmberNetcdf
ncell	cell.os	/^      integer ncell$/;"	v	module:cell
ncframe	AmberNetcdf.h	/^  int ncframe;        \/\/ Number of frames in the file$/;"	m	struct:AmberNetcdf
nchain	sequen.os	/^      integer nchain$/;"	v	module:sequen
nchir	restrn.os	/^      integer nchir$/;"	v	module:restrn
nchk1	chunks.os	/^      integer nchk1,/;"	v	module:chunks
nchk2	chunks.os	/^      integer nchk1,nchk2,/;"	v	module:chunks
nchk3	chunks.os	/^      integer nchk1,nchk2,nchk3$/;"	v	module:chunks
nchunk	chunks.os	/^      integer nchunk$/;"	v	module:chunks
ncid	AmberNetcdf.h	/^  int ncid;           \/\/ Netcdf ID of the file when open$/;"	m	struct:AmberNetcdf
nconf	potfit.os	/^      integer nconf$/;"	v	module:potfit
nconj	piorbs.os	/^      integer nconj$/;"	v	module:piorbs
nct	ct.os	/^      integer nct$/;"	v	module:ct
nctp	ct.os	/^      integer nctp$/;"	v	module:ct
nctyp	resdue.os	/^      integer nctyp(/;"	v	module:resdue
ncy	faces.os	/^      integer ncy$/;"	v	module:faces
ndel	zclose.os	/^      integer nadd,ndel$/;"	v	module:zclose
ndfix	restrn.os	/^      integer ndfix$/;"	v	module:restrn
ndipole	dipole.os	/^      integer ndipole$/;"	v	module:dipole
nea	action.os	/^      integer neb,nea,/;"	v	module:action
neaa	action.os	/^      integer neaa,/;"	v	module:action
nearby	connolly.os	/^      subroutine nearby$/;"	s
neat	action.os	/^      integer nebt,neat,/;"	v	module:action
neb	action.os	/^      integer neb,/;"	v	module:action
neba	action.os	/^      integer neb,nea,neba,/;"	v	module:action
nebt	action.os	/^      integer nebt,/;"	v	module:action
nec	action.os	/^      integer nec,/;"	v	module:action
necd	action.os	/^      integer nec,necd,/;"	v	module:action
ned	action.os	/^      integer nec,necd,ned,/;"	v	module:action
needupdate	server.os	/^      subroutine needupdate /;"	s
neg	action.os	/^      integer nelf,neg,/;"	v	module:action
neid	action.os	/^      integer neid,/;"	v	module:action
neigh	neigh.os	/^      module neigh$/;"	m
neit	action.os	/^      integer neid,neit,/;"	v	module:action
nelf	action.os	/^      integer nelf,/;"	v	module:action
nelst	neigh.os	/^      integer, allocatable :: nelst(/;"	v	module:neigh
nem	action.os	/^      integer nec,necd,ned,nem$/;"	v	module:action
nen	faces.os	/^      integer nen$/;"	v	module:faces
neopb	action.os	/^      integer neaa,neopb,/;"	v	module:action
neopd	action.os	/^      integer neaa,neopb,neopd$/;"	v	module:action
nep	action.os	/^      integer nep,/;"	v	module:action
nep	faces.os	/^      integer nep$/;"	v	module:faces
nept	action.os	/^      integer neid,neit,net,nept$/;"	v	module:action
ner	action.os	/^      integer nep,new,ner,/;"	v	module:action
nes	action.os	/^      integer nep,new,ner,nes$/;"	v	module:action
net	action.os	/^      integer neid,neit,net,/;"	v	module:action
netcdf	output.os	/^      logical netcdf$/;"	v	module:output
netcdfClose	AmberNetcdf.cpp	/^int netcdfClose(struct AmberNetcdf *A) {$/;"	os
netcdfCreate	AmberNetcdf.cpp	/^int netcdfCreate(struct AmberNetcdf *A, const char *filename, int natom, int isBox) {$/;"	os
netcdfDebug	AmberNetcdf.cpp	/^int netcdfDebug(struct AmberNetcdf *A) {$/;"	os
netcdfGetFrame	AmberNetcdf.cpp	/^int netcdfGetFrame(struct AmberNetcdf *A, int set, double *X, double *box) {$/;"	os
netcdfGetNextFrame	AmberNetcdf.cpp	/^int netcdfGetNextFrame(struct AmberNetcdf *A, double *X, double *box) {$/;"	os
netcdfGetVelocity	AmberNetcdf.cpp	/^int netcdfGetVelocity(struct AmberNetcdf *A, int set, double *V) {$/;"	os
netcdfInfo	AmberNetcdf.cpp	/^int netcdfInfo(struct AmberNetcdf *A) {$/;"	os
netcdfLoad	AmberNetcdf.cpp	/^int netcdfLoad(struct AmberNetcdf *A, const char *filename) {$/;"	os
netcdfOpen	AmberNetcdf.cpp	/^int netcdfOpen(struct AmberNetcdf *A, const char *filename) {$/;"	os
netcdfTaskid	AmberNetcdf.cpp	/^int netcdfTaskid() { return 0; }$/;"	os
netcdfWriteFrame	AmberNetcdf.cpp	/^int netcdfWriteFrame(struct AmberNetcdf *A, int set, double *X, double *box) {$/;"	os
netcdfWriteNextFrame	AmberNetcdf.cpp	/^int netcdfWriteNextFrame(struct AmberNetcdf *A, double *X, double *box) {$/;"	os
netcdfWriteRestart	AmberNetcdf.cpp	/^int netcdfWriteRestart(char *filename, int natom, double *X, double *Velo,$/;"	os
netcdf_append_box_x_	amber_netcdf.cpp	/^void netcdf_append_box_x_(const char *fn, int *leng,$/;"	os
netcdf_append_x_	amber_netcdf.cpp	/^void netcdf_append_x_(const char *fn, int *leng, int *natoms, double *x, double *y, double *z) {$/;"	os
netcdf_close_	amber_netcdf.cpp	/^void netcdf_close_(struct AmberNetcdf **handle) {$/;"	os
netcdf_open_	amber_netcdf.cpp	/^void netcdf_open_(const char *fn, int *leng, struct AmberNetcdf **handle, int *ret) {$/;"	os
netcdf_read_next_	amber_netcdf.cpp	/^void netcdf_read_next_(struct AmberNetcdf **handle,$/;"	os
netcdf_rewind_	amber_netcdf.cpp	/^void netcdf_rewind_(struct AmberNetcdf **handle) {$/;"	os
netchg	moment.os	/^      real*8 netchg,/;"	v	module:moment
netdpl	moment.os	/^      real*8 netchg,netdpl$/;"	v	module:moment
netqdp	moment.os	/^      real*8 netqdp(/;"	v	module:moment
nett	action.os	/^      integer nebt,neat,nett,/;"	v	module:action
neub	action.os	/^      integer neb,nea,neba,neub$/;"	v	module:action
neutcut	chgpot.os	/^      logical neutnbr,neutcut$/;"	v	module:chgpot
neutnbr	chgpot.os	/^      logical neutnbr,/;"	v	module:chgpot
nev	action.os	/^      integer nebt,neat,nett,nev$/;"	v	module:action
new	action.os	/^      integer nep,new,/;"	v	module:action
nex	action.os	/^      integer nelf,neg,nex$/;"	v	module:action
nextarg	nextarg.os	/^      subroutine nextarg /;"	s
nextiter	minima.os	/^      integer nextiter$/;"	v	module:minima
nexttext	nexttext.os	/^      function nexttext /;"	os
nfatm	potfit.os	/^      integer ngatm,nfatm$/;"	v	module:potfit
nfft1	pme.os	/^      integer nfft1$/;"	v	module:pme
nfft2	pme.os	/^      integer nfft2$/;"	v	module:pme
nfft3	pme.os	/^      integer nfft3$/;"	v	module:pme
nfit	align.os	/^      integer nfit$/;"	v	module:align
nfn	faces.os	/^      integer nfn$/;"	v	module:faces
nfp	faces.os	/^      integer nfp$/;"	v	module:faces
nfree	mdstuf.os	/^      integer nfree$/;"	v	module:mdstuf
nfs	faces.os	/^      integer nfs$/;"	v	module:faces
ngatm	potfit.os	/^      integer ngatm,/;"	v	module:potfit
ngatom	qmstuf.os	/^      integer ngatom$/;"	v	module:qmstuf
ngauss	vdwpot.os	/^      integer ngauss$/;"	v	module:vdwpot
ngfix	restrn.os	/^      integer ngfix$/;"	v	module:restrn
ngrd1	chunks.os	/^      integer ngrd1,/;"	v	module:chunks
ngrd2	chunks.os	/^      integer ngrd1,ngrd2,/;"	v	module:chunks
ngrd3	chunks.os	/^      integer ngrd1,ngrd2,ngrd3$/;"	v	module:chunks
ngrp	group.os	/^      integer ngrp$/;"	v	module:group
nion	charge.os	/^      integer nion$/;"	v	module:charge
niprop	improp.os	/^      integer niprop$/;"	v	module:improp
nitors	imptor.os	/^      integer nitors$/;"	v	module:imptor
nkey	keys.os	/^      integer nkey$/;"	v	module:keys
nlevel	tree.os	/^      integer nlevel$/;"	v	module:tree
nlight	light.os	/^      integer nlight$/;"	v	module:light
nlignes	merck.os	/^      integer nlignes$/;"	v	module:merck
nlpts	chunks.os	/^      integer nlpts,/;"	v	module:chunks
nmol	molcul.os	/^      integer nmol$/;"	v	module:molcul
nmut	mutant.os	/^      integer nmut$/;"	v	module:mutant
nn	merck.os	/^      real*8 nn(/;"	v	module:merck
nntyp	resdue.os	/^      integer nntyp(/;"	v	module:resdue
nomega	omega.os	/^      integer nomega$/;"	v	module:omega
nonpol	nonpol.os	/^      module nonpol$/;"	m
nopbend	opbend.os	/^      integer nopbend$/;"	v	module:opbend
nopdist	opdist.os	/^      integer nopdist$/;"	v	module:opdist
norbit	piorbs.os	/^      integer norbit$/;"	v	module:piorbs
normal	random.os	/^      function normal /;"	os
nose	nose.os	/^      subroutine nose /;"	s
nosurf	faces.os	/^      logical, allocatable :: nosurf(/;"	v	module:faces
noversion	output.os	/^      logical noversion$/;"	v	module:output
np	faces.os	/^      integer np$/;"	v	module:faces
np11	polgrp.os	/^      integer, allocatable :: np11(/;"	v	module:polgrp
np12	polgrp.os	/^      integer, allocatable :: np12(/;"	v	module:polgrp
np13	polgrp.os	/^      integer, allocatable :: np13(/;"	v	module:polgrp
np14	polgrp.os	/^      integer, allocatable :: np14(/;"	v	module:polgrp
npdb	pdb.os	/^      integer npdb,/;"	v	module:pdb
npdb12	pdb.os	/^      integer, allocatable :: npdb12(/;"	v	module:pdb
npfix	restrn.os	/^      integer npfix$/;"	v	module:restrn
npgrid	potfit.os	/^      integer npgrid(/;"	v	module:potfit
npitors	pitors.os	/^      integer npitors$/;"	v	module:pitors
npmf	hpmf.os	/^      integer npmf$/;"	v	module:hpmf
npolar	polar.os	/^      integer npolar$/;"	v	module:polar
npole	mpole.os	/^      integer npole$/;"	v	module:mpole
nprior	files.os	/^      integer nprior$/;"	v	module:files
nprm	params.os	/^      integer nprm$/;"	v	module:params
nproc	openmp.os	/^      integer nproc$/;"	v	module:openmp
nrat	freeze.os	/^      integer nrat,/;"	v	module:freeze
nratx	freeze.os	/^      integer nrat,nratx$/;"	v	module:freeze
nref	refer.os	/^      integer nref(/;"	v	module:refer
nres	pdb.os	/^      integer npdb,nres$/;"	v	module:pdb
nring3	ring.os	/^      integer nring3$/;"	v	module:ring
nring4	ring.os	/^      integer nring4$/;"	v	module:ring
nring5	ring.os	/^      integer nring5$/;"	v	module:ring
nring6	ring.os	/^      integer nring6$/;"	v	module:ring
nrot	rotbnd.os	/^      integer nrot$/;"	v	module:rotbnd
nrpts	chunks.os	/^      integer nlpts,nrpts,/;"	v	module:chunks
nseq	sequen.os	/^      integer nseq$/;"	v	module:sequen
nspline	nspline.os	/^      subroutine nspline /;"	s
nstrbnd	strbnd.os	/^      integer nstrbnd$/;"	v	module:strbnd
nstrtor	strtor.os	/^      integer nstrtor$/;"	v	module:strtor
nt	faces.os	/^      inte/;"	v	module:faces
ntfix	restrn.os	/^      integer ntfix$/;"	v	module:restrn
nthread	openmp.os	/^      integer nthread$/;"	v	module:openmp
ntors	tors.os	/^      integer ntors$/;"	v	module:tors
ntortor	tortor.os	/^      integer ntortor$/;"	v	module:tortor
ntpair	tarray.os	/^      integer ntpair$/;"	v	module:tarray
ntpi	piorbs.os	/^      integer ntpi$/;"	v	module:piorbs
ntt	faces.os	/^      integer ntt$/;"	v	module:faces
ntyp	resdue.os	/^      integer ntyp(/;"	v	module:resdue
nualt	uprior.os	/^      integer nualt$/;"	v	module:uprior
nucleo	nucleo.os	/^      module nucleo$/;"	m
nuclz	resdue.os	/^      character*3 nuclz(/;"	v	module:resdue
nuclz1	resdue.os	/^      character*1 nuclz1(/;"	v	module:resdue
null	ascii.os	/^      integer null,/;"	v	module:ascii
nulst	neigh.os	/^      integer, allocatable :: nulst(/;"	v	module:neigh
number	number.os	/^      function number /;"	os
numeral	numeral.os	/^      subroutine numeral /;"	s
numgrad	numgrad.os	/^      subroutine numgrad /;"	s
nurey	urey.os	/^      integer nurey$/;"	v	module:urey
nuse	usage.os	/^      integer nuse$/;"	v	module:usage
nv	faces.os	/^      integer nv$/;"	v	module:faces
nvary	xtals.os	/^      integer nxtal,nvary$/;"	v	module:xtals
nvdw	vdw.os	/^      integer nvdw$/;"	v	module:vdw
nvlst	neigh.os	/^      integer, allocatable :: nvlst(/;"	v	module:neigh
nxtal	xtals.os	/^      integer nxtal,/;"	v	module:xtals
o2typ	resdue.os	/^      integer o2typ(/;"	v	module:resdue
o3typ	resdue.os	/^      integer o3typ(/;"	v	module:resdue
o4typ	resdue.os	/^      integer o4typ(/;"	v	module:resdue
o5typ	resdue.os	/^      integer o5typ(/;"	v	module:resdue
octahedron	boxes.os	/^      logical octahedron$/;"	v	module:boxes
octyp	resdue.os	/^      integer octyp(/;"	v	module:resdue
ocvm	ocvm.os	/^      subroutine ocvm /;"	s
off	shunt.os	/^      real*8 off,/;"	v	module:shunt
off2	shunt.os	/^      real*8 off,off2$/;"	v	module:shunt
omega	omega.os	/^      module omega$/;"	m
omega	phipsi.os	/^      real*8 omega(/;"	v	module:phipsi
ontyp	resdue.os	/^      integer ontyp(/;"	v	module:resdue
opbend	opbend.os	/^      module opbend$/;"	m
opbk	opbend.os	/^      real*8, allocatable :: opbk(/;"	v	module:opbend
opbn	kopbnd.os	/^      real*8 opbn(/;"	v	module:kopbnd
opbtyp	angpot.os	/^      character*8 opbtyp$/;"	v	module:angpot
opbunit	angpot.os	/^      real*8 aaunit,opbunit$/;"	v	module:angpot
opdist	opdist.os	/^      module opdist$/;"	m
opdk	opdist.os	/^      real*8, allocatable :: opdk(/;"	v	module:opdist
opds	kopdst.os	/^      real*8 opds(/;"	v	module:kopdst
opdunit	angpot.os	/^      real*8 opdunit$/;"	v	module:angpot
openend	openend.os	/^      subroutine openend /;"	s
openmp	openmp.os	/^      module openmp$/;"	m
opennetcdf	readnc.f90	/^subroutine opennetcdf(/;"	s
opentrr	readtrr.f90	/^subroutine opentrr(/;"	s
optsave	optsave.os	/^      subroutine optsave /;"	s
optyp	resdue.os	/^      integer optyp(/;"	v	module:resdue
orbital	orbital.os	/^      subroutine orbital$/;"	s
orbits	orbits.os	/^      module orbits$/;"	m
orient	orient.os	/^      subroutine orient$/;"	s
orthog	orthog.os	/^      subroutine orthog /;"	s
orthogonal	boxes.os	/^      logical orthogonal$/;"	v	module:boxes
otyp	resdue.os	/^      integer otyp(/;"	v	module:resdue
outfile	files.os	/^      character*120 outfile$/;"	v	module:files
output	output.os	/^      module output$/;"	m
overlap	overlap.os	/^      subroutine overlap /;"	s
overwrite	output.os	/^      logical overwrite$/;"	v	module:output
p	faces.os	/^      real*8, allocatable :: p(/;"	v	module:faces
p1	solute.os	/^      real*8 p1,/;"	v	module:solute
p2	solute.os	/^      real*8 p1,p2,/;"	v	module:solute
p2scale	polpot.os	/^      real*8 poleps,p2scale$/;"	v	module:polpot
p3	solute.os	/^      real*8 p1,p2,p3,/;"	v	module:solute
p3scale	polpot.os	/^      real*8 p3scale,/;"	v	module:polpot
p4	solute.os	/^      real*8 p1,p2,p3,p4,/;"	v	module:solute
p41scale	polpot.os	/^      real*8 p5scale,p41scale$/;"	v	module:polpot
p4scale	polpot.os	/^      real*8 p3scale,p4scale$/;"	v	module:polpot
p5	solute.os	/^      real*8 p1,p2,p3,p4,p5$/;"	v	module:solute
p5scale	polpot.os	/^      real*8 p5scale,/;"	v	module:polpot
pa	faces.os	/^      integer, allocatable :: pa(/;"	v	module:faces
pang	angpot.os	/^      real*8 pang,/;"	v	module:angpot
params	params.os	/^      module params$/;"	m
passb	fftpack.os	/^      subroutine passb /;"	s
passb2	fftpack.os	/^      subroutine passb2 /;"	s
passb3	fftpack.os	/^      subroutine passb3 /;"	s
passb4	fftpack.os	/^      subroutine passb4 /;"	s
passb5	fftpack.os	/^      subroutine passb5 /;"	s
passf	fftpack.os	/^      subroutine passf /;"	s
passf2	fftpack.os	/^      subroutine passf2 /;"	s
passf3	fftpack.os	/^      subroutine passf3 /;"	s
passf4	fftpack.os	/^      subroutine passf4 /;"	s
passf5	fftpack.os	/^      subroutine passf5 /;"	s
pathmax	disgeo.os	/^      real*8 pathmax$/;"	v	module:disgeo
paths	paths.os	/^      module paths$/;"	m
paulel	merck.os	/^      real*8 paulel(/;"	v	module:merck
pbci	merck.os	/^      real*8 pbci(/;"	v	module:merck
pbdirectpolforce	pmpb.os	/^      subroutine pbdirectpolforce /;"	s
pbe	pbstuf.os	/^      real*8 pbe$/;"	v	module:pbstuf
pbempole	esolv.os	/^      subroutine pbempole$/;"	s
pbep	pbstuf.os	/^      real*8, allocatable :: pbep(/;"	v	module:pbstuf
pbeuind	pbstuf.os	/^      real*8, allocatable :: pbeuind(/;"	v	module:pbstuf
pbeuinp	pbstuf.os	/^      real*8, allocatable :: pbeuinp(/;"	v	module:pbstuf
pbfp	pbstuf.os	/^      real*8, allocatable :: pbfp(/;"	v	module:pbstuf
pbmutualpolforce	pmpb.os	/^      subroutine pbmutualpolforce /;"	s
pbpl	piorbs.os	/^      real*8, allocatable :: pbpl(/;"	v	module:piorbs
pbr	pbstuf.os	/^      real*8, allocatable :: pbr(/;"	v	module:pbstuf
pbsoln	pbstuf.os	/^      character*20 pbtyp,pbsoln$/;"	v	module:pbstuf
pbstuf	pbstuf.os	/^      module pbstuf$/;"	m
pbtp	pbstuf.os	/^      real*8, allocatable :: pbtp(/;"	v	module:pbstuf
pbtyp	pbstuf.os	/^      character*20 pbtyp,/;"	v	module:pbstuf
pbuf2	neigh.os	/^      real*8 lbuf2,pbuf2$/;"	v	module:neigh
pbuffer	neigh.os	/^      real*8 lbuffer,pbuffer$/;"	v	module:neigh
pc0	paths.os	/^      real*8, allocatable :: pc0(/;"	v	module:paths
pc1	paths.os	/^      real*8, allocatable :: pc1(/;"	v	module:paths
pchg	charge.os	/^      real*8, allocatable :: pchg(/;"	v	module:charge
pdamp	polar.os	/^      real*8, allocatable :: pdamp(/;"	v	module:polar
pdb	pdb.os	/^      module pdb$/;"	m
pdbatm	pdb.os	/^      character*4, allocatable :: pdbatm(/;"	v	module:pdb
pdblist	pdb.os	/^      integer, allocatable :: pdblist(/;"	v	module:pdb
pdbres	pdb.os	/^      character*3, allocatable :: pdbres(/;"	v	module:pdb
pdbtyp	pdb.os	/^      character*6, allocatable :: pdbtyp(/;"	v	module:pdb
pdie	pbstuf.os	/^      real*8 pdie,/;"	v	module:pbstuf
percent	ascii.os	/^      integer dollar,percent$/;"	v	module:ascii
period	ascii.os	/^      integer period,/;"	v	module:ascii
pfix	restrn.os	/^      real*8, allocatable :: pfix(/;"	v	module:restrn
pgrid	potfit.os	/^      real*8, allocatable :: pgrid(/;"	v	module:potfit
pgrp	kpolr.os	/^      integer pgrp(/;"	v	module:kpolr
phi	phipsi.os	/^      real*8 phi(/;"	v	module:phipsi
phi	vibs.os	/^      real*8, allocatable :: phi(/;"	v	module:vibs
phik	vibs.os	/^      real*8, allocatable :: phik(/;"	v	module:vibs
phipsi	phipsi.os	/^      module phipsi$/;"	m
pi	math.os	/^      real*8 radian,pi$/;"	v	module:math
pialter	picalc.os	/^      subroutine pialter$/;"	s
picalc	picalc.os	/^      subroutine picalc$/;"	s
pilp	merck.os	/^      integer pilp(/;"	v	module:merck
pimove	picalc.os	/^      subroutine pimove /;"	s
piorbs	piorbs.os	/^      module piorbs$/;"	m
piperp	piorbs.os	/^      integer, allocatable :: piperp(/;"	v	module:piorbs
piplane	orbital.os	/^      subroutine piplane$/;"	s
piscf	picalc.os	/^      subroutine piscf$/;"	s
pistuf	pistuf.os	/^      module pistuf$/;"	m
pitilt	picalc.os	/^      subroutine pitilt /;"	s
pitors	pitors.os	/^      module pitors$/;"	m
place	connolly.os	/^      subroutine place$/;"	s
planb	fft.os	/^      integer*8 planb$/;"	v	module:fft
planck	units.os	/^      real*8 emass,planck$/;"	v	module:units
planf	fft.os	/^      integer*8 planf$/;"	v	module:fft
plus	ascii.os	/^      integer asterisk,plus$/;"	v	module:ascii
pme	pme.os	/^      module pme$/;"	m
pmetable	chunks.os	/^      integer, allocatable :: pmetable(/;"	v	module:chunks
pmonte	pressure.os	/^      subroutine pmonte /;"	s
pnorm	paths.os	/^      real*8 pnorm$/;"	v	module:paths
pnpl	piorbs.os	/^      real*8, allocatable :: pnpl(/;"	v	module:piorbs
polar	polar.os	/^      module polar$/;"	m
polargrp	kpolar.os	/^      subroutine polargrp$/;"	s
polarity	polar.os	/^      real*8, allocatable :: polarity(/;"	v	module:polar
polaxe	mpole.os	/^      character*8, allocatable :: polaxe(/;"	v	module:mpole
pole	mpole.os	/^      real*8, allocatable :: pole(/;"	v	module:mpole
poleps	polpot.os	/^      real*8 poleps,/;"	v	module:polpot
polgrp	polgrp.os	/^      module polgrp$/;"	m
politer	polpot.os	/^      integer politer$/;"	v	module:polpot
pollist	mpole.os	/^      integer, allocatable :: pollist(/;"	v	module:mpole
polpot	polpot.os	/^      module polpot$/;"	m
polpred	uprior.os	/^      character*4 polpred$/;"	v	module:uprior
polr	kpolr.os	/^      real*8 polr(/;"	v	module:kpolr
polsiz	mpole.os	/^      integer, allocatable :: polsiz(/;"	v	module:mpole
poltyp	polpot.os	/^      character*6 poltyp$/;"	v	module:polpot
polycut	bound.os	/^      real*8 polycut$/;"	v	module:bound
polycut2	bound.os	/^      real*8 polycut2$/;"	v	module:bound
polymer	polymer.os	/^      subroutine polymer$/;"	s
polyp	overlap.os	/^      subroutine polyp /;"	s
popb	angpot.os	/^      real*8 popb,/;"	v	module:angpot
popd	angpot.os	/^      real*8 popd,/;"	v	module:angpot
pos	kdipol.os	/^      real*8 pos(/;"	v	module:kdipol
pos3	kdipol.os	/^      real*8 pos3(/;"	v	module:kdipol
pos4	kdipol.os	/^      real*8 pos4(/;"	v	module:kdipol
pos5	kdipol.os	/^      real*8 pos5(/;"	v	module:kdipol
potent	potent.os	/^      module potent$/;"	m
potfit	potfit.os	/^      module potfit$/;"	m
potoff	prmkey.os	/^      subroutine potoff$/;"	s
pound	ascii.os	/^      integer quote,pound$/;"	v	module:ascii
ppath	syntrn.os	/^      real*8 ppath$/;"	v	module:syntrn
pr	faces.os	/^      real*8 pr$/;"	v	module:faces
precis	precis.os	/^      module precis$/;"	m
precise	precise.os	/^      function precise /;"	os
precond	tncg.os	/^      subroutine precond /;"	s
prescon	units.os	/^      real*8 prescon$/;"	v	module:units
pressure	pressure.os	/^      subroutine pressure /;"	s
prmkey	prmkey.os	/^      subroutine prmkey /;"	s
prmline	params.os	/^      character*120 prmline(/;"	v	module:params
projct	connolly.os	/^      subroutine projct /;"	s
promo	promo.os	/^      subroutine promo$/;"	s
prtdyn	prtdyn.os	/^      subroutine prtdyn$/;"	s
prterr	prterr.os	/^      subroutine prterr$/;"	s
prtint	prtint.os	/^      subroutine prtint /;"	s
prtmol2	prtmol2.os	/^      subroutine prtmol2 /;"	s
prtpdb	prtpdb.os	/^      subroutine prtpdb /;"	s
prtprm	prtprm.os	/^      subroutine prtprm /;"	s
prtseq	prtseq.os	/^      subroutine prtseq /;"	s
prtxyz	prtxyz.os	/^      subroutine prtxyz /;"	s
pscale	pressure.os	/^      subroutine pscale /;"	s
psi	phipsi.os	/^      real*8 psi(/;"	v	module:phipsi
pstep	paths.os	/^      real*8, allocatable :: pstep(/;"	v	module:paths
ptable	ptable.os	/^      module ptable$/;"	m
ptcon	kpitor.os	/^      real*8 ptcon(/;"	v	module:kpitor
ptest	pressure.os	/^      subroutine ptest$/;"	s
ptincy	connolly.os	/^      function ptincy /;"	os
ptorunit	torpot.os	/^      real*8 ptorunit$/;"	v	module:torpot
ptyp	resdue.os	/^      integer ptyp(/;"	v	module:resdue
pucker	nucleo.os	/^      integer pucker(/;"	v	module:nucleo
pull_const	umbrella.os	/^      real*8 pull_const$/;"	v	module:umbrella
pull_dist	umbrella.os	/^      real*8 pull_dist$/;"	v	module:umbrella
pull_dist_rate	umbrella.os	/^      real*8 pull_dist_rate$/;"	v	module:umbrella
pull_group1	umbrella.os	/^      integer pull_group1(/;"	v	module:umbrella
pull_group1_num	umbrella.os	/^      integer pull_group1_num$/;"	v	module:umbrella
pull_group2	umbrella.os	/^      integer pull_group2(/;"	v	module:umbrella
pull_group2_num	umbrella.os	/^      integer pull_group2_num$/;"	v	module:umbrella
pull_switch	umbrella.os	/^      integer pull_switch$/;"	v	module:umbrella
pvect	paths.os	/^      real*8, allocatable :: pvect(/;"	v	module:paths
pwork	vibs.os	/^      real*8, allocatable :: pwork(/;"	v	module:vibs
pzet	paths.os	/^      real*8, allocatable :: pzet(/;"	v	module:paths
pzextr	diffeq.os	/^      subroutine pzextr /;"	s
q20	dma.os	/^      real*8, allocatable :: q20(/;"	v	module:dma
q21c	dma.os	/^      real*8, allocatable :: q21c(/;"	v	module:dma
q21s	dma.os	/^      real*8, allocatable :: q21s(/;"	v	module:dma
q22c	dma.os	/^      real*8, allocatable :: q22c(/;"	v	module:dma
q22s	dma.os	/^      real*8, allocatable :: q22s(/;"	v	module:dma
qang	angpot.os	/^      real*8 cang,qang$/;"	v	module:angpot
qbar	bath.os	/^      real*8 vbar,qbar,/;"	v	module:bath
qbnd	bndpot.os	/^      real*8 qbnd$/;"	v	module:bndpot
qfac	pme.os	/^      real*8, allocatable :: qfac(/;"	v	module:pme
qgrid	pme.os	/^      real*8, allocatable :: qgrid(/;"	v	module:pme
qmstuf	qmstuf.os	/^      module qmstuf$/;"	m
qnh	bath.os	/^      real*8 qnh(/;"	v	module:bath
qopb	angpot.os	/^      real*8 copb,qopb$/;"	v	module:angpot
qopd	angpot.os	/^      real*8 copd,qopd$/;"	v	module:angpot
qorb	orbits.os	/^      real*8, allocatable :: qorb(/;"	v	module:orbits
qrfact	qrfact.os	/^      subroutine qrfact /;"	s
qrsolve	qrfact.os	/^      subroutine qrsolve /;"	s
quatfit	quatfit.os	/^      subroutine quatfit /;"	s
question	ascii.os	/^      integer equal,question$/;"	v	module:ascii
quote	ascii.os	/^      integer quote,/;"	v	module:ascii
qury	urypot.os	/^      real*8 qury$/;"	v	module:urypot
r0ref	merck.os	/^      real*8 r0ref(/;"	v	module:merck
rad	kvdws.os	/^      real*8 rad(/;"	v	module:kvdws
rad0	merck.os	/^      real*8 rad0(/;"	v	module:merck
rad4	kvdws.os	/^      real*8 rad4(/;"	v	module:kvdws
radhb	khbond.os	/^      real*8 radhb(/;"	v	module:khbond
radhbnd	vdw.os	/^      real*8, allocatable :: radhbnd(/;"	v	module:vdw
radian	gmxtrr.h	/^const double radian = 57.29577951308232088;$/;"	v
radian	math.os	/^      real*8 radian,/;"	v	module:math
radmin	vdw.os	/^      real*8, allocatable :: radmin(/;"	v	module:vdw
radmin4	vdw.os	/^      real*8, allocatable :: radmin4(/;"	v	module:vdw
radpr	kvdwpr.os	/^      real*8 radpr(/;"	v	module:kvdwpr
radrule	vdwpot.os	/^      character*10 radrule,/;"	v	module:vdwpot
radsiz	vdwpot.os	/^      character*8 radsiz,/;"	v	module:vdwpot
radtyp	vdwpot.os	/^      character*5 radtyp$/;"	v	module:vdwpot
random	random.os	/^      function random /;"	os
ranvec	random.os	/^      subroutine ranvec /;"	s
rateps	freeze.os	/^      real*8 rateps$/;"	v	module:freeze
ratimage	freeze.os	/^      logical, allocatable :: ratimage(/;"	v	module:freeze
rattle	rattle.os	/^      subroutine rattle /;"	s
rattle2	rattle.os	/^      subroutine rattle2 /;"	s
rbc	rigid.os	/^      real*8, allocatable :: rbc(/;"	v	module:rigid
rborn	solute.os	/^      real*8, allocatable :: rborn(/;"	v	module:solute
rcarbon	hpmf.os	/^      real*8 rcarbon,/;"	v	module:hpmf
rcav	nonpol.os	/^      real*8, allocatable :: rcav(/;"	v	module:nonpol
rdisp	nonpol.os	/^      real*8, allocatable :: rdisp(/;"	v	module:nonpol
readdyn	readdyn.os	/^      subroutine readdyn /;"	s
readgarc	readgau.os	/^      subroutine readgarc /;"	s
readgau	readgau.os	/^      subroutine readgau$/;"	s
readint	readint.os	/^      subroutine readint /;"	s
readmol	readmol.os	/^      subroutine readmol /;"	s
readmol2	readmol2.os	/^      subroutine readmol2 /;"	s
readnetcdf	readnc.f90	/^subroutine readnetcdf(/;"	s
readpdb	readpdb.os	/^      subroutine readpdb /;"	s
readprm	readprm.os	/^      subroutine readprm$/;"	s
readseq	readseq.os	/^      subroutine readseq /;"	s
readtrr	readtrr.f90	/^subroutine readtrr(/;"	s
readxyz	readxyz.os	/^      subroutine readxyz /;"	s
recip	boxes.os	/^      real*8 recip(/;"	v	module:boxes
reduct	kvdws.os	/^      real*8 reduct(/;"	v	module:kvdws
refer	refer.os	/^      module refer$/;"	m
reffile	refer.os	/^      character*120 reffile(/;"	v	module:refer
refine	embed.os	/^      subroutine refine /;"	s
refleng	refer.os	/^      integer refleng(/;"	v	module:refer
refltitle	refer.os	/^      integer refltitle(/;"	v	module:refer
refnam	refer.os	/^      character*3, allocatable :: refnam(/;"	v	module:refer
reftitle	refer.os	/^      character*120 reftitle(/;"	v	module:refer
reftyp	refer.os	/^      integer, allocatable :: reftyp(/;"	v	module:refer
releasemonitor	server.os	/^      subroutine releasemonitor /;"	s
reorbit	piorbs.os	/^      integer reorbit$/;"	v	module:piorbs
replica	replica.os	/^      subroutine replica /;"	s
repulse	korbs.os	/^      real*8 repulse(/;"	v	module:korbs
resatm	pdb.os	/^      integer, allocatable :: resatm(/;"	v	module:pdb
resdue	resdue.os	/^      module resdue$/;"	m
resnum	pdb.os	/^      integer, allocatable :: resnum(/;"	v	module:pdb
respa	respa.os	/^      subroutine respa /;"	s
restartTime	AmberNetcdf.h	/^  double restartTime; \/\/ Simulation time if Amber restart$/;"	m	struct:AmberNetcdf
restrn	restrn.os	/^      module restrn$/;"	m
rewindnetcdf	readnc.f90	/^subroutine rewindnetcdf(/;"	s
rfbulkd	rxnpot.os	/^      real*8 rfbulkd$/;"	v	module:rxnpot
rfindex	erxnfld.os	/^      subroutine rfindex /;"	s
rfsize	rxnpot.os	/^      real*8 rfsize$/;"	v	module:rxnpot
rfterms	rxnpot.os	/^      integer rfterms$/;"	v	module:rxnpot
rgddyn	rgddyn.os	/^      module rgddyn$/;"	m
rgdstep	rgdstep.os	/^      subroutine rgdstep /;"	s
rgx	light.os	/^      integer, allocatable :: rgx(/;"	v	module:light
rgy	light.os	/^      integer, allocatable :: rgy(/;"	v	module:light
rgz	light.os	/^      integer, allocatable :: rgz(/;"	v	module:light
rigid	rigid.os	/^      module rigid$/;"	m
rigidxyz	orient.os	/^      subroutine rigidxyz$/;"	s
ring	ring.os	/^      module ring$/;"	m
rings	rings.os	/^      subroutine rings$/;"	s
rminh	nonpol.os	/^      real*8 rmino,rminh$/;"	v	module:nonpol
rmino	nonpol.os	/^      real*8 rmino,/;"	v	module:nonpol
rmserror	embed.os	/^      subroutine rmserror /;"	s
rmsfit	rmsfit.os	/^      function rmsfit /;"	os
rot	rotbnd.os	/^      integer, allocatable :: rot(/;"	v	module:rotbnd
rotang	connolly.os	/^      function rotang /;"	os
rotbnd	rotbnd.os	/^      module rotbnd$/;"	m
rotcheck	initrot.os	/^      function rotcheck /;"	os
roteuler	orient.os	/^      subroutine roteuler /;"	s
rotlist	rotlist.os	/^      subroutine rotlist /;"	s
rotmat	rotpole.os	/^      subroutine rotmat /;"	s
rotpole	rotpole.os	/^      subroutine rotpole$/;"	s
rotrgd	rgdstep.os	/^      subroutine rotrgd /;"	s
rotsite	rotpole.os	/^      subroutine rotsite /;"	s
rpmf	hpmf.os	/^      real*8, allocatable :: rpmf(/;"	v	module:hpmf
rpole	mpole.os	/^      real*8, allocatable :: rpole(/;"	v	module:mpole
rsdtyp	xtals.os	/^      character*16 rsdtyp(/;"	v	module:xtals
rsolv	solute.os	/^      real*8, allocatable :: rsolv(/;"	v	module:solute
runtyp	socket.os	/^      integer runtyp$/;"	v	module:socket
rwall	restrn.os	/^      real*8 rwall$/;"	v	module:restrn
rwater	hpmf.os	/^      real*8 rcarbon,rwater$/;"	v	module:hpmf
rxnfld	rxnfld.os	/^      module rxnfld$/;"	m
rxnpot	rxnpot.os	/^      module rxnpot$/;"	m
s2ace	solute.os	/^      real*8, allocatable :: s2ace(/;"	v	module:solute
saddles	connolly.os	/^      subroutine saddles$/;"	s
safact	hpmf.os	/^      real*8 acsurf,safact$/;"	v	module:hpmf
sang	angpot.os	/^      real*8 pang,sang$/;"	v	module:angpot
sbk	strbnd.os	/^      real*8, allocatable :: sbk(/;"	v	module:strbnd
sbmb	merck.os	/^      integer sbmb(/;"	v	module:merck
scale	scales.os	/^      real*8 scale(/;"	v	module:scales
scales	scales.os	/^      module scales$/;"	m
scalpha	mutant.os	/^      real*8 scalpha$/;"	v	module:mutant
scanpdb	readpdb.os	/^      subroutine scanpdb /;"	s
scexp	mutant.os	/^      real*8 scexp$/;"	v	module:mutant
sdarea	sdstep.os	/^      subroutine sdarea /;"	s
sdens	pbstuf.os	/^      real*8 sdens,/;"	v	module:pbstuf
sdie	pbstuf.os	/^      real*8 pdie,sdie$/;"	v	module:pbstuf
sdpl	dipole.os	/^      real*8, allocatable :: sdpl(/;"	v	module:dipole
sdstep	sdstep.os	/^      subroutine sdstep /;"	s
sdterm	sdstep.os	/^      subroutine sdterm /;"	s
search	search.os	/^      subroutine search /;"	s
semicolon	ascii.os	/^      integer colon,semicolon$/;"	v	module:ascii
seq	sequen.os	/^      character*3 seq(/;"	v	module:sequen
seqtyp	sequen.os	/^      integer seqtyp(/;"	v	module:sequen
sequen	sequen.os	/^      module sequen$/;"	m
set_scale	scales.os	/^      logical set_scale$/;"	v	module:scales
setacceleration	server.os	/^      subroutine setacceleration /;"	s
setatomic	server.os	/^      subroutine setatomic /;"	s
setatomtypes	server.os	/^      subroutine setatomtypes /;"	s
setcharge	server.os	/^      subroutine setcharge /;"	s
setchunk	pmestuff.os	/^      subroutine setchunk /;"	s
setconnectivity	server.os	/^      subroutine setconnectivity /;"	s
setcoordinates	server.os	/^      subroutine setcoordinates /;"	s
setenergy	server.os	/^      subroutine setenergy /;"	s
setfile	server.os	/^      subroutine setfile /;"	s
setforcefield	server.os	/^      subroutine setforcefield /;"	s
setgradients	server.os	/^      subroutine setgradients /;"	s
setinduced	server.os	/^      subroutine setinduced /;"	s
setkeyword	server.os	/^      subroutine setkeyword /;"	s
setmass	server.os	/^      subroutine setmass /;"	s
setmdtime	server.os	/^      subroutine setmdtime /;"	s
setname	server.os	/^      subroutine setname /;"	s
setstep	server.os	/^      subroutine setstep /;"	s
setstory	server.os	/^      subroutine setstory /;"	s
settime	clock.os	/^      subroutine settime$/;"	s
setupdated	server.os	/^      subroutine setupdated /;"	s
setvelocity	server.os	/^      subroutine setvelocity /;"	s
shakeup	shakeup.os	/^      subroutine shakeup$/;"	s
shct	solute.os	/^      real*8, allocatable :: shct(/;"	v	module:solute
shunt	shunt.os	/^      module shunt$/;"	m
sigmoid	sigmoid.os	/^      function sigmoid /;"	os
silent	inform.os	/^      logical silent,/;"	v	module:inform
sizes	sizes.os	/^      module sizes$/;"	m
skip	faces.os	/^      logical, allocatable :: skip(/;"	v	module:faces
skt_close	socket.os	/^      logical skt_close$/;"	v	module:socket
skt_init	socket.os	/^      logical skt_init$/;"	v	module:socket
sktdyn	sktstuff.os	/^      subroutine sktdyn /;"	s
sktinit	sktstuff.os	/^      subroutine sktinit$/;"	s
sktkill	sktstuff.os	/^      subroutine sktkill$/;"	s
sktopt	sktstuff.os	/^      subroutine sktopt /;"	s
slater	overlap.os	/^      subroutine slater /;"	s
slevy	nonpol.os	/^      real*8 awater,slevy$/;"	v	module:nonpol
slpmax	linmin.os	/^      real*8 slpmax$/;"	v	module:linmin
small	precis.os	/^      real*8 small$/;"	v	module:precis
smin	pbstuf.os	/^      real*8 sdens,smin$/;"	v	module:pbstuf
socket	socket.os	/^      module socket$/;"	m
solute	solute.os	/^      module solute$/;"	m
solvprs	nonpol.os	/^      real*8 solvprs,/;"	v	module:nonpol
solvtyp	solute.os	/^      character*8 solvtyp$/;"	v	module:solute
sopb	angpot.os	/^      real*8 popb,sopb$/;"	v	module:angpot
sopd	angpot.os	/^      real*8 popd,sopd$/;"	v	module:angpot
sort	sort.os	/^      subroutine sort /;"	s
sort10	sort.os	/^      subroutine sort10 /;"	s
sort2	sort.os	/^      subroutine sort2 /;"	s
sort3	sort.os	/^      subroutine sort3 /;"	s
sort4	sort.os	/^      subroutine sort4 /;"	s
sort5	sort.os	/^      subroutine sort5 /;"	s
sort6	sort.os	/^      subroutine sort6 /;"	s
sort7	sort.os	/^      subroutine sort7 /;"	s
sort8	sort.os	/^      subroutine sort8 /;"	s
sort9	sort.os	/^      subroutine sort9 /;"	s
space	ascii.os	/^      integer space,/;"	v	module:ascii
spacegrp	boxes.os	/^      character*10 spacegrp$/;"	v	module:boxes
spatialDID	AmberNetcdf.h	/^  int spatialDID;$/;"	m	struct:AmberNetcdf
spatialVID	AmberNetcdf.h	/^  int spatialVID;$/;"	m	struct:AmberNetcdf
spcut	nonpol.os	/^      real*8 spcut,/;"	v	module:nonpol
sphere	random.os	/^      subroutine sphere /;"	s
spoff	nonpol.os	/^      real*8 spcut,spoff$/;"	v	module:nonpol
sqrtpi	math.os	/^      real*8 sqrtpi,/;"	v	module:math
sqrttwo	math.os	/^      real*8 sqrttwo,/;"	v	module:math
square	square.os	/^      subroutine square /;"	s
srad	pbstuf.os	/^      real*8 srad,/;"	v	module:pbstuf
srfm	pbstuf.os	/^      character*20 bcfl,chgm,srfm$/;"	v	module:pbstuf
sslope	korbs.os	/^      real*8 sslope(/;"	v	module:korbs
sslope4	korbs.os	/^      real*8 sslope4(/;"	v	module:korbs
sslope5	korbs.os	/^      real*8 sslope5(/;"	v	module:korbs
stbn	kstbnd.os	/^      real*8 stbn(/;"	v	module:kstbnd
stbn_abc	merck.os	/^      real*8, allocatable :: stbn_abc(/;"	v	module:merck
stbn_abc1	merck.os	/^      real*8, allocatable :: stbn_abc1(/;"	v	module:merck
stbn_abc10	merck.os	/^      real*8, allocatable :: stbn_abc10(/;"	v	module:merck
stbn_abc11	merck.os	/^      real*8, allocatable :: stbn_abc11(/;"	v	module:merck
stbn_abc2	merck.os	/^      real*8, allocatable :: stbn_abc2(/;"	v	module:merck
stbn_abc3	merck.os	/^      real*8, allocatable :: stbn_abc3(/;"	v	module:merck
stbn_abc4	merck.os	/^      real*8, allocatable :: stbn_abc4(/;"	v	module:merck
stbn_abc5	merck.os	/^      real*8, allocatable :: stbn_abc5(/;"	v	module:merck
stbn_abc6	merck.os	/^      real*8, allocatable :: stbn_abc6(/;"	v	module:merck
stbn_abc7	merck.os	/^      real*8, allocatable :: stbn_abc7(/;"	v	module:merck
stbn_abc8	merck.os	/^      real*8, allocatable :: stbn_abc8(/;"	v	module:merck
stbn_abc9	merck.os	/^      real*8, allocatable :: stbn_abc9(/;"	v	module:merck
stbn_cba	merck.os	/^      real*8, allocatable :: stbn_cba(/;"	v	module:merck
stbn_cba1	merck.os	/^      real*8, allocatable :: stbn_cba1(/;"	v	module:merck
stbn_cba10	merck.os	/^      real*8, allocatable :: stbn_cba10(/;"	v	module:merck
stbn_cba11	merck.os	/^      real*8, allocatable :: stbn_cba11(/;"	v	module:merck
stbn_cba2	merck.os	/^      real*8, allocatable :: stbn_cba2(/;"	v	module:merck
stbn_cba3	merck.os	/^      real*8, allocatable :: stbn_cba3(/;"	v	module:merck
stbn_cba4	merck.os	/^      real*8, allocatable :: stbn_cba4(/;"	v	module:merck
stbn_cba5	merck.os	/^      real*8, allocatable :: stbn_cba5(/;"	v	module:merck
stbn_cba6	merck.os	/^      real*8, allocatable :: stbn_cba6(/;"	v	module:merck
stbn_cba7	merck.os	/^      real*8, allocatable :: stbn_cba7(/;"	v	module:merck
stbn_cba8	merck.os	/^      real*8, allocatable :: stbn_cba8(/;"	v	module:merck
stbn_cba9	merck.os	/^      real*8, allocatable :: stbn_cba9(/;"	v	module:merck
stbnunit	angpot.os	/^      real*8 angunit,stbnunit$/;"	v	module:angpot
stcut	nonpol.os	/^      real*8 stcut,/;"	v	module:nonpol
stodyn	stodyn.os	/^      module stodyn$/;"	m
stoff	nonpol.os	/^      real*8 stcut,stoff$/;"	v	module:nonpol
storunit	torpot.os	/^      real*8 storunit$/;"	v	module:torpot
story	atomid.os	/^      character*24 story(/;"	v	module:atomid
stpmax	linmin.os	/^      real*8 stpmax$/;"	v	module:linmin
stpmin	linmin.os	/^      real*8 stpmin$/;"	v	module:linmin
strbnd	strbnd.os	/^      module strbnd$/;"	m
strtor	strtor.os	/^      module strtor$/;"	m
suffix	suffix.os	/^      subroutine suffix /;"	s
surface	surface.os	/^      subroutine surface /;"	s
surface1	surface.os	/^      subroutine surface1 /;"	s
surfatom	surfatom.os	/^      subroutine surfatom /;"	s
surfatom1	surfatom.os	/^      subroutine surfatom1 /;"	s
surften	nonpol.os	/^      real*8 solvprs,surften$/;"	v	module:nonpol
swin	pbstuf.os	/^      real*8 srad,swin$/;"	v	module:pbstuf
switch	switch.os	/^      subroutine switch /;"	s
symbol	katoms.os	/^      character*3 symbol(/;"	v	module:katoms
syntrn	syntrn.os	/^      module syntrn$/;"	m
t	faces.os	/^      real*8, allocata/;"	v	module:faces
t1	ktorsn.os	/^      real*8 t1(/;"	v	module:ktorsn
t14	ktorsn.os	/^      real*8 t14(/;"	v	module:ktorsn
t15	ktorsn.os	/^      real*8 t15(/;"	v	module:ktorsn
t1_1	merck.os	/^      real*8 t1_1(/;"	v	module:merck
t1_2	merck.os	/^      real*8 t1_2(/;"	v	module:merck
t2	ktorsn.os	/^      real*8 t2(/;"	v	module:ktorsn
t24	ktorsn.os	/^      real*8 t24(/;"	v	module:ktorsn
t25	ktorsn.os	/^      real*8 t25(/;"	v	module:ktorsn
t2_1	merck.os	/^      real*8 t2_1(/;"	v	module:merck
t2_2	merck.os	/^      real*8 t2_2(/;"	v	module:merck
t3	ktorsn.os	/^      real*8 t3(/;"	v	module:ktorsn
t34	ktorsn.os	/^      real*8 t34(/;"	v	module:ktorsn
t35	ktorsn.os	/^      real*8 t35(/;"	v	module:ktorsn
t3_1	merck.os	/^      real*8 t3_1(/;"	v	module:merck
t3_2	merck.os	/^      real*8 t3_2(/;"	v	module:merck
t4	ktorsn.os	/^      real*8 t4(/;"	v	module:ktorsn
t44	ktorsn.os	/^      real*8 t44(/;"	v	module:ktorsn
t45	ktorsn.os	/^      real*8 t45(/;"	v	module:ktorsn
t5	ktorsn.os	/^      real*8 t5(/;"	v	module:ktorsn
t54	ktorsn.os	/^      real*8 t54(/;"	v	module:ktorsn
t55	ktorsn.os	/^      real*8 t55(/;"	v	module:ktorsn
t6	ktorsn.os	/^      real*8 t6(/;"	v	module:ktorsn
t64	ktorsn.os	/^      real*8 t64(/;"	v	module:ktorsn
t65	ktorsn.os	/^      real*8 t65(/;"	v	module:ktorsn
ta	faces.os	/^      integer, allocatab/;"	v	module:faces
tab	ascii.os	/^      integer null,tab$/;"	v	module:ascii
table_fill	pmestuff.os	/^      subroutine table_fill$/;"	s
tag	atomid.os	/^      integer tag(/;"	v	module:atomid
tarray	tarray.os	/^      module tarray$/;"	m
taupres	bath.os	/^      real*8 tautemp,taupres$/;"	v	module:bath
tautemp	bath.os	/^      real*8 tautemp,/;"	v	module:bath
tax	faces.os	/^      real*8, allocatable :: tax(/;"	v	module:faces
tbf	ktrtor.os	/^      real*8 tbf(/;"	v	module:ktrtor
tbx	ktrtor.os	/^      real*8 tbx(/;"	v	module:ktrtor
tbxy	ktrtor.os	/^      real*8 tbxy(/;"	v	module:ktrtor
tby	ktrtor.os	/^      real*8 tby(/;"	v	module:ktrtor
tcpu	chrono.os	/^      real*8 tcpu$/;"	v	module:chrono
tdi	kiprop.os	/^      real*8 tdi(/;"	v	module:kiprop
tdipdip	tarray.os	/^      real*8, allocatable :: tdipdip(/;"	v	module:tarray
tea	domega.os	/^      real*8, allocatable :: tea(/;"	v	module:domega
teaa	domega.os	/^      real*8, allocatable :: teaa(/;"	v	module:domega
teat	domega.os	/^      real*8, allocatable :: teat(/;"	v	module:domega
teb	domega.os	/^      real*8, allocatable :: teb(/;"	v	module:domega
teba	domega.os	/^      real*8, allocatable :: teba(/;"	v	module:domega
tebt	domega.os	/^      real*8, allocatable :: tebt(/;"	v	module:domega
tec	domega.os	/^      real*8, allocatable :: tec(/;"	v	module:domega
tecd	domega.os	/^      real*8, allocatable :: tecd(/;"	v	module:domega
ted	domega.os	/^      real*8, allocatable :: ted(/;"	v	module:domega
teg	domega.os	/^      real*8, allocatable :: teg(/;"	v	module:domega
teid	domega.os	/^      real*8, allocatable :: teid(/;"	v	module:domega
teit	domega.os	/^      real*8, allocatable :: teit(/;"	v	module:domega
telf	domega.os	/^      real*8, allocatable :: telf(/;"	v	module:domega
tem	domega.os	/^      real*8, allocatable :: tem(/;"	v	module:domega
temp0	AmberNetcdf.h	/^  double temp0;       \/\/ Temperature of current frame (if TempVID!=-1)$/;"	m	struct:AmberNetcdf
temper	temper.os	/^      subroutine temper /;"	s
temper2	temper.os	/^      subroutine temper2 /;"	s
teopb	domega.os	/^      real*8, allocatable :: teopb(/;"	v	module:domega
teopd	domega.os	/^      real*8, allocatable :: teopd(/;"	v	module:domega
tep	domega.os	/^      real*8, allocatable :: tep(/;"	v	module:domega
tept	domega.os	/^      real*8, allocatable :: tept(/;"	v	module:domega
ter	domega.os	/^      real*8, allocatable :: ter(/;"	v	module:domega
tes	domega.os	/^      real*8, allocatable :: tes(/;"	v	module:domega
tesum	domega.os	/^      real*8, allocatable :: tesum(/;"	v	module:domega
tet	domega.os	/^      real*8, allocatable :: tet(/;"	v	module:domega
tett	domega.os	/^      real*8, allocatable :: tett(/;"	v	module:domega
teub	domega.os	/^      real*8, allocatable :: teub(/;"	v	module:domega
tev	domega.os	/^      real*8, allocatable :: tev(/;"	v	module:domega
tex	domega.os	/^      real*8, allocatable :: tex(/;"	v	module:domega
tfe	faces.os	/^      integer, allocatable :: tfe(/;"	v	module:faces
tfix	restrn.os	/^      real*8, allocatable :: tfix(/;"	v	module:restrn
tfree	faces.os	/^      logical, allocatable :: tfree(/;"	v	module:faces
thermostat	bath.os	/^      character*11 thermostat$/;"	v	module:bath
thetai1	pme.os	/^      real*8, allocatable :: thetai1(/;"	v	module:pme
thetai2	pme.os	/^      real*8, allocatable :: thetai2(/;"	v	module:pme
thetai3	pme.os	/^      real*8, allocatable :: thetai3(/;"	v	module:pme
thole	polar.os	/^      real*8, allocatable :: thole(/;"	v	module:polar
ti1	kitors.os	/^      real*8 ti1(/;"	v	module:kitors
ti2	kitors.os	/^      real*8 ti2(/;"	v	module:kitors
ti3	kitors.os	/^      real*8 ti3(/;"	v	module:kitors
tilde	ascii.os	/^      integer vertical,tilde$/;"	v	module:ascii
timeVID	AmberNetcdf.h	/^  int timeVID;$/;"	m	struct:AmberNetcdf
tindex	tarray.os	/^      integer, allocatable :: tindex(/;"	v	module:tarray
tiny	precis.os	/^      real*8 tiny$/;"	v	module:precis
title	titles.os	/^      character*120 title$/;"	v	module:titles
titles	titles.os	/^      module titles$/;"	m
tncg	tncg.os	/^      subroutine tncg /;"	s
tnsolve	tncg.os	/^      subroutine tnsolve /;"	s
tnx	ktrtor.os	/^      integer tnx(/;"	v	module:ktrtor
tny	ktrtor.os	/^      integer tny(/;"	v	module:ktrtor
toffset	hpmf.os	/^      real*8 tslope,toffset$/;"	v	module:hpmf
torphase	torphase.os	/^      subroutine torphase /;"	s
torpot	torpot.os	/^      module torpot$/;"	m
torque	torque.os	/^      subroutine torque /;"	s
torque2	torque.os	/^      subroutine torque2 /;"	s
torque3	torque.os	/^      subroutine torque3 /;"	s
tors	tors.os	/^      module tors$/;"	m
tors1	tors.os	/^      real*8, allocatable :: tors1(/;"	v	module:tors
tors2	tors.os	/^      real*8, allocatable :: tors2(/;"	v	module:tors
tors3	tors.os	/^      real*8, allocatable :: tors3(/;"	v	module:tors
tors4	tors.os	/^      real*8, allocatable :: tors4(/;"	v	module:tors
tors5	tors.os	/^      real*8, allocatable :: tors5(/;"	v	module:tors
tors6	tors.os	/^      real*8, allocatable :: tors6(/;"	v	module:tors
torser	embed.os	/^      function torser /;"	os
torsions	torsions.os	/^      subroutine torsions$/;"	s
torsp2	pistuf.os	/^      real*8, allocatable :: torsp2(/;"	v	module:pistuf
torsunit	torpot.os	/^      real*8 torsunit$/;"	v	module:torpot
tortor	tortor.os	/^      module tortor$/;"	m
torus	connolly.os	/^      subroutine torus$/;"	s
toterr	embed.os	/^      function toterr /;"	os
totmass	molcul.os	/^      real*8 totmass$/;"	v	module:molcul
tpath	syntrn.os	/^      real*8 tpath$/;"	v	module:syntrn
tr	faces.os	/^      real*8, allocatable :: tr(/;"	v	module:faces
translate	gmxtrr.cpp	/^void translate( gmx::real xbox, gmx::real ybox, gmx::real zbox,$/;"	os
translate	gmxtrr.cpp	/^void translate(gmx::rvec *box, double *xbox, double *ybox, double *zbox, double *alpha, double *beta, double *gamma) {$/;"	os
tree	tree.os	/^      module tree$/;"	m
triangle	embed.os	/^      subroutine triangle$/;"	s
triclinic	boxes.os	/^      logical triclinic$/;"	v	module:boxes
trifix	embed.os	/^      subroutine trifix /;"	s
trimhead	trimtext.os	/^      subroutine trimhead /;"	s
trimtext	trimtext.os	/^      function trimtext /;"	os
triple	connolly.os	/^      function triple /;"	os
trr_close_	gmxtrr.cpp	/^void trr_close_(gmx::t_fileio **handle){$/;"	os
trr_open_	gmxtrr.cpp	/^void trr_open_(const char *fn, int *leng, gmx::t_fileio **handle){$/;"	os
trr_read_next_	gmxtrr.cpp	/^void trr_read_next_(gmx::t_fileio **handle,$/;"	os
trust	square.os	/^      subroutine trust /;"	s
tslope	hpmf.os	/^      real*8 tslope,/;"	v	module:hpmf
tslope	korbs.os	/^      real*8 tslope(/;"	v	module:korbs
tslope4	korbs.os	/^      real*8 tslope4(/;"	v	module:korbs
tslope5	korbs.os	/^      real*8 tslope5(/;"	v	module:korbs
tta	faces.os	/^      integer, allocatable :: tta(/;"	v	module:faces
ttbur	faces.os	/^      logical, allocatable :: ttbur(/;"	v	module:faces
ttfe	faces.os	/^      integer, allocatable :: ttfe(/;"	v	module:faces
ttfree	faces.os	/^      logical, allocatable :: ttfree(/;"	v	module:faces
ttle	faces.os	/^      integer, allocatable :: ttle(/;"	v	module:faces
ttorunit	torpot.os	/^      real*8 ttorunit$/;"	v	module:torpot
ttx	ktrtor.os	/^      real*8 ttx(/;"	v	module:ktrtor
tty	ktrtor.os	/^      real*8 tty(/;"	v	module:ktrtor
twall	chrono.os	/^      real*8 twall$/;"	v	module:chrono
twosix	math.os	/^      real*8 sqrttwo,twosix$/;"	v	module:math
type	atoms.os	/^      integer type(/;"	v	module:atoms
type0	mutant.os	/^      integer, allocatable :: type0(/;"	v	module:mutant
type1	mutant.os	/^      integer, allocatable :: type1(/;"	v	module:mutant
u1scale	polpot.os	/^      real*8 u1scale,/;"	v	module:polpot
u2scale	polpot.os	/^      real*8 u1scale,u2scale$/;"	v	module:polpot
u3scale	polpot.os	/^      real*8 u3scale,/;"	v	module:polpot
u4scale	polpot.os	/^      real*8 u3scale,u4scale$/;"	v	module:polpot
uace	solute.os	/^      real*8, allocatable :: uace(/;"	v	module:solute
ubuf2	neigh.os	/^      real*8 mbuf2,ubuf2$/;"	v	module:neigh
ubufx	neigh.os	/^      real*8 mbufx,ubufx$/;"	v	module:neigh
ubuild	nblist.os	/^      subroutine ubuild$/;"	s
ucon	kurybr.os	/^      real*8 ucon(/;"	v	module:kurybr
udalt	uprior.os	/^      real*8, allocatable :: udalt(/;"	v	module:uprior
udiag	polpot.os	/^      real*8 udiag$/;"	v	module:polpot
udirect1	induce.os	/^      subroutine udirect1 /;"	s
udirect2a	induce.os	/^      subroutine udirect2a /;"	s
udirect2b	induce.os	/^      subroutine udirect2b /;"	s
ufield0a	induce.os	/^      subroutine ufield0a /;"	s
ufield0b	induce.os	/^      subroutine ufield0b /;"	s
ufield0c	induce.os	/^      subroutine ufield0c /;"	s
ufield0d	induce.os	/^      subroutine ufield0d /;"	s
ufield0e	induce.os	/^      subroutine ufield0e /;"	s
uind	polar.os	/^      real*8, allocatable :: uind(/;"	v	module:polar
uinds	polar.os	/^      real*8, allocatable :: uinds(/;"	v	module:polar
uindsave	mdstuf.os	/^      logical uindsave$/;"	v	module:mdstuf
uinp	polar.os	/^      real*8, allocatable :: uinp(/;"	v	module:polar
uinps	polar.os	/^      real*8, allocatable :: uinps(/;"	v	module:polar
uk	urey.os	/^      real*8, allocatable :: uk(/;"	v	module:urey
ul	urey.os	/^      real*8, allocatable :: ul(/;"	v	module:urey
ulight	nblist.os	/^      subroutine ulight$/;"	s
ulist	nblist.os	/^      subroutine ulist$/;"	s
ulspred	induce.os	/^      subroutine ulspred$/;"	s
ulst	neigh.os	/^      integer, allocatable :: ulst(/;"	v	module:neigh
umbrella	umbrella.os	/^      module umbrella$/;"	m
umutual1	induce.os	/^      subroutine umutual1 /;"	s
umutual2a	induce.os	/^      subroutine umutual2a /;"	s
umutual2b	induce.os	/^      subroutine umutual2b /;"	s
underbar	ascii.os	/^      integer caret,underbar$/;"	v	module:ascii
unitcell	unitcell.os	/^      subroutine unitcell$/;"	s
units	units.os	/^      module units$/;"	m
upalt	uprior.os	/^      real*8, allocatable :: upalt(/;"	v	module:uprior
upcase	trimtext.os	/^      subroutine upcase /;"	s
uprior	uprior.os	/^      module uprior$/;"	m
upsalt	uprior.os	/^      real*8, allocatable :: upsalt(/;"	v	module:uprior
urey	urey.os	/^      module urey$/;"	m
ureyunit	urypot.os	/^      real*8 ureyunit$/;"	v	module:urypot
urypot	urypot.os	/^      module urypot$/;"	m
usage	usage.os	/^      module usage$/;"	m
usalt	uprior.os	/^      real*8, allocatable :: usalt(/;"	v	module:uprior
uscale0a	induce.os	/^      subroutine uscale0a /;"	s
uscale0b	induce.os	/^      subroutine uscale0b /;"	s
use	usage.os	/^      logical, allocatable :: use(/;"	v	module:usage
use_angang	potent.os	/^      logical use_angang,/;"	v	module:potent
use_angle	potent.os	/^      logical use_bond,use_angle$/;"	v	module:potent
use_angtor	potent.os	/^      logical use_angtor,/;"	v	module:potent
use_anneal	disgeo.os	/^      logical use_anneal$/;"	v	module:disgeo
use_basin	restrn.os	/^      logical use_basin$/;"	v	module:restrn
use_bond	potent.os	/^      logical use_bond,/;"	v	module:potent
use_born	potent.os	/^      logical use_extra,use_born$/;"	v	module:potent
use_bounds	bound.os	/^      logical use_bounds$/;"	v	module:bound
use_charge	potent.os	/^      logical use_vdw,use_charge$/;"	v	module:potent
use_chgdpl	potent.os	/^      logical use_chgdpl,/;"	v	module:potent
use_clist	limits.os	/^      logical use_clist,/;"	v	module:limits
use_ct	potent.os	/^      logical use_ct$/;"	v	module:potent
use_dem	warp.os	/^      logical use_dem$/;"	v	module:warp
use_dipole	potent.os	/^      logical use_chgdpl,use_dipole$/;"	v	module:potent
use_dpl	potfit.os	/^      logical use_dpl,/;"	v	module:potfit
use_ewald	limits.os	/^      logical use_ewald,/;"	v	module:limits
use_extra	potent.os	/^      logical use_extra,/;"	v	module:potent
use_gda	warp.os	/^      logical use_gda$/;"	v	module:warp
use_geom	potent.os	/^      logical use_metal,use_geom$/;"	v	module:potent
use_group	group.os	/^      logical use_group$/;"	v	module:group
use_improp	potent.os	/^      logical use_opdist,use_improp$/;"	v	module:potent
use_imptor	potent.os	/^      logical use_imptor,/;"	v	module:potent
use_inter	group.os	/^      logical use_inter$/;"	v	module:group
use_intra	group.os	/^      logical use_intra$/;"	v	module:group
use_invert	disgeo.os	/^      logical use_invert$/;"	v	module:disgeo
use_lights	limits.os	/^      logical use_ewald,use_lights$/;"	v	module:limits
use_list	limits.os	/^      logical use_list,/;"	v	module:limits
use_metal	potent.os	/^      logical use_metal,/;"	v	module:potent
use_mlist	limits.os	/^      logical use_clist,use_mlist$/;"	v	module:limits
use_mpole	potent.os	/^      logical use_mpole,/;"	v	module:potent
use_opbend	potent.os	/^      logical use_angang,use_opbend$/;"	v	module:potent
use_opdist	potent.os	/^      logical use_opdist,/;"	v	module:potent
use_orbit	potent.os	/^      logical use_orbit$/;"	v	module:potent
use_pitors	potent.os	/^      logical use_pitors,/;"	v	module:potent
use_polar	potent.os	/^      logical use_mpole,use_polar$/;"	v	module:potent
use_polymer	bound.os	/^      logical use_polymer$/;"	v	module:bound
use_pred	uprior.os	/^      logical use_pred$/;"	v	module:uprior
use_qdp	potfit.os	/^      logical use_dpl,use_qdp$/;"	v	module:potfit
use_rattle	freeze.os	/^      logical use_rattle$/;"	v	module:freeze
use_replica	bound.os	/^      logical use_replica$/;"	v	module:bound
use_rigid	rigid.os	/^      logical use_rigid$/;"	v	module:rigid
use_rxnfld	potent.os	/^      logical use_rxnfld,/;"	v	module:potent
use_sdarea	stodyn.os	/^      logical use_sdarea$/;"	v	module:stodyn
use_short	rotbnd.os	/^      logical use_short$/;"	v	module:rotbnd
use_smooth	warp.os	/^      logical use_smooth$/;"	v	module:warp
use_socket	socket.os	/^      logical use_socket$/;"	v	module:socket
use_solv	potent.os	/^      logical use_rxnfld,use_solv$/;"	v	module:potent
use_stophat	warp.os	/^      logical use_stophat$/;"	v	module:warp
use_strbnd	potent.os	/^      logical use_strbnd,/;"	v	module:potent
use_strtor	potent.os	/^      logical use_pitors,use_strtor$/;"	v	module:potent
use_tophat	warp.os	/^      logical use_tophat$/;"	v	module:warp
use_tors	potent.os	/^      logical use_imptor,use_tors$/;"	v	module:potent
use_tortor	potent.os	/^      logical use_angtor,use_tortor$/;"	v	module:potent
use_ulist	limits.os	/^      logical use_ulist$/;"	v	module:limits
use_urey	potent.os	/^      logical use_strbnd,use_urey$/;"	v	module:potent
use_vcorr	vdwpot.os	/^      logical use_vcorr$/;"	v	module:vdwpot
use_vdw	potent.os	/^      logical use_vdw,/;"	v	module:potent
use_vlist	limits.os	/^      logical use_list,use_vlist$/;"	v	module:limits
use_wall	restrn.os	/^      logical use_wall$/;"	v	module:restrn
usolvcut	limits.os	/^      real*8 ewaldcut,usolvcut$/;"	v	module:limits
usolve	usolve.os	/^      module usolve$/;"	m
v	moldyn.os	/^      real*8, allocatable :: v(/;"	v	module:moldyn
v2scale	vdwpot.os	/^      real*8 v2scale,/;"	v	module:vdwpot
v3scale	vdwpot.os	/^      real*8 v2scale,v3scale$/;"	v	module:vdwpot
v4scale	vdwpot.os	/^      real*8 v4scale,/;"	v	module:vdwpot
v5scale	vdwpot.os	/^      real*8 v4scale,v5scale$/;"	v	module:vdwpot
va	faces.os	/^      integer, allocatable :: va(/;"	v	module:faces
val	merck.os	/^      integer val(/;"	v	module:merck
valence	atomid.os	/^      integer valence(/;"	v	module:atomid
valfit	valfit.os	/^      module valfit$/;"	m
vam	connolly.os	/^      subroutine vam /;"	s
vartyp	xtals.os	/^      character*16 vartyp(/;"	v	module:xtals
vary	xtals.os	/^      integer vary(/;"	v	module:xtals
vbar	bath.os	/^      real*8 vbar,/;"	v	module:bath
vbuf2	neigh.os	/^      real*8 vbuf2,/;"	v	module:neigh
vbufx	neigh.os	/^      real*8 vbufx,/;"	v	module:neigh
vbuild	nblist.os	/^      subroutine vbuild /;"	s
vc	rgddyn.os	/^      real*8, allocatable :: vc(/;"	v	module:rgddyn
vcm	rgddyn.os	/^      real*8, allocatable :: vcm(/;"	v	module:rgddyn
vcross	connolly.os	/^      subroutine vcross /;"	s
vdw	vdw.os	/^      module vdw$/;"	m
vdwcut	limits.os	/^      real*8 vdwcut,/;"	v	module:limits
vdwerr	embed.os	/^      function vdwerr /;"	os
vdwindex	vdwpot.os	/^      character*5 vdwindex$/;"	v	module:vdwpot
vdwmax	disgeo.os	/^      real*8 vdwmax$/;"	v	module:disgeo
vdwpot	vdwpot.os	/^      module vdwpot$/;"	m
vdwrad	ptable.os	/^      real*8 vdwrad(/;"	v	module:ptable
vdwtaper	limits.os	/^      real*8 vdwtaper,/;"	v	module:limits
vdwtyp	vdwpot.os	/^      character*13 vdwtyp$/;"	v	module:vdwpot
vecang	connolly.os	/^      function vecang /;"	os
velocityVID	AmberNetcdf.h	/^  int velocityVID;    \/\/ ID of velocities variable$/;"	m	struct:AmberNetcdf
velsave	mdstuf.os	/^      logical velsave$/;"	v	module:mdstuf
verbose	inform.os	/^      logical silent,verbose$/;"	v	module:inform
verlet	verlet.os	/^      subroutine verlet /;"	s
version	version.os	/^      subroutine version /;"	s
vertical	ascii.os	/^      integer vertical,/;"	v	module:ascii
vibs	vibs.os	/^      module vibs$/;"	m
vir	virial.os	/^      real*8 vir(/;"	v	module:virial
virial	virial.os	/^      module virial$/;"	m
vlambda	mutant.os	/^      real*8 vlambda$/;"	v	module:mutant
vlight	nblist.os	/^      subroutine vlight /;"	s
vlist	nblist.os	/^      subroutine vlist$/;"	s
vlst	neigh.os	/^      integer, allocatable :: vlst(/;"	v	module:neigh
vnh	bath.os	/^      real*8 vnh(/;"	v	module:bath
vnorm	connolly.os	/^      subroutine vnorm /;"	s
volbox	boxes.os	/^      real*8 box34,volbox$/;"	v	module:boxes
volmove	bath.os	/^      real*8 eta,volmove$/;"	v	module:bath
volscale	bath.os	/^      character*9 volscale$/;"	v	module:bath
voltrial	bath.os	/^      integer voltrial$/;"	v	module:bath
volume	volume.os	/^      subroutine volume /;"	s
volume1	volume.os	/^      subroutine volume1 /;"	s
volume2	volume.os	/^      subroutine volume2 /;"	s
vp	faces.os	/^      integer, allocatable :: vp(/;"	v	module:faces
vprop	improp.os	/^      real*8, allocatable :: vprop(/;"	v	module:improp
vsolv	solute.os	/^      real*8, allocatable :: vsolv(/;"	v	module:solute
vxyz	faces.os	/^      real*8, allocatable :: vxyz(/;"	v	module:faces
w1	hpmf.os	/^      real*8 w1,/;"	v	module:hpmf
w2	hpmf.os	/^      real*8 w1,w2,/;"	v	module:hpmf
w3	hpmf.os	/^      real*8 w1,w2,w3$/;"	v	module:hpmf
wace	solute.os	/^      real*8, allocatable :: wace(/;"	v	module:solute
warp	warp.os	/^      module warp$/;"	m
wc	rgddyn.os	/^      real*8, allocatable :: wc(/;"	v	module:rgddyn
wcm	rgddyn.os	/^      real*8, allocatable :: wcm(/;"	v	module:rgddyn
weight	katoms.os	/^      real*8 weight(/;"	v	module:katoms
wfit	align.os	/^      real*8, allocatable :: wfit(/;"	v	module:align
wgrp	group.os	/^      real*8, allocatable :: wgrp(/;"	v	module:group
width	restrn.os	/^      real*8 width$/;"	v	module:restrn
wiggle	connolly.os	/^      subroutine wiggle$/;"	s
worb	orbits.os	/^      real*8, allocatable :: worb(/;"	v	module:orbits
x	atoms.os	/^      real*8 x(/;"	v	module:atoms
xaxis	mpole.os	/^      integer, allocatable :: xaxis(/;"	v	module:mpole
xbox	boxes.os	/^      real*8 xbox,/;"	v	module:boxes
xbox2	boxes.os	/^      real*8 xbox2,/;"	v	module:boxes
xboxref	refer.os	/^      real*8 xboxref(/;"	v	module:refer
xcell	cell.os	/^      real*8 xcell$/;"	v	module:cell
xcell2	cell.os	/^      real*8 xcell2$/;"	v	module:cell
xcmo	rgddyn.os	/^      real*8, allocatable :: xcmo(/;"	v	module:rgddyn
xcold	neigh.os	/^      real*8, allocatable :: xcold(/;"	v	module:neigh
xdpl	moment.os	/^      real*8 xdpl,/;"	v	module:moment
xdpl0	potfit.os	/^      real*8 xdpl0(/;"	v	module:potfit
xfrac	fracs.os	/^      real*8, allocatable :: xfrac(/;"	v	module:fracs
xm	syntrn.os	/^      real*8, allocatable :: xm(/;"	v	module:syntrn
xmin1	syntrn.os	/^      real*8, allocatable :: xmin1(/;"	v	module:syntrn
xmin2	syntrn.os	/^      real*8, allocatable :: xmin2(/;"	v	module:syntrn
xmold	neigh.os	/^      real*8, allocatable :: xmold(/;"	v	module:neigh
xpdb	pdb.os	/^      real*8, allocatable :: xpdb(/;"	v	module:pdb
xpfix	restrn.os	/^      real*8, allocatable :: xpfix(/;"	v	module:restrn
xrb	rigid.os	/^      real*8, allocatable :: xrb(/;"	v	module:rigid
xref	refer.os	/^      real*8, allocatable :: xref(/;"	v	module:refer
xtals	xtals.os	/^      module xtals$/;"	m
xuold	neigh.os	/^      real*8, allocatable :: xuold(/;"	v	module:neigh
xvold	neigh.os	/^      real*8, allocatable :: xvold(/;"	v	module:neigh
xxqdp	moment.os	/^      real*8 xxqdp,/;"	v	module:moment
xxqdp0	potfit.os	/^      real*8 xxqdp0(/;"	v	module:potfit
xyqdp	moment.os	/^      real*8 xxqdp,xyqdp,/;"	v	module:moment
xyqdp0	potfit.os	/^      real*8 xyqdp0(/;"	v	module:potfit
xyzatm	xyzatm.os	/^      subroutine xyzatm /;"	s
xyzrigid	orient.os	/^      subroutine xyzrigid$/;"	s
xzqdp	moment.os	/^      real*8 xxqdp,xyqdp,xzqdp$/;"	v	module:moment
xzqdp0	potfit.os	/^      real*8 xzqdp0(/;"	v	module:potfit
y	atoms.os	/^      real*8 y(/;"	v	module:atoms
yaxis	mpole.os	/^      integer, allocatable :: yaxis(/;"	v	module:mpole
ybox	boxes.os	/^      real*8 xbox,ybox,/;"	v	module:boxes
ybox2	boxes.os	/^      real*8 xbox2,ybox2,/;"	v	module:boxes
yboxref	refer.os	/^      real*8 yboxref(/;"	v	module:refer
ycell	cell.os	/^      real*8 ycell$/;"	v	module:cell
ycell2	cell.os	/^      real*8 ycell2$/;"	v	module:cell
ycmo	rgddyn.os	/^      real*8, allocatable :: ycmo(/;"	v	module:rgddyn
ycold	neigh.os	/^      real*8, allocatable :: ycold(/;"	v	module:neigh
ydpl	moment.os	/^      real*8 xdpl,ydpl,/;"	v	module:moment
ydpl0	potfit.os	/^      real*8 ydpl0(/;"	v	module:potfit
yfrac	fracs.os	/^      real*8, allocatable :: yfrac(/;"	v	module:fracs
ymold	neigh.os	/^      real*8, allocatable :: ymold(/;"	v	module:neigh
ypdb	pdb.os	/^      real*8, allocatable :: ypdb(/;"	v	module:pdb
ypfix	restrn.os	/^      real*8, allocatable :: ypfix(/;"	v	module:restrn
yrb	rigid.os	/^      real*8, allocatable :: yrb(/;"	v	module:rigid
yref	refer.os	/^      real*8, allocatable :: yref(/;"	v	module:refer
yuold	neigh.os	/^      real*8, allocatable :: yuold(/;"	v	module:neigh
yvold	neigh.os	/^      real*8, allocatable :: yvold(/;"	v	module:neigh
yxqdp	moment.os	/^      real*8 yxqdp,/;"	v	module:moment
yyqdp	moment.os	/^      real*8 yxqdp,yyqdp,/;"	v	module:moment
yyqdp0	potfit.os	/^      real*8 yyqdp0(/;"	v	module:potfit
yzqdp	moment.os	/^      real*8 yxqdp,yyqdp,yzqdp$/;"	v	module:moment
yzqdp0	potfit.os	/^      real*8 yzqdp0(/;"	v	module:potfit
z	atoms.os	/^      real*8 z(/;"	v	module:atoms
zang	zcoord.os	/^      real*8 zang(/;"	v	module:zcoord
zatom	zatom.os	/^      subroutine zatom /;"	s
zaxis	mpole.os	/^      integer, allocatable :: zaxis(/;"	v	module:mpole
zbond	zcoord.os	/^      real*8 zbond(/;"	v	module:zcoord
zbox	boxes.os	/^      real*8 xbox,ybox,zbox$/;"	v	module:boxes
zbox2	boxes.os	/^      real*8 xbox2,ybox2,zbox2$/;"	v	module:boxes
zboxref	refer.os	/^      real*8 zboxref(/;"	v	module:refer
zcell	cell.os	/^      real*8 zcell$/;"	v	module:cell
zcell2	cell.os	/^      real*8 zcell2$/;"	v	module:cell
zclose	zclose.os	/^      module zclose$/;"	m
zcmo	rgddyn.os	/^      real*8, allocatable :: zcmo(/;"	v	module:rgddyn
zcold	neigh.os	/^      real*8, allocatable :: zcold(/;"	v	module:neigh
zcoord	zcoord.os	/^      module zcoord$/;"	m
zdpl	moment.os	/^      real*8 xdpl,ydpl,zdpl$/;"	v	module:moment
zdpl0	potfit.os	/^      real*8 zdpl0(/;"	v	module:potfit
zfrac	fracs.os	/^      real*8, allocatable :: zfrac(/;"	v	module:fracs
zline	omega.os	/^      integer, allocatable :: zline(/;"	v	module:omega
zmold	neigh.os	/^      real*8, allocatable :: zmold(/;"	v	module:neigh
zpdb	pdb.os	/^      real*8, allocatable :: zpdb(/;"	v	module:pdb
zpfix	restrn.os	/^      real*8, allocatable :: zpfix(/;"	v	module:restrn
zrb	rigid.os	/^      real*8, allocatable :: zrb(/;"	v	module:rigid
zref	refer.os	/^      real*8, allocatable :: zref(/;"	v	module:refer
ztors	zcoord.os	/^      real*8 ztors(/;"	v	module:zcoord
zuold	neigh.os	/^      real*8, allocatable :: zuold(/;"	v	module:neigh
zvold	neigh.os	/^      real*8, allocatable :: zvold(/;"	v	module:neigh
zxqdp	moment.os	/^      real*8 zxqdp,/;"	v	module:moment
zyqdp	moment.os	/^      real*8 zxqdp,zyqdp,/;"	v	module:moment
zzqdp	moment.os	/^      real*8 zxqdp,zyqdp,zzqdp$/;"	v	module:moment
zzqdp0	potfit.os	/^      real*8 zzqdp0(/;"	v	module:potfit
